
;; Function lower_cholesky_factor



Pass 0

  Register 42 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:1848 FP_SECOND_REG:1848 FLOAT_REGS:1848 SSE_REGS:308 MMX_REGS:462 FLOAT_INT_REGS:1848 ALL_REGS:1848 MEM:306
  Register 43 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:1068 FP_SECOND_REG:1068 FLOAT_REGS:1068 SSE_REGS:178 MMX_REGS:267 FLOAT_INT_REGS:1068 ALL_REGS:1068 MEM:176
  Register 44 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:1092 FP_SECOND_REG:1092 FLOAT_REGS:1092 SSE_REGS:182 MMX_REGS:273 FLOAT_INT_REGS:1092 ALL_REGS:1092 MEM:100
  Register 45 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:1592 FP_SECOND_REG:1592 FLOAT_REGS:1592 SSE_REGS:272 MMX_REGS:408 FLOAT_INT_REGS:1592 ALL_REGS:1592 MEM:156
  Register 46 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:3104 FP_SECOND_REG:3104 FLOAT_REGS:3104 SSE_REGS:544 MMX_REGS:816 FLOAT_INT_REGS:3104 ALL_REGS:3104 MEM:480
  Register 47 costs: NO_REGS:0 AREG:-2 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:1740 FP_SECOND_REG:1740 FLOAT_REGS:1740 SSE_REGS:292 MMX_REGS:438 FLOAT_INT_REGS:1740 ALL_REGS:1740 MEM:157
  Register 48 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:928 FP_SECOND_REG:928 FLOAT_REGS:928 SSE_REGS:160 MMX_REGS:240 FLOAT_INT_REGS:928 ALL_REGS:928 MEM:160
  Register 49 costs: NO_REGS:32 AREG:240 DREG:240 CREG:240 BREG:240 SIREG:240 DIREG:240 AD_REGS:240 Q_REGS:240 NON_Q_REGS:240 INDEX_REGS:240 GENERAL_REGS:240 FP_TOP_REG:32 FP_SECOND_REG:32 FLOAT_REGS:32 SSE_REGS:240 MMX_REGS:240 FLOAT_INT_REGS:240 ALL_REGS:240 MEM:192
  Register 50 costs: NO_REGS:128 AREG:768 DREG:768 CREG:768 BREG:768 SIREG:768 DIREG:768 AD_REGS:768 Q_REGS:768 NON_Q_REGS:960 INDEX_REGS:768 GENERAL_REGS:960 FP_TOP_REG:128 FP_SECOND_REG:128 FLOAT_REGS:128 SSE_REGS:960 MMX_REGS:960 FLOAT_INT_REGS:768 ALL_REGS:960 MEM:704
  Register 51 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:12
  Register 52 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:16
  Register 53 costs: NO_REGS:8 AREG:8 DREG:8 CREG:8 BREG:8 SIREG:8 DIREG:8 AD_REGS:8 Q_REGS:8 NON_Q_REGS:8 INDEX_REGS:8 GENERAL_REGS:8 FP_TOP_REG:144 FP_SECOND_REG:144 FLOAT_REGS:144 SSE_REGS:32 MMX_REGS:44 FLOAT_INT_REGS:144 ALL_REGS:144 MEM:24
  Register 54 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:8
  Register 56 costs: NO_REGS:8 AREG:8 DREG:8 CREG:8 BREG:8 SIREG:8 DIREG:8 AD_REGS:8 Q_REGS:8 NON_Q_REGS:8 INDEX_REGS:8 GENERAL_REGS:8 FP_TOP_REG:96 FP_SECOND_REG:96 FLOAT_REGS:96 SSE_REGS:24 MMX_REGS:32 FLOAT_INT_REGS:96 ALL_REGS:96 MEM:16
  Register 57 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:8
  Register 58 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:8 INDEX_REGS:0 GENERAL_REGS:8 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:12
  Register 59 costs: NO_REGS:0 AREG:40 DREG:40 CREG:40 BREG:40 SIREG:40 DIREG:40 AD_REGS:40 Q_REGS:40 NON_Q_REGS:88 INDEX_REGS:40 GENERAL_REGS:88 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:88 MMX_REGS:88 FLOAT_INT_REGS:40 ALL_REGS:88 MEM:48
  Register 60 costs: NO_REGS:0 AREG:40 DREG:40 CREG:40 BREG:40 SIREG:40 DIREG:40 AD_REGS:40 Q_REGS:40 NON_Q_REGS:88 INDEX_REGS:40 GENERAL_REGS:88 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:88 MMX_REGS:88 FLOAT_INT_REGS:40 ALL_REGS:88 MEM:48
  Register 62 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:16
  Register 63 costs: NO_REGS:8 AREG:8 DREG:8 CREG:8 BREG:8 SIREG:8 DIREG:8 AD_REGS:8 Q_REGS:8 NON_Q_REGS:8 INDEX_REGS:8 GENERAL_REGS:8 FP_TOP_REG:144 FP_SECOND_REG:144 FLOAT_REGS:144 SSE_REGS:32 MMX_REGS:44 FLOAT_INT_REGS:144 ALL_REGS:144 MEM:24
  Register 64 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:8
  Register 66 costs: NO_REGS:8 AREG:8 DREG:8 CREG:8 BREG:8 SIREG:8 DIREG:8 AD_REGS:8 Q_REGS:8 NON_Q_REGS:8 INDEX_REGS:8 GENERAL_REGS:8 FP_TOP_REG:96 FP_SECOND_REG:96 FLOAT_REGS:96 SSE_REGS:24 MMX_REGS:32 FLOAT_INT_REGS:96 ALL_REGS:96 MEM:16
  Register 67 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:88 FP_SECOND_REG:88 FLOAT_REGS:88 SSE_REGS:16 MMX_REGS:24 FLOAT_INT_REGS:88 ALL_REGS:88 MEM:8
  Register 68 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:24 INDEX_REGS:0 GENERAL_REGS:24 FP_TOP_REG:184 FP_SECOND_REG:184 FLOAT_REGS:184 SSE_REGS:32 MMX_REGS:48 FLOAT_INT_REGS:184 ALL_REGS:184 MEM:28
  Register 69 costs: NO_REGS:0 AREG:40 DREG:40 CREG:40 BREG:40 SIREG:40 DIREG:40 AD_REGS:40 Q_REGS:40 NON_Q_REGS:88 INDEX_REGS:40 GENERAL_REGS:88 FP_TOP_REG:0 FP_SECOND_REG:8 FLOAT_REGS:8 SSE_REGS:88 MMX_REGS:88 FLOAT_INT_REGS:40 ALL_REGS:88 MEM:48
  Register 71 costs: NO_REGS:0 AREG:48 DREG:48 CREG:48 BREG:48 SIREG:48 DIREG:48 AD_REGS:48 Q_REGS:48 NON_Q_REGS:88 INDEX_REGS:48 GENERAL_REGS:88 FP_TOP_REG:0 FP_SECOND_REG:8 FLOAT_REGS:8 SSE_REGS:88 MMX_REGS:88 FLOAT_INT_REGS:48 ALL_REGS:96 MEM:48
  Register 86 costs: NO_REGS:0 AREG:40 DREG:40 CREG:40 BREG:40 SIREG:40 DIREG:40 AD_REGS:40 Q_REGS:40 NON_Q_REGS:88 INDEX_REGS:40 GENERAL_REGS:88 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:88 MMX_REGS:88 FLOAT_INT_REGS:40 ALL_REGS:88 MEM:48
  Register 87 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:352 FP_SECOND_REG:352 FLOAT_REGS:352 SSE_REGS:64 MMX_REGS:96 FLOAT_INT_REGS:352 ALL_REGS:352 MEM:64
  Register 88 costs: NO_REGS:32 AREG:32 DREG:32 CREG:32 BREG:32 SIREG:32 DIREG:32 AD_REGS:32 Q_REGS:32 NON_Q_REGS:32 INDEX_REGS:32 GENERAL_REGS:32 FP_TOP_REG:576 FP_SECOND_REG:576 FLOAT_REGS:576 SSE_REGS:128 MMX_REGS:176 FLOAT_INT_REGS:576 ALL_REGS:576 MEM:96
  Register 89 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:352 FP_SECOND_REG:352 FLOAT_REGS:352 SSE_REGS:64 MMX_REGS:96 FLOAT_INT_REGS:352 ALL_REGS:352 MEM:32
  Register 91 costs: NO_REGS:32 AREG:32 DREG:32 CREG:32 BREG:32 SIREG:32 DIREG:32 AD_REGS:32 Q_REGS:32 NON_Q_REGS:32 INDEX_REGS:32 GENERAL_REGS:32 FP_TOP_REG:384 FP_SECOND_REG:384 FLOAT_REGS:384 SSE_REGS:96 MMX_REGS:128 FLOAT_INT_REGS:384 ALL_REGS:384 MEM:64
  Register 92 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:352 FP_SECOND_REG:352 FLOAT_REGS:352 SSE_REGS:64 MMX_REGS:96 FLOAT_INT_REGS:352 ALL_REGS:352 MEM:32
  Register 93 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:64 INDEX_REGS:0 GENERAL_REGS:64 FP_TOP_REG:544 FP_SECOND_REG:544 FLOAT_REGS:544 SSE_REGS:96 MMX_REGS:144 FLOAT_INT_REGS:544 ALL_REGS:544 MEM:80
  Register 101 costs: NO_REGS:32 AREG:224 DREG:224 CREG:224 BREG:224 SIREG:224 DIREG:224 AD_REGS:224 Q_REGS:224 NON_Q_REGS:544 INDEX_REGS:224 GENERAL_REGS:544 FP_TOP_REG:32 FP_SECOND_REG:32 FLOAT_REGS:32 SSE_REGS:544 MMX_REGS:544 FLOAT_INT_REGS:224 ALL_REGS:608 MEM:272
  Register 103 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:2176 FP_SECOND_REG:2176 FLOAT_REGS:2176 SSE_REGS:384 MMX_REGS:576 FLOAT_INT_REGS:2176 ALL_REGS:2176 MEM:256
  Register 104 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:2176 FP_SECOND_REG:2176 FLOAT_REGS:2176 SSE_REGS:384 MMX_REGS:576 FLOAT_INT_REGS:2176 ALL_REGS:2176 MEM:256
  Register 105 costs: NO_REGS:128 AREG:128 DREG:128 CREG:128 BREG:128 SIREG:128 DIREG:128 AD_REGS:128 Q_REGS:128 NON_Q_REGS:128 INDEX_REGS:128 GENERAL_REGS:128 FP_TOP_REG:2304 FP_SECOND_REG:2304 FLOAT_REGS:2304 SSE_REGS:512 MMX_REGS:704 FLOAT_INT_REGS:2304 ALL_REGS:2304 MEM:384
  Register 107 costs: NO_REGS:128 AREG:128 DREG:128 CREG:128 BREG:128 SIREG:128 DIREG:128 AD_REGS:128 Q_REGS:128 NON_Q_REGS:128 INDEX_REGS:128 GENERAL_REGS:128 FP_TOP_REG:1536 FP_SECOND_REG:1536 FLOAT_REGS:1536 SSE_REGS:384 MMX_REGS:512 FLOAT_INT_REGS:1536 ALL_REGS:1536 MEM:256
  Register 108 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:1408 FP_SECOND_REG:1408 FLOAT_REGS:1408 SSE_REGS:256 MMX_REGS:384 FLOAT_INT_REGS:1408 ALL_REGS:1408 MEM:128
  Register 109 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:256 INDEX_REGS:0 GENERAL_REGS:256 FP_TOP_REG:2176 FP_SECOND_REG:2176 FLOAT_REGS:2176 SSE_REGS:384 MMX_REGS:576 FLOAT_INT_REGS:2176 ALL_REGS:2176 MEM:384
  Register 117 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:128 INDEX_REGS:0 GENERAL_REGS:128 FP_TOP_REG:1408 FP_SECOND_REG:1408 FLOAT_REGS:1408 SSE_REGS:256 MMX_REGS:384 FLOAT_INT_REGS:1408 ALL_REGS:1408 MEM:192
  Register 118 costs: NO_REGS:128 AREG:1536 DREG:1536 CREG:1536 BREG:1536 SIREG:1536 DIREG:1536 AD_REGS:1536 Q_REGS:1536 NON_Q_REGS:1536 INDEX_REGS:1536 GENERAL_REGS:1536 FP_TOP_REG:128 FP_SECOND_REG:128 FLOAT_REGS:128 SSE_REGS:1536 MMX_REGS:1536 FLOAT_INT_REGS:1536 ALL_REGS:1536 MEM:1152
  Register 119 costs: NO_REGS:0 AREG:768 DREG:768 CREG:768 BREG:768 SIREG:768 DIREG:768 AD_REGS:768 Q_REGS:768 NON_Q_REGS:1408 INDEX_REGS:768 GENERAL_REGS:1408 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:1408 MMX_REGS:1408 FLOAT_INT_REGS:768 ALL_REGS:1536 MEM:768
  Register 122 costs: NO_REGS:2 AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 FP_TOP_REG:36 FP_SECOND_REG:36 FLOAT_REGS:36 SSE_REGS:8 MMX_REGS:11 FLOAT_INT_REGS:36 ALL_REGS:36 MEM:6
  Register 123 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:2
  Register 125 costs: NO_REGS:2 AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 FP_TOP_REG:24 FP_SECOND_REG:24 FLOAT_REGS:24 SSE_REGS:6 MMX_REGS:8 FLOAT_INT_REGS:24 ALL_REGS:24 MEM:4
  Register 126 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:2
  Register 127 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:2 INDEX_REGS:0 GENERAL_REGS:2 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:3
  Register 128 costs: NO_REGS:0 AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:22 INDEX_REGS:10 GENERAL_REGS:22 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:22 MMX_REGS:22 FLOAT_INT_REGS:10 ALL_REGS:22 MEM:12
  Register 129 costs: NO_REGS:0 AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:22 INDEX_REGS:10 GENERAL_REGS:22 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 SSE_REGS:22 MMX_REGS:22 FLOAT_INT_REGS:10 ALL_REGS:22 MEM:12
  Register 131 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:4
  Register 132 costs: NO_REGS:2 AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 FP_TOP_REG:36 FP_SECOND_REG:36 FLOAT_REGS:36 SSE_REGS:8 MMX_REGS:11 FLOAT_INT_REGS:36 ALL_REGS:36 MEM:6
  Register 133 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:2
  Register 135 costs: NO_REGS:2 AREG:2 DREG:2 CREG:2 BREG:2 SIREG:2 DIREG:2 AD_REGS:2 Q_REGS:2 NON_Q_REGS:2 INDEX_REGS:2 GENERAL_REGS:2 FP_TOP_REG:24 FP_SECOND_REG:24 FLOAT_REGS:24 SSE_REGS:6 MMX_REGS:8 FLOAT_INT_REGS:24 ALL_REGS:24 MEM:4
  Register 136 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:2
  Register 137 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:4 INDEX_REGS:0 GENERAL_REGS:4 FP_TOP_REG:34 FP_SECOND_REG:34 FLOAT_REGS:34 SSE_REGS:6 MMX_REGS:9 FLOAT_INT_REGS:34 ALL_REGS:34 MEM:5
  Register 138 costs: NO_REGS:0 AREG:10 DREG:10 CREG:10 BREG:10 SIREG:10 DIREG:10 AD_REGS:10 Q_REGS:10 NON_Q_REGS:22 INDEX_REGS:10 GENERAL_REGS:22 FP_TOP_REG:0 FP_SECOND_REG:2 FLOAT_REGS:2 SSE_REGS:22 MMX_REGS:22 FLOAT_INT_REGS:10 ALL_REGS:22 MEM:12
  Register 140 costs: NO_REGS:0 AREG:12 DREG:12 CREG:12 BREG:12 SIREG:12 DIREG:12 AD_REGS:12 Q_REGS:12 NON_Q_REGS:22 INDEX_REGS:12 GENERAL_REGS:22 FP_TOP_REG:0 FP_SECOND_REG:2 FLOAT_REGS:2 SSE_REGS:22 MMX_REGS:22 FLOAT_INT_REGS:12 ALL_REGS:24 MEM:12
  Register 149 costs: NO_REGS:0 AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 Q_REGS:0 NON_Q_REGS:0 INDEX_REGS:0 GENERAL_REGS:0 FP_TOP_REG:22 FP_SECOND_REG:22 FLOAT_REGS:22 SSE_REGS:4 MMX_REGS:6 FLOAT_INT_REGS:22 ALL_REGS:22 MEM:3

  Register 42 pref GENERAL_REGS or none
  Register 43 pref GENERAL_REGS or none
  Register 44 pref GENERAL_REGS or none
  Register 45 pref GENERAL_REGS or none
  Register 46 pref GENERAL_REGS or none
  Register 47 pref AREG, else GENERAL_REGS
  Register 48 pref GENERAL_REGS or none
  Register 49 pref FLOAT_REGS or none
  Register 50 pref FLOAT_REGS or none
  Register 51 pref GENERAL_REGS or none
  Register 52 pref GENERAL_REGS or none
  Register 53 pref GENERAL_REGS or none
  Register 54 pref GENERAL_REGS or none
  Register 56 pref GENERAL_REGS or none
  Register 57 pref GENERAL_REGS or none
  Register 58 pref INDEX_REGS, else GENERAL_REGS
  Register 59 pref FLOAT_REGS, else FLOAT_INT_REGS
  Register 60 pref FLOAT_REGS, else FLOAT_INT_REGS
  Register 62 pref GENERAL_REGS or none
  Register 63 pref GENERAL_REGS or none
  Register 64 pref GENERAL_REGS or none
  Register 66 pref GENERAL_REGS or none
  Register 67 pref GENERAL_REGS or none
  Register 68 pref INDEX_REGS, else GENERAL_REGS
  Register 69 pref FP_TOP_REG, else FLOAT_INT_REGS
  Register 71 pref FP_TOP_REG, else FLOAT_REGS
  Register 86 pref FLOAT_REGS, else FLOAT_INT_REGS
  Register 87 pref GENERAL_REGS or none
  Register 88 pref GENERAL_REGS or none
  Register 89 pref GENERAL_REGS or none
  Register 91 pref GENERAL_REGS or none
  Register 92 pref GENERAL_REGS or none
  Register 93 pref INDEX_REGS, else GENERAL_REGS
  Register 101 pref FLOAT_REGS, else FLOAT_INT_REGS
  Register 103 pref GENERAL_REGS or none
  Register 104 pref GENERAL_REGS or none
  Register 105 pref GENERAL_REGS or none
  Register 107 pref GENERAL_REGS or none
  Register 108 pref GENERAL_REGS or none
  Register 109 pref INDEX_REGS, else GENERAL_REGS
  Register 117 pref INDEX_REGS, else GENERAL_REGS
  Register 118 pref FLOAT_REGS or none
  Register 119 pref FLOAT_REGS or none
  Register 122 pref GENERAL_REGS or none
  Register 123 pref GENERAL_REGS or none
  Register 125 pref GENERAL_REGS or none
  Register 126 pref GENERAL_REGS or none
  Register 127 pref INDEX_REGS, else GENERAL_REGS
  Register 128 pref FLOAT_REGS, else FLOAT_INT_REGS
  Register 129 pref FLOAT_REGS, else FLOAT_INT_REGS
  Register 131 pref GENERAL_REGS or none
  Register 132 pref GENERAL_REGS or none
  Register 133 pref GENERAL_REGS or none
  Register 135 pref GENERAL_REGS or none
  Register 136 pref GENERAL_REGS or none
  Register 137 pref INDEX_REGS, else GENERAL_REGS
  Register 138 pref FP_TOP_REG, else FLOAT_INT_REGS
  Register 140 pref FP_TOP_REG, else FLOAT_REGS
  Register 149 pref GENERAL_REGS or none
150 registers.

Register 42 used 18 times across 158 insns; set 1 time; user var; GENERAL_REGS or none; pointer.

Register 43 used 13 times across 160 insns; set 1 time; user var; GENERAL_REGS or none; pointer.

Register 44 used 15 times across 126 insns; set 1 time; user var; GENERAL_REGS or none.

Register 45 used 28 times across 33 insns; set 2 times; user var; dies in 0 places; GENERAL_REGS or none.

Register 46 used 19 times across 8 insns; set 2 times; user var; GENERAL_REGS or none.

Register 47 used 40 times across 156 insns; set 3 times; user var; dies in 3 places; pref AREG, else GENERAL_REGS.

Register 48 used 7 times across 17 insns; set 1 time; user var; dies in 0 places; GENERAL_REGS or none.

Register 49 used 5 times across 33 insns; set 1 time; user var; dies in 0 places; 8 bytes; FLOAT_REGS or none.

Register 50 used 7 times across 18 insns; set 1 time; user var; dies in 0 places; 8 bytes; FLOAT_REGS or none.

Register 51 used 4 times across 2 insns in block 6; set 1 time; GENERAL_REGS or none.

Register 52 used 4 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 53 used 6 times across 3 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 54 used 4 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 56 used 4 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 57 used 4 times across 2 insns in block 1; set 1 time; GENERAL_REGS or none.

Register 58 used 4 times across 2 insns in block 1; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 59 used 4 times across 3 insns in block 1; set 1 time; 8 bytes; pref FLOAT_REGS, else FLOAT_INT_REGS.

Register 60 used 4 times across 4 insns in block 1; set 1 time; 8 bytes; pref FLOAT_REGS, else FLOAT_INT_REGS.

Register 62 used 4 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 63 used 6 times across 3 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 64 used 4 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 66 used 4 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 67 used 4 times across 2 insns in block 2; set 1 time; GENERAL_REGS or none.

Register 68 used 8 times across 6 insns in block 2; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 69 used 6 times across 4 insns in block 2; set 1 time; user var; 8 bytes; pref FP_TOP_REG, else FLOAT_INT_REGS.

Register 71 used 4 times across 2 insns in block 2; set 1 time; user var; 8 bytes; pref FP_TOP_REG, else FLOAT_REGS.

Register 86 used 4 times across 4 insns in block 2; set 1 time; 8 bytes; pref FLOAT_REGS, else FLOAT_INT_REGS.

Register 87 used 6 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 88 used 9 times across 3 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 89 used 6 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 91 used 6 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 92 used 6 times across 2 insns in block 3; set 1 time; GENERAL_REGS or none.

Register 93 used 9 times across 3 insns in block 3; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 101 used 9 times across 3 insns in block 3; set 1 time; 8 bytes; pref FLOAT_REGS, else FLOAT_INT_REGS.

Register 103 used 12 times across 3 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 104 used 12 times across 11 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 105 used 12 times across 3 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 107 used 8 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 108 used 8 times across 2 insns in block 4; set 1 time; GENERAL_REGS or none.

Register 109 used 12 times across 5 insns in block 4; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 117 used 8 times across 2 insns in block 4; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 118 used 8 times across 2 insns in block 4; set 1 time; 8 bytes; FLOAT_REGS or none.

Register 119 used 8 times across 2 insns in block 4; set 1 time; 8 bytes; FLOAT_REGS or none.

Register 122 used 3 times across 3 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 123 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 125 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 126 used 2 times across 2 insns in block 7; set 1 time; GENERAL_REGS or none.

Register 127 used 2 times across 2 insns in block 7; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 128 used 2 times across 3 insns in block 7; set 1 time; 8 bytes; pref FLOAT_REGS, else FLOAT_INT_REGS.

Register 129 used 2 times across 4 insns in block 7; set 1 time; 8 bytes; pref FLOAT_REGS, else FLOAT_INT_REGS.

Register 131 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 132 used 3 times across 3 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 133 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 135 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 136 used 2 times across 2 insns in block 10; set 1 time; GENERAL_REGS or none.

Register 137 used 3 times across 4 insns in block 10; set 1 time; pref INDEX_REGS, else GENERAL_REGS.

Register 138 used 3 times across 2 insns in block 10; set 1 time; user var; 8 bytes; pref FP_TOP_REG, else FLOAT_INT_REGS.

Register 140 used 2 times across 2 insns in block 10; set 1 time; user var; 8 bytes; pref FP_TOP_REG, else FLOAT_REGS.

Register 149 used 2 times across 2 insns in block 0; set 1 time; GENERAL_REGS or none.

12 basic blocks, 21 edges.

Basic block 0: first insn 353, last 339, loop_depth 0, count 0.
Predecessors:  ENTRY (fallthru)
Successors:  1 (fallthru,crit) 7 (crit)
Registers live at start: 6 [bp] 7 [sp] 16 [] 20 [frame]
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

Basic block 1: first insn 25, last 46, loop_depth 1, count 0.
Predecessors:  6 (crit) 0 (fallthru,crit)
Successors:  2 (fallthru) 9
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

Basic block 2: first insn 356, last 344, loop_depth 1, count 0.
Predecessors:  1 (fallthru)
Successors:  3 (fallthru,crit) 6 (crit)
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49

Basic block 3: first insn 127, last 349, loop_depth 2, count 0.
Predecessors:  5 (crit) 2 (fallthru,crit)
Successors:  4 (fallthru,crit) 5 (crit)
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50

Basic block 4: first insn 176, last 173, loop_depth 3, count 0.
Predecessors:  4 (crit) 3 (fallthru,crit)
Successors:  5 (fallthru,crit) 4 (crit)
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50

Basic block 5: first insn 230, last 124, loop_depth 2, count 0.
Predecessors:  4 (fallthru,crit) 3 (crit)
Successors:  6 (fallthru,crit) 3 (crit)
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49

Basic block 6: first insn 243, last 22, loop_depth 1, count 0.
Predecessors:  5 (fallthru,crit) 2 (crit)
Successors:  7 (fallthru,crit) 1 (crit)
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

Basic block 7: first insn 252, last 274, loop_depth 0, count 0.
Predecessors:  6 (fallthru,crit) 0 (crit)
Successors:  8 (fallthru) 10
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 44
Registers live at end: 6 [bp] 7 [sp] 20 [frame] 42 43 47

Basic block 8: first insn 362, last 280, loop_depth 0, count 0.
Predecessors:  7 (fallthru)
Successors:  11
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 47
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 20 [frame]

Basic block 9: first insn 365, last 55, loop_depth 0, count 0.
Predecessors:  1
Successors:  11
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 47
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 20 [frame]

Basic block 10: first insn 282, last 327, loop_depth 0, count 0.
Predecessors:  7
Successors:  11 (fallthru)
Registers live at start: 6 [bp] 7 [sp] 20 [frame] 42 43 47
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 20 [frame]

Basic block 11: first insn 335, last 336, loop_depth 0, count 0.
Predecessors:  10 (fallthru) 9 8
Successors:  EXIT (fallthru)
Registers live at start: 0 [ax] 6 [bp] 7 [sp] 20 [frame]
Registers live at end: 0 [ax] 6 [bp] 7 [sp] 20 [frame]

;; Register 51 in 0.
;; Register 52 in 0.
;; Register 53 in 0.
;; Register 54 in 0.
;; Register 56 in 1.
;; Register 57 in 0.
;; Register 58 in 0.
;; Register 59 in 9.
;; Register 60 in 8.
;; Register 62 in 0.
;; Register 63 in 0.
;; Register 64 in 0.
;; Register 66 in 1.
;; Register 67 in 0.
;; Register 68 in 0.
;; Register 69 in 8.
;; Register 71 in 8.
;; Register 86 in 8.
;; Register 87 in 0.
;; Register 88 in 0.
;; Register 89 in 0.
;; Register 91 in 1.
;; Register 92 in 0.
;; Register 93 in 0.
;; Register 101 in 8.
;; Register 103 in 0.
;; Register 104 in 2.
;; Register 105 in 0.
;; Register 107 in 1.
;; Register 108 in 0.
;; Register 109 in 1.
;; Register 117 in 0.
;; Register 118 in 8.
;; Register 119 in 8.
;; Register 122 in 0.
;; Register 123 in 0.
;; Register 125 in 1.
;; Register 126 in 0.
;; Register 127 in 0.
;; Register 128 in 9.
;; Register 129 in 8.
;; Register 131 in 0.
;; Register 132 in 0.
;; Register 133 in 0.
;; Register 135 in 1.
;; Register 136 in 0.
;; Register 137 in 0.
;; Register 138 in 8.
;; Register 140 in 8.
;; Register 149 in 0.
(note 2 0 353 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp] 16 [] 20 [frame]
(note 353 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 353 6 (set (reg/v:SI 42)
        (mem/f:SI (reg:SI 16 argp) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (reg:SI 16 argp) 0)
        (nil)))

(insn 6 4 8 (set (reg/v:SI 43)
        (mem/f:SI (plus:SI (reg:SI 16 argp)
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 16 argp)
                (const_int 4 [0x4])) 0)
        (nil)))

(insn 8 6 9 (set (reg/v:SI 44)
        (mem/f:SI (plus:SI (reg:SI 16 argp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 16 argp)
        (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 16 argp)
                    (const_int 8 [0x8])) 0)
            (nil))))

(note 9 8 12 NOTE_INSN_FUNCTION_BEG 0)

(note 12 9 16 0x40144920 NOTE_INSN_BLOCK_BEG 0)

(insn 16 12 337 (set (reg/v:SI 47)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 337 16 338 (parallel[ 
            (set (reg:SI 149)
                (plus:SI (reg/v:SI 44)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 8 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 338 337 339 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 47)
            (reg:SI 149))) 2 {*cmpsi_1_insn} (insn_list 16 (insn_list 337 (nil)))
    (expr_list:REG_DEAD (reg:SI 149)
        (nil)))

(jump_insn 339 338 17 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 252)
            (pc))) 288 {*jcc_1} (insn_list 338 (nil))
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

(note 17 339 25 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47
(code_label 25 17 354 156 "" "" [1 uses])

(note 354 25 30 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 30 354 31 (parallel[ 
            (set (reg:SI 52)
                (plus:SI (reg/v:SI 47)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 31 30 33 (parallel[ 
            (set (reg:SI 53)
                (mult:SI (reg/v:SI 47)
                    (reg:SI 52)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 30 (nil))
    (expr_list:REG_DEAD (reg:SI 52)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(note 33 31 35 NOTE_INSN_DELETED 0)

(insn 35 33 37 (parallel[ 
            (set (reg:SI 56)
                (lshiftrt:SI (reg:SI 53)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 31 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 37 35 39 (parallel[ 
            (set (reg:SI 57)
                (plus:SI (reg:SI 53)
                    (reg:SI 56)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 35 (nil))
    (expr_list:REG_DEAD (reg:SI 53)
        (expr_list:REG_DEAD (reg:SI 56)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 39 37 41 (parallel[ 
            (set (reg:SI 54)
                (ashiftrt:SI (reg:SI 57)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 37 (nil))
    (expr_list:REG_DEAD (reg:SI 57)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 53)
                    (const_int 2 [0x2]))
                (nil)))))

(insn 41 39 43 (parallel[ 
            (set (reg:SI 58)
                (plus:SI (reg:SI 54)
                    (reg/v:SI 47)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 39 (nil))
    (expr_list:REG_DEAD (reg:SI 54)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 43 41 45 (set (reg:DF 59)
        (mem:DF (plus:SI (mult:SI (reg:SI 58)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)) 63 {*movdf_integer} (insn_list 41 (nil))
    (expr_list:REG_DEAD (reg:SI 58)
        (nil)))

(insn 45 43 46 (set (reg:DF 60)
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC34")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC34")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(jump_insn 46 45 356 (parallel[ 
            (set (pc)
                (if_then_else (le:CCFPU (reg:DF 59)
                        (reg:DF 60))
                    (label_ref/s 365)
                    (pc)))
            (clobber (reg:CCFP 18 fpsr))
            (clobber (reg:CCFP 17 flags))
            (clobber (scratch:HI))
        ] ) 294 {*fp_jcc_5} (insn_list 43 (insn_list 45 (nil)))
    (expr_list:REG_DEAD (reg:DF 59)
        (expr_list:REG_DEAD (reg:DF 60)
            (expr_list:REG_UNUSED (reg:CCFP 18 fpsr)
                (expr_list:REG_UNUSED (reg:CCFP 17 flags)
                    (expr_list:REG_UNUSED (scratch:HI)
                        (nil)))))))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47
(note 356 46 61 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 61 356 62 (parallel[ 
            (set (reg:SI 62)
                (plus:SI (reg/v:SI 47)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 62 61 64 (parallel[ 
            (set (reg:SI 63)
                (mult:SI (reg/v:SI 47)
                    (reg:SI 62)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 61 (nil))
    (expr_list:REG_DEAD (reg:SI 62)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(note 64 62 66 NOTE_INSN_DELETED 0)

(insn 66 64 68 (parallel[ 
            (set (reg:SI 66)
                (lshiftrt:SI (reg:SI 63)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 62 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 68 66 70 (parallel[ 
            (set (reg:SI 67)
                (plus:SI (reg:SI 63)
                    (reg:SI 66)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 66 (nil))
    (expr_list:REG_DEAD (reg:SI 63)
        (expr_list:REG_DEAD (reg:SI 66)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 70 68 72 (parallel[ 
            (set (reg:SI 64)
                (ashiftrt:SI (reg:SI 67)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 68 (nil))
    (expr_list:REG_DEAD (reg:SI 67)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 63)
                    (const_int 2 [0x2]))
                (nil)))))

(insn 72 70 74 (parallel[ 
            (set (reg:SI 68)
                (plus:SI (reg:SI 64)
                    (reg/v:SI 47)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 70 (nil))
    (expr_list:REG_DEAD (reg:SI 64)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 74 72 75 (set (reg/v:DF 69)
        (mem:DF (plus:SI (mult:SI (reg:SI 68)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)) 63 {*movdf_integer} (insn_list 72 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 68)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)
        (nil)))

(note 75 74 77 0x4013f6a0 NOTE_INSN_BLOCK_BEG 0)

(note/i 77 75 78 0x4013f6c0 NOTE_INSN_BLOCK_BEG 0)

(insn/i 78 77 82 (parallel[ 
            (set (reg/v:DF 71)
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg/v:DF 69)
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 74 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 68)
                    (const_int 8 [0x8]))
                (reg/v:SI 43)) 0)
        (expr_list:REG_DEAD (reg/v:DF 69)
            (expr_list:REG_UNUSED (reg:QI 19 dirflag)
                (expr_list:REG_UNUSED (reg:QI 18 fpsr)
                    (expr_list:REG_UNUSED (reg:QI 17 flags)
                        (nil)))))))

(note/i 82 78 85 0x4013f6c0 NOTE_INSN_BLOCK_END 0)

(note 85 82 100 0x4013f6a0 NOTE_INSN_BLOCK_END 0)

(insn 100 85 116 (set (mem:DF (plus:SI (mult:SI (reg:SI 68)
                    (const_int 8 [0x8]))
                (reg/v:SI 43)) 0)
        (reg/v:DF 71)) 63 {*movdf_integer} (insn_list 78 (nil))
    (expr_list:REG_DEAD (reg/v:DF 71)
        (nil)))

(insn 116 100 117 (set (reg:DF 86)
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC35")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC35")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])
        (nil)))

(insn 117 116 120 (set (reg/v:DF 49)
        (div:DF (reg:DF 86)
            (mem:DF (plus:SI (mult:SI (reg:SI 68)
                        (const_int 8 [0x8]))
                    (reg/v:SI 43)) 0))) 319 {*fop_df_1} (insn_list 116 (nil))
    (expr_list:REG_DEAD (reg:DF 86)
        (expr_list:REG_DEAD (reg:SI 68)
            (nil))))

(insn 120 117 343 (parallel[ 
            (set (reg/v:SI 45)
                (plus:SI (reg/v:SI 44)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 343 120 344 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 45)
            (reg/v:SI 47))) 2 {*cmpsi_1_insn} (insn_list 120 (nil))
    (nil))

(jump_insn 344 343 121 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 243)
            (pc))) 288 {*jcc_1} (insn_list 343 (nil))
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49

(note 121 344 127 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49
(code_label 127 121 357 163 "" "" [1 uses])

(note 357 127 132 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 132 357 133 (parallel[ 
            (set (reg:SI 87)
                (plus:SI (reg/v:SI 45)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 133 132 135 (parallel[ 
            (set (reg:SI 88)
                (mult:SI (reg/v:SI 45)
                    (reg:SI 87)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 132 (nil))
    (expr_list:REG_DEAD (reg:SI 87)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(note 135 133 137 NOTE_INSN_DELETED 0)

(insn 137 135 139 (parallel[ 
            (set (reg:SI 91)
                (lshiftrt:SI (reg:SI 88)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 133 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 139 137 141 (parallel[ 
            (set (reg:SI 92)
                (plus:SI (reg:SI 88)
                    (reg:SI 91)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 137 (nil))
    (expr_list:REG_DEAD (reg:SI 88)
        (expr_list:REG_DEAD (reg:SI 91)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 141 139 143 (parallel[ 
            (set (reg:SI 89)
                (ashiftrt:SI (reg:SI 92)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 139 (nil))
    (expr_list:REG_DEAD (reg:SI 92)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 88)
                    (const_int 2 [0x2]))
                (nil)))))

(insn 143 141 157 (parallel[ 
            (set (reg:SI 93)
                (plus:SI (reg:SI 89)
                    (reg/v:SI 47)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 141 (nil))
    (expr_list:REG_DEAD (reg:SI 89)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 157 143 161 (set (reg:DF 101)
        (mult:DF (reg/v:DF 49)
            (mem:DF (plus:SI (mult:SI (reg:SI 93)
                        (const_int 8 [0x8]))
                    (reg/v:SI 42)) 0))) 314 {*fop_df_comm} (insn_list 143 (nil))
    (nil))

(insn 161 157 163 (set (mem:DF (plus:SI (mult:SI (reg:SI 93)
                    (const_int 8 [0x8]))
                (reg/v:SI 43)) 0)
        (reg:DF 101)) 63 {*movdf_integer} (insn_list 157 (nil))
    (expr_list:REG_DEAD (reg:SI 93)
        (nil)))

(insn 163 161 166 (set (reg/v:DF 50)
        (reg:DF 101)) 63 {*movdf_integer} (nil)
    (expr_list:REG_DEAD (reg:DF 101)
        (nil)))

(insn 166 163 169 (set (reg/v:SI 48)
        (reg/v:SI 45)) 33 {*movsi_1} (nil)
    (nil))

(insn 169 166 348 (set (reg/v:SI 46)
        (reg/v:SI 45)) 33 {*movsi_1} (nil)
    (nil))

(insn 348 169 349 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 45)
            (reg/v:SI 44))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 349 348 170 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 230)
            (pc))) 288 {*jcc_1} (insn_list 348 (nil))
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50

(note 170 349 176 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50
(code_label 176 170 358 167 "" "" [1 uses])

(note 358 176 181 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 181 358 182 (parallel[ 
            (set (reg:SI 104)
                (plus:SI (reg/v:SI 46)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 182 181 184 (parallel[ 
            (set (reg:SI 105)
                (mult:SI (reg/v:SI 46)
                    (reg:SI 104)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 181 (nil))
    (expr_list:REG_DEAD (reg/v:SI 46)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(note 184 182 186 NOTE_INSN_DELETED 0)

(insn 186 184 188 (parallel[ 
            (set (reg:SI 107)
                (lshiftrt:SI (reg:SI 105)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 182 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 188 186 190 (parallel[ 
            (set (reg:SI 108)
                (plus:SI (reg:SI 105)
                    (reg:SI 107)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 186 (nil))
    (expr_list:REG_DEAD (reg:SI 105)
        (expr_list:REG_DEAD (reg:SI 107)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 190 188 192 (parallel[ 
            (set (reg:SI 103)
                (ashiftrt:SI (reg:SI 108)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 188 (nil))
    (expr_list:REG_DEAD (reg:SI 108)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 105)
                    (const_int 2 [0x2]))
                (nil)))))

(insn 192 190 207 (parallel[ 
            (set (reg:SI 109)
                (plus:SI (reg:SI 103)
                    (reg/v:SI 48)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 190 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 207 192 208 (parallel[ 
            (set (reg:SI 117)
                (plus:SI (reg:SI 103)
                    (reg/v:SI 47)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 103)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 208 207 210 (set (reg:DF 118)
        (mult:DF (reg/v:DF 50)
            (mem:DF (plus:SI (mult:SI (reg:SI 117)
                        (const_int 8 [0x8]))
                    (reg/v:SI 43)) 0))) 314 {*fop_df_comm} (insn_list 207 (nil))
    (expr_list:REG_DEAD (reg:SI 117)
        (nil)))

(note 210 208 211 NOTE_INSN_DELETED 0)

(insn 211 210 213 (set (reg:DF 119)
        (minus:DF (mem:DF (plus:SI (mult:SI (reg:SI 109)
                        (const_int 8 [0x8]))
                    (reg/v:SI 42)) 0)
            (reg:DF 118))) 319 {*fop_df_1} (insn_list 192 (insn_list 208 (nil)))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 109)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)
        (expr_list:REG_DEAD (reg:DF 118)
            (nil))))

(insn 213 211 216 (set (mem:DF (plus:SI (mult:SI (reg:SI 109)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)
        (reg:DF 119)) 63 {*movdf_integer} (insn_list 211 (nil))
    (expr_list:REG_DEAD (reg:DF 119)
        (expr_list:REG_DEAD (reg:SI 109)
            (nil))))

(note 216 213 219 NOTE_INSN_LOOP_CONT 0)

(insn 219 216 352 (set (reg/v:SI 46)
        (reg:SI 104)) 33 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg:SI 104)
        (nil)))

(note 352 219 172 NOTE_INSN_LOOP_VTOP 0)

(insn 172 352 173 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 46)
            (reg/v:SI 44))) 2 {*cmpsi_1_insn} (insn_list 219 (nil))
    (nil))

(jump_insn 173 172 225 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 176)
            (pc))) 288 {*jcc_1} (insn_list 172 (nil))
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50

(note 225 173 229 NOTE_INSN_LOOP_END 0)

(note 229 225 230 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49
(code_label 230 229 359 162 "" "" [1 uses])

(note 359 230 232 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 232 359 347 (parallel[ 
            (set (reg/v:SI 45)
                (plus:SI (reg/v:SI 45)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(note 347 232 123 NOTE_INSN_LOOP_VTOP 0)

(insn 123 347 124 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 45)
            (reg/v:SI 47))) 2 {*cmpsi_1_insn} (insn_list 232 (nil))
    (nil))

(jump_insn 124 123 238 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 288 {*jcc_1} (insn_list 123 (nil))
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 47 49

(note 238 124 242 NOTE_INSN_LOOP_END 0)

(note 242 238 243 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44 47
(code_label 243 242 360 155 "" "" [1 uses])

(note 360 243 245 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 245 360 342 (parallel[ 
            (set (reg/v:SI 47)
                (plus:SI (reg/v:SI 47)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(note 342 245 20 NOTE_INSN_LOOP_VTOP 0)

(insn 20 342 21 (parallel[ 
            (set (reg/s:SI 51)
                (plus:SI (reg/v:SI 44)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 21 20 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 47)
            (reg/s:SI 51))) 2 {*cmpsi_1_insn} (insn_list 245 (insn_list 20 (nil)))
    (expr_list:REG_DEAD (reg/s:SI 51)
        (nil)))

(jump_insn 22 21 251 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 288 {*jcc_1} (insn_list 21 (nil))
    (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

(note 251 22 252 NOTE_INSN_LOOP_END 0)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 44
(code_label 252 251 361 154 "" "" [1 uses])

(note 361 252 255 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 255 361 259 (parallel[ 
            (set (reg/v:SI 47)
                (plus:SI (reg/v:SI 44)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 259 255 261 (parallel[ 
            (set (reg:SI 122)
                (mult:SI (reg/v:SI 47)
                    (reg/v:SI 44)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 255 (nil))
    (expr_list:REG_DEAD (reg/v:SI 44)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(note 261 259 263 NOTE_INSN_DELETED 0)

(insn 263 261 265 (parallel[ 
            (set (reg:SI 125)
                (lshiftrt:SI (reg:SI 122)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 259 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 265 263 267 (parallel[ 
            (set (reg:SI 126)
                (plus:SI (reg:SI 122)
                    (reg:SI 125)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 263 (nil))
    (expr_list:REG_DEAD (reg:SI 122)
        (expr_list:REG_DEAD (reg:SI 125)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 267 265 269 (parallel[ 
            (set (reg:SI 123)
                (ashiftrt:SI (reg:SI 126)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 265 (nil))
    (expr_list:REG_DEAD (reg:SI 126)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 122)
                    (const_int 2 [0x2]))
                (nil)))))

(insn 269 267 271 (parallel[ 
            (set (reg:SI 127)
                (plus:SI (reg:SI 123)
                    (reg/v:SI 47)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 267 (nil))
    (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(insn 271 269 273 (set (reg:DF 128)
        (mem:DF (plus:SI (mult:SI (reg:SI 127)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)) 63 {*movdf_integer} (insn_list 269 (nil))
    (expr_list:REG_DEAD (reg:SI 127)
        (nil)))

(insn 273 271 274 (set (reg:DF 129)
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC34")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC34")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(jump_insn 274 273 362 (parallel[ 
            (set (pc)
                (if_then_else (le:CCFPU (reg:DF 128)
                        (reg:DF 129))
                    (pc)
                    (label_ref 282)))
            (clobber (reg:CCFP 18 fpsr))
            (clobber (reg:CCFP 17 flags))
            (clobber (scratch:HI))
        ] ) 295 {*fp_jcc_6} (insn_list 271 (insn_list 273 (nil)))
    (expr_list:REG_DEAD (reg:DF 128)
        (expr_list:REG_DEAD (reg:DF 129)
            (expr_list:REG_UNUSED (reg:CCFP 18 fpsr)
                (expr_list:REG_UNUSED (reg:CCFP 17 flags)
                    (expr_list:REG_UNUSED (scratch:HI)
                        (nil)))))))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 47

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 20 [frame] 47
(note 362 274 279 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 279 362 280 (set (reg/i:SI 0 eax)
        (reg/v:SI 47)) 33 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 47)
        (nil)))

(jump_insn 280 279 281 (set (pc)
        (label_ref 335)) 296 {jump} (nil)
    (nil))
;; End of basic block 8, registers live:
 0 [ax] 6 [bp] 7 [sp] 20 [frame]

(barrier 281 280 365)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 20 [frame] 47
(code_label 365 281 355 174 "" "" [1 uses])

(note 355 365 54 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 54 355 55 (set (reg/i:SI 0 eax)
        (reg/v:SI 47)) 33 {*movsi_1} (nil)
    (expr_list:REG_DEAD (reg/v:SI 47)
        (nil)))

(jump_insn 55 54 56 (set (pc)
        (label_ref 335)) 296 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 0 [ax] 6 [bp] 7 [sp] 20 [frame]

(barrier 56 55 282)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 20 [frame] 42 43 47
(code_label 282 56 363 171 "" "" [1 uses])

(note 363 282 285 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 285 363 286 (parallel[ 
            (set (reg:SI 131)
                (plus:SI (reg/v:SI 47)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 286 285 288 (parallel[ 
            (set (reg:SI 132)
                (mult:SI (reg/v:SI 47)
                    (reg:SI 131)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 285 (nil))
    (expr_list:REG_DEAD (reg:SI 131)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))

(note 288 286 290 NOTE_INSN_DELETED 0)

(insn 290 288 292 (parallel[ 
            (set (reg:SI 135)
                (lshiftrt:SI (reg:SI 132)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 286 (nil))
    (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))

(insn 292 290 294 (parallel[ 
            (set (reg:SI 136)
                (plus:SI (reg:SI 132)
                    (reg:SI 135)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 290 (nil))
    (expr_list:REG_DEAD (reg:SI 132)
        (expr_list:REG_DEAD (reg:SI 135)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 294 292 296 (parallel[ 
            (set (reg:SI 133)
                (ashiftrt:SI (reg:SI 136)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 292 (nil))
    (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (div:SI (reg:SI 132)
                    (const_int 2 [0x2]))
                (nil)))))

(insn 296 294 298 (parallel[ 
            (set (reg:SI 137)
                (plus:SI (reg:SI 133)
                    (reg/v:SI 47)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 294 (nil))
    (expr_list:REG_DEAD (reg:SI 133)
        (expr_list:REG_DEAD (reg/v:SI 47)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))

(insn 298 296 299 (set (reg/v:DF 138)
        (mem:DF (plus:SI (mult:SI (reg:SI 137)
                    (const_int 8 [0x8]))
                (reg/v:SI 42)) 0)) 63 {*movdf_integer} (insn_list 296 (nil))
    (expr_list:REG_DEAD (reg/v:SI 42)
        (nil)))

(note 299 298 301 0x40144420 NOTE_INSN_BLOCK_BEG 0)

(note/i 301 299 302 0x40144440 NOTE_INSN_BLOCK_BEG 0)

(insn/i 302 301 306 (parallel[ 
            (set (reg/v:DF 140)
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg/v:DF 138)
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 298 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 137)
                    (const_int 8 [0x8]))
                (reg/v:SI 43)) 0)
        (expr_list:REG_DEAD (reg/v:DF 138)
            (expr_list:REG_UNUSED (reg:QI 19 dirflag)
                (expr_list:REG_UNUSED (reg:QI 18 fpsr)
                    (expr_list:REG_UNUSED (reg:QI 17 flags)
                        (nil)))))))

(note/i 306 302 309 0x40144440 NOTE_INSN_BLOCK_END 0)

(note 309 306 324 0x40144420 NOTE_INSN_BLOCK_END 0)

(insn 324 309 327 (set (mem:DF (plus:SI (mult:SI (reg:SI 137)
                    (const_int 8 [0x8]))
                (reg/v:SI 43)) 0)
        (reg/v:DF 140)) 63 {*movdf_integer} (insn_list 302 (nil))
    (expr_list:REG_DEAD (reg/v:DF 140)
        (expr_list:REG_DEAD (reg:SI 137)
            (expr_list:REG_DEAD (reg/v:SI 43)
                (nil)))))

(insn 327 324 331 (set (reg/i:SI 0 eax)
        (const_int -1 [0xffffffff])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int -1 [0xffffffff])
        (nil)))
;; End of basic block 10, registers live:
 0 [ax] 6 [bp] 7 [sp] 20 [frame]

(note 331 327 335 0x40144920 NOTE_INSN_BLOCK_END 0)

;; Start of basic block 11, registers live: 0 [ax] 6 [bp] 7 [sp] 20 [frame]
(code_label 335 331 364 152 "" "" [2 uses])

(note 364 335 336 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 336 364 0 (use (reg/i:SI 0 eax)) -1 (nil)
    (nil))
;; End of basic block 11, registers live:
 0 [ax] 6 [bp] 7 [sp] 20 [frame]

