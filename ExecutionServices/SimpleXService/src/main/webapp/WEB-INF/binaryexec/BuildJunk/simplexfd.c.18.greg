
;; Function main

;; 59 regs to allocate: 482 (2) 197 47 487 (2) 488 (2) 50 300 241 489 (2) 467 687 45 723 (2) 731 732 51 340 46 541 735 716 (2) 719 (2) 734 736 (2) 337 484 717 720 718 721 472 725 (2) 724 (2) 68 (2) 72 (2) 733 58 629 630 70 56 57 726 727 722 64 63 66 730 (2) 729 (2) 728 (2) 62 69 65 71 61 60 59 55 (2)
;; 43 conflicts: 43 55 73 74 492 0 1 3 7
;; 45 conflicts: 45 46 47 50 51 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 78 81 82 83 91 92 97 101 106 107 108 109 110 111 116 117 118 119 120 121 126 127 128 129 130 131 136 137 138 139 140 141 146 147 148 149 150 151 156 157 158 159 160 161 166 167 168 169 170 171 176 177 178 179 180 181 186 187 188 189 190 191 196 197 201 202 207 209 210 216 217 231 232 233 234 236 241 243 245 246 247 253 259 265 267 269 270 271 277 283 289 290 291 293 294 295 296 300 302 303 304 306 312 313 321 323 324 325 333 336 337 339 340 347 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 493 495 497 498 499 503 504 505 506 507 508 509 510 511 512 513 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 531 532 533 534 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 631 632 633 635 636 637 638 640 641 642 643 644 646 647 648 656 658 664 665 666 667 668 669 670 672 673 674 675 676 677 678 680 681 682 683 684 685 686 687 690 691 692 694 695 696 704 706 711 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 0 1 2 3 7 8 9 10
;; 46 conflicts
;; 47 conflicts: 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 503 519 731 732 0 1 7
;; 50 conflicts: 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 418 419 442 444 467 0 1 7 8
;; 51 conflicts: 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 425 432 442 444 445 452 460 467 0 7 8
;; 52 conflicts: 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 712 715 0 3 7
;; 55 conflicts: 43 45 46 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 73 74 75 76 78 81 82 83 91 92 97 101 106 107 108 109 110 111 116 117 118 119 120 121 126 127 128 129 130 131 136 137 138 139 140 141 146 147 148 149 150 151 156 157 158 159 160 161 166 167 168 169 170 171 176 177 178 179 180 181 186 187 188 189 190 191 196 197 201 202 207 209 210 216 217 219 220 221 224 226 228 231 232 233 234 236 241 243 245 246 247 253 259 265 267 269 270 271 277 283 289 290 291 293 294 295 296 300 302 303 304 306 312 313 321 323 324 325 333 336 337 339 340 347 350 351 352 354 356 358 360 362 364 366 368 370 372 374 376 378 380 381 383 384 387 389 391 393 395 397 399 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 492 493 495 496 707 708 711 712 713 714 715 734 735 736 0 1 2 3 7 8 9
;; 56 conflicts
;; 57 conflicts
;; 58 conflicts
;; 59 conflicts: 45 46 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 358 360 362 364 366 368 370 372 374 376 378 380 381 383 384 387 389 391 393 395 397 399 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 493 495 496 497 498 499 707 708 712 715 733 734 735 736 0 1 2 3 7 8 9
;; 60 conflicts: 45 46 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 370 372 374 376 378 380 381 383 384 387 389 391 393 395 397 399 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 493 495 496 707 708 712 715 734 735 736 0 1 2 3 7 8 9
;; 61 conflicts: 45 46 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 374 376 378 380 381 383 384 387 389 391 393 395 397 399 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 493 495 496 707 708 712 715 734 735 736 0 1 2 3 7 8 9
;; 62 conflicts: 45 46 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 378 380 381 383 384 387 389 391 393 395 397 399 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 493 495 496 707 708 712 715 734 735 736 0 1 2 3 7 8 9
;; 63 conflicts
;; 64 conflicts
;; 65 conflicts: 45 46 47 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 397 399 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 493 495 496 497 498 499 500 502 503 504 505 506 507 508 509 510 511 512 513 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 531 532 533 534 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 629 630 707 708 712 715 723 724 725 726 727 728 729 730 731 732 733 734 735 736 0 1 2 3 7 8 9 10
;; 66 conflicts: 45 46 47 50 51 52 55 56 57 58 59 60 61 62 63 64 65 66 68 69 70 71 72 401 403 405 407 409 410 411 413 414 415 416 418 419 425 426 430 431 432 433 437 438 439 441 442 444 445 446 450 451 452 453 457 458 459 460 461 465 466 467 470 471 472 473 475 476 477 478 479 481 482 484 485 486 487 488 489 490 493 495 496 497 498 499 500 502 503 504 505 506 507 508 509 510 511 512 513 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 531 532 533 534 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 629 630 631 632 633 635 636 637 638 640 641 642 643 644 646 647 648 656 658 664 665 666 667 668 669 670 672 673 674 675 676 677 678 680 681 682 683 684 685 686 687 690 691 692 694 695 696 704 706 707 708 712 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 0 1 2 3 7 8 9 10
;; 68 conflicts: 45 46 47 56 57 58 59 63 64 65 66 68 69 70 71 72 499 500 502 503 504 505 506 507 508 509 510 511 512 513 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 531 532 533 534 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 731 732 733 0 1 2 7 8 9 10
;; 69 conflicts
;; 70 conflicts
;; 71 conflicts
;; 72 conflicts: 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 503 504 505 506 507 508 509 510 511 512 513 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 531 532 533 534 731 732 0 1 2 7 8
;; 73 conflicts: 43 55 73 0 3 7
;; 74 conflicts: 43 55 74 0 3 7
;; 75 conflicts: 55 75 7 8
;; 76 conflicts: 55 76 0 7
;; 78 conflicts: 45 55 78 81 82 0 1 7
;; 81 conflicts: 45 55 78 81 0 1 7
;; 82 conflicts: 45 55 78 82 83 0 1 7
;; 83 conflicts: 45 55 82 83 0 1 7
;; 91 conflicts: 45 46 55 91 92 97 0 1 7
;; 92 conflicts: 45 46 55 91 92 0 1 7
;; 97 conflicts: 45 46 55 91 97 0 1 7
;; 101 conflicts: 45 46 55 101 1 7
;; 106 conflicts: 45 46 55 106 1 7
;; 107 conflicts: 45 46 55 107 108 109 110 111 116 0 1 2 3 7
;; 108 conflicts: 45 46 55 107 108 2 3 7
;; 109 conflicts: 45 46 55 107 109 110 111 116 0 1 2 3 7
;; 110 conflicts: 45 46 55 107 109 110 0 2 3 7
;; 111 conflicts: 45 46 55 107 109 111 0 2 3 7
;; 116 conflicts: 45 46 55 107 109 116 0 1 2 3 7
;; 117 conflicts: 45 46 55 117 118 119 120 121 126 0 1 2 3 7
;; 118 conflicts: 45 46 55 117 118 2 3 7
;; 119 conflicts: 45 46 55 117 119 120 121 126 0 1 2 3 7
;; 120 conflicts: 45 46 55 117 119 120 0 2 3 7
;; 121 conflicts: 45 46 55 117 119 121 0 2 3 7
;; 126 conflicts: 45 46 55 117 119 126 0 1 2 3 7
;; 127 conflicts: 45 46 55 127 128 129 130 131 136 0 1 2 3 7
;; 128 conflicts: 45 46 55 127 128 2 3 7
;; 129 conflicts: 45 46 55 127 129 130 131 136 0 1 2 3 7
;; 130 conflicts: 45 46 55 127 129 130 0 2 3 7
;; 131 conflicts: 45 46 55 127 129 131 0 2 3 7
;; 136 conflicts: 45 46 55 127 129 136 0 1 2 3 7
;; 137 conflicts: 45 46 55 137 138 139 140 141 146 0 1 2 3 7
;; 138 conflicts: 45 46 55 137 138 2 3 7
;; 139 conflicts: 45 46 55 137 139 140 141 146 0 1 2 3 7
;; 140 conflicts: 45 46 55 137 139 140 0 2 3 7
;; 141 conflicts: 45 46 55 137 139 141 0 2 3 7
;; 146 conflicts: 45 46 55 137 139 146 0 1 2 3 7
;; 147 conflicts: 45 46 55 147 148 149 150 151 156 0 1 2 3 7
;; 148 conflicts: 45 46 55 147 148 2 3 7
;; 149 conflicts: 45 46 55 147 149 150 151 156 0 1 2 3 7
;; 150 conflicts: 45 46 55 147 149 150 0 2 3 7
;; 151 conflicts: 45 46 55 147 149 151 0 2 3 7
;; 156 conflicts: 45 46 55 147 149 156 0 1 2 3 7
;; 157 conflicts: 45 46 55 157 158 159 160 161 166 0 1 2 3 7
;; 158 conflicts: 45 46 55 157 158 2 3 7
;; 159 conflicts: 45 46 55 157 159 160 161 166 0 1 2 3 7
;; 160 conflicts: 45 46 55 157 159 160 0 2 3 7
;; 161 conflicts: 45 46 55 157 159 161 0 2 3 7
;; 166 conflicts: 45 46 55 157 159 166 0 1 2 3 7
;; 167 conflicts: 45 46 55 167 168 169 170 171 176 0 1 2 3 7
;; 168 conflicts: 45 46 55 167 168 2 3 7
;; 169 conflicts: 45 46 55 167 169 170 171 176 0 1 2 3 7
;; 170 conflicts: 45 46 55 167 169 170 0 2 3 7
;; 171 conflicts: 45 46 55 167 169 171 0 2 3 7
;; 176 conflicts: 45 46 55 167 169 176 0 1 2 3 7
;; 177 conflicts: 45 46 55 177 178 179 180 181 186 0 1 2 3 7
;; 178 conflicts: 45 46 55 177 178 2 3 7
;; 179 conflicts: 45 46 55 177 179 180 181 186 0 1 2 3 7
;; 180 conflicts: 45 46 55 177 179 180 0 2 3 7
;; 181 conflicts: 45 46 55 177 179 181 0 2 3 7
;; 186 conflicts: 45 46 55 177 179 186 0 1 2 3 7
;; 187 conflicts: 45 46 55 187 188 189 190 191 196 0 1 2 3 7
;; 188 conflicts: 45 46 55 187 188 2 3 7
;; 189 conflicts: 45 46 55 187 189 190 191 196 0 1 2 3 7
;; 190 conflicts: 45 46 55 187 189 190 0 2 3 7
;; 191 conflicts: 45 46 55 187 189 191 0 2 3 7
;; 196 conflicts: 45 46 55 187 189 196 0 1 2 3 7
;; 197 conflicts: 45 46 55 197 7
;; 201 conflicts: 45 46 55 201 0 7
;; 202 conflicts: 45 46 55 202 0 7
;; 207 conflicts: 45 46 55 207 209 210 216 0 1 2 3 7
;; 209 conflicts: 45 46 55 207 209 210 216 0 1 2 3 7
;; 210 conflicts: 45 46 55 207 209 210 216 0 1 2 3 7
;; 216 conflicts: 45 46 55 207 209 210 216 0 1 2 3 7
;; 217 conflicts: 45 46 55 217 3 7
;; 219 conflicts: 55 219 220 0 1 7
;; 220 conflicts: 55 219 220 0 1 7
;; 221 conflicts: 55 221 0 7
;; 224 conflicts: 55 224 0 7
;; 226 conflicts: 55 226 0 7
;; 228 conflicts: 55 228 0 7
;; 231 conflicts: 45 55 231 3 7
;; 232 conflicts: 45 55 232 3 7
;; 233 conflicts: 45 55 233 234 236 0 3 7
;; 234 conflicts: 45 55 233 234 0 3 7
;; 236 conflicts: 45 55 233 236 0 3 7
;; 241 conflicts: 45 55 241 7
;; 243 conflicts: 45 55 243 246 0 1 7
;; 245 conflicts: 45 55 245 247 253 259 0 1 7
;; 246 conflicts: 45 55 243 246 0 1 7
;; 247 conflicts: 45 55 245 247 0 1 7
;; 253 conflicts: 45 55 245 253 0 1 7
;; 259 conflicts: 45 55 245 259 0 1 7
;; 265 conflicts: 45 55 265 0 7
;; 267 conflicts: 45 55 267 270 0 1 7
;; 269 conflicts: 45 55 269 271 277 283 0 1 7
;; 270 conflicts: 45 55 267 270 0 1 7
;; 271 conflicts: 45 55 269 271 0 1 7
;; 277 conflicts: 45 55 269 277 0 1 7
;; 283 conflicts: 45 55 269 283 0 1 7
;; 289 conflicts: 45 55 289 0 7
;; 290 conflicts: 45 55 290 291 293 294 295 0 1 2 3 7
;; 291 conflicts: 45 55 290 291 293 294 0 2 3 7
;; 293 conflicts: 45 55 290 291 293 0 2 3 7
;; 294 conflicts: 45 55 290 291 294 295 296 0 1 2 3 7
;; 295 conflicts: 45 55 290 294 295 0 1 2 3 7
;; 296 conflicts: 45 55 294 296 0 2 7
;; 300 conflicts: 45 55 300 7
;; 302 conflicts: 45 55 302 3 7
;; 303 conflicts: 45 55 303 304 306 312 313 321 323 324 325 333 336 0 1 3 7 8 9
;; 304 conflicts: 45 55 303 304 306 0 1 3 7
;; 306 conflicts: 45 55 303 304 306 0 1 3 7
;; 312 conflicts: 45 55 303 312 1 3 7
;; 313 conflicts: 45 55 303 313 321 323 324 0 3 7 8 9
;; 321 conflicts: 45 55 303 313 321 323 0 3 7 8 9
;; 323 conflicts: 45 55 303 313 321 323 324 325 0 3 7 8 9
;; 324 conflicts: 45 55 303 313 323 324 0 3 7 8 9
;; 325 conflicts: 45 55 303 323 325 333 336 0 3 7 9
;; 333 conflicts: 45 55 303 325 333 0 3 7 9
;; 336 conflicts: 45 55 303 325 336 0 3 7 9
;; 337 conflicts: 45 55 337 339 340 0 7
;; 339 conflicts: 45 55 337 339 0 7
;; 340 conflicts: 45 55 337 340 7
;; 340 preferences: 0
;; 347 conflicts: 45 55 347 0 7
;; 347 preferences: 2
;; 350 conflicts: 55 350 0 7
;; 351 conflicts: 55 351 0 7
;; 352 conflicts: 55 352 0 7
;; 354 conflicts: 55 56 354 0 7
;; 356 conflicts: 55 56 356 0 7
;; 358 conflicts: 55 56 59 358 0 7
;; 360 conflicts: 55 56 59 360 0 7
;; 362 conflicts: 55 56 57 59 362 0 7
;; 364 conflicts: 55 56 57 59 364 0 7
;; 366 conflicts: 55 56 57 58 59 366 0 7
;; 368 conflicts: 55 56 57 58 59 368 0 7
;; 370 conflicts: 55 56 57 58 59 60 370 0 7
;; 372 conflicts: 55 56 57 58 59 60 372 0 7
;; 374 conflicts: 55 56 57 58 59 60 61 374 0 7
;; 376 conflicts: 55 56 57 58 59 60 61 376 0 7
;; 378 conflicts: 55 56 57 58 59 60 61 62 378 0 7
;; 380 conflicts: 55 56 57 58 59 60 61 62 380 383 0 1 7
;; 381 conflicts: 55 56 57 58 59 60 61 62 381 0 7
;; 383 conflicts: 55 56 57 58 59 60 61 62 380 383 0 1 7
;; 384 conflicts: 55 56 57 58 59 60 61 62 384 0 7
;; 387 conflicts: 55 56 57 58 59 60 61 62 387 0 7
;; 389 conflicts: 55 56 57 58 59 60 61 62 63 389 0 7
;; 391 conflicts: 55 56 57 58 59 60 61 62 63 391 0 7
;; 393 conflicts: 55 56 57 58 59 60 61 62 63 64 393 0 7
;; 395 conflicts: 55 56 57 58 59 60 61 62 63 64 395 0 7
;; 397 conflicts: 55 56 57 58 59 60 61 62 63 64 65 397 0 7
;; 399 conflicts: 55 56 57 58 59 60 61 62 63 64 65 399 0 7
;; 401 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 401 0 7
;; 403 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 403 0 7
;; 405 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 405 0 7
;; 407 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 407 0 7
;; 409 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 409 0 7
;; 410 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 410 0 7
;; 411 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 411 0 7
;; 413 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 413 0 7
;; 414 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 414 0 7
;; 415 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 415 0 7
;; 416 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 416 0 7
;; 418 conflicts: 45 50 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 418 419 0 1 7
;; 419 conflicts: 45 50 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 418 419 0 1 7
;; 425 conflicts: 45 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 425 0 7
;; 426 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 426 0 7
;; 430 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 430 7 8
;; 431 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 431 7 8
;; 432 conflicts: 45 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 432 0 7
;; 433 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 433 438 0 7 8
;; 437 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 437 7 8
;; 438 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 433 438 0 7 8
;; 439 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 439 7 8
;; 441 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 441 7 8
;; 442 conflicts: 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 442 445 446 0 7 8
;; 444 conflicts: 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 444 7 8
;; 445 conflicts: 45 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 442 445 0 7 8
;; 446 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 442 446 0 7 8
;; 450 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 450 7 8
;; 451 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 451 7 8
;; 452 conflicts: 45 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 452 0 7
;; 453 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 453 0 7
;; 457 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 457 7 8
;; 458 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 458 7 8
;; 459 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 459 7 8
;; 460 conflicts: 45 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 460 0 7
;; 461 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 461 0 7
;; 465 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 465 7 8
;; 466 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 466 7 8
;; 467 conflicts: 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 467 7
;; 470 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 470 0 7
;; 471 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 471 0 7
;; 472 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 473 475 476 477 478 735 736 0 1 2 7 8
;; 473 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 473 735 736 7 8
;; 475 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 475 735 736 2 7
;; 476 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 476 735 736 2 7
;; 477 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 477 478 735 736 0 1 2 7
;; 478 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 477 478 735 736 0 1 2 7
;; 479 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 479 0 7
;; 481 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 481 0 7
;; 482 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 482 493 7 8
;; 484 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 485 486 734 0 1 7
;; 485 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 485 734 0 7
;; 486 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 486 734 0 1 7
;; 487 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 487 7
;; 488 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 488 495 7 8
;; 489 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489 490 707 708 7 8 9
;; 490 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489 490 7 8
;; 492 conflicts: 43 55 492 0 1 3 7
;; 493 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 482 493 7 8
;; 495 conflicts: 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 488 495 7 8
;; 496 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 496 7 8
;; 497 conflicts: 45 56 57 58 59 63 64 65 66 69 70 71 497 498 0 1 2 7
;; 498 conflicts: 45 56 57 58 59 63 64 65 66 69 70 71 497 498 0 1 2 7
;; 499 conflicts: 45 56 57 58 59 63 64 65 66 68 69 70 71 499 733 0 1 7
;; 500 conflicts: 56 57 58 63 64 65 66 68 69 70 71 500 0 7
;; 502 conflicts: 56 57 58 63 64 65 66 68 69 70 71 502 0 7
;; 503 conflicts: 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 503 732 0 1 7
;; 504 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 504 7 8
;; 505 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 505 7 8
;; 506 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 506 7 8
;; 507 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 507 7 8
;; 508 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 508 7 8
;; 509 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 509 7 8
;; 510 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 510 511 512 513 515 516 517 0 1 2 7 8
;; 511 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 510 511 512 513 515 516 517 518 0 1 2 7 8
;; 512 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 510 511 512 515 0 1 2 7 8
;; 513 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 510 511 513 0 2 7 8
;; 515 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 510 511 512 515 0 1 2 7 8
;; 516 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 510 511 516 0 2 7 8
;; 517 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 510 511 517 518 0 2 7 8
;; 518 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 511 517 518 0 2 7 8
;; 519 conflicts: 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 519 731 0 1 7
;; 520 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 520 7 8
;; 521 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 521 7 8
;; 522 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 522 7 8
;; 523 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 523 7 8
;; 524 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 524 7 8
;; 525 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 525 7 8
;; 526 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 526 527 528 529 531 532 533 0 1 2 7 8
;; 527 conflicts: 45 46 56 57 58 63 64 65 66 68 69 70 71 72 526 527 528 529 531 532 533 534 0 1 2 7 8
;; 528 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 526 527 528 531 0 1 2 7 8
;; 529 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 526 527 529 0 2 7 8
;; 531 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 526 527 528 531 0 1 2 7 8
;; 532 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 526 527 532 0 2 7 8
;; 533 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 526 527 533 534 0 2 7 8
;; 534 conflicts: 45 56 57 58 63 64 65 66 68 69 70 71 72 527 533 534 0 2 7 8
;; 535 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 535 727 728 729 730 0 7
;; 536 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 536 539 727 728 729 730 0 1 7
;; 537 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 537 727 728 729 730 0 7
;; 539 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 536 539 727 728 729 730 0 1 7
;; 540 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 540 727 728 729 730 0 7
;; 541 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 542 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 542 723 724 725 726 727 728 729 730 7 9
;; 544 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 544 554 555 564 723 724 725 726 727 728 729 730 7 8 9
;; 554 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 544 554 723 724 725 726 727 728 729 730 7 8 9
;; 555 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 544 555 723 724 725 726 727 728 729 730 7 8 9
;; 564 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 544 564 723 724 725 726 727 728 729 730 7 8 9
;; 565 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 565 723 724 725 726 727 728 729 730 7 9
;; 566 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 566 723 724 725 726 727 728 729 730 0 7
;; 567 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 567 570 723 724 725 726 727 728 729 730 0 1 7
;; 568 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 568 572 573 575 723 724 725 726 727 728 729 730 0 1 7 10
;; 570 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 567 570 723 724 725 726 727 728 729 730 0 1 7
;; 571 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 571 723 724 725 726 727 728 729 730 0 7
;; 572 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 568 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 573 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 568 572 573 723 724 725 726 727 728 729 730 0 1 7 10
;; 575 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 568 572 575 590 591 592 600 608 610 611 619 627 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 590 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 590 591 592 600 723 724 725 726 727 728 729 730 0 1 7 8 10
;; 591 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 590 591 723 724 725 726 727 728 729 730 0 1 7 8 10
;; 592 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 590 592 723 724 725 726 727 728 729 730 0 1 7 8 10
;; 600 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 590 600 723 724 725 726 727 728 729 730 0 1 7 8 10
;; 608 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 608 610 723 724 725 726 727 728 729 730 1 7 8 9 10
;; 610 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 608 610 723 724 725 726 727 728 729 730 1 7 8 9 10
;; 611 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 611 723 724 725 726 727 728 729 730 1 7 8 10
;; 619 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 619 723 724 725 726 727 728 729 730 1 7 8 10
;; 627 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 575 627 723 724 725 726 727 728 729 730 1 7 8 10
;; 628 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 572 628 723 724 725 726 727 728 729 730 1 7 10
;; 629 conflicts: 56 57 65 66 69 70 71 629 7
;; 629 preferences: 0
;; 630 conflicts: 56 57 65 66 69 70 71 630 7
;; 630 preferences: 0
;; 631 conflicts: 45 56 57 66 69 70 71 631 632 633 635 636 637 638 640 641 722 0 1 2 7 8
;; 632 conflicts: 45 56 57 66 69 70 71 631 632 635 722 0 1 2 7
;; 633 conflicts: 45 56 57 66 69 70 71 631 633 722 0 2 7
;; 635 conflicts: 45 56 57 66 69 70 71 631 632 635 722 0 1 2 7
;; 636 conflicts: 45 56 57 66 69 70 71 631 636 722 0 2 7
;; 637 conflicts: 45 56 57 66 69 70 71 631 637 722 0 2 7
;; 638 conflicts: 45 56 57 66 69 70 71 631 638 722 2 7 8
;; 640 conflicts: 45 56 57 66 69 70 71 631 640 722 2 7 8
;; 641 conflicts: 45 56 57 66 69 70 71 631 641 722 0 1 2 7
;; 642 conflicts: 45 46 57 66 69 70 71 642 643 644 646 647 648 656 658 719 720 721 0 1 2 7 8
;; 643 conflicts: 45 46 57 66 69 70 71 642 643 646 719 720 721 0 1 2 7
;; 644 conflicts: 45 46 57 66 69 70 71 642 644 719 720 721 0 2 7
;; 646 conflicts: 45 46 57 66 69 70 71 642 643 646 719 720 721 0 1 2 7
;; 647 conflicts: 45 46 57 66 69 70 71 642 647 719 720 721 0 2 7
;; 648 conflicts: 45 46 57 66 69 70 71 642 648 656 658 719 720 721 0 2 7 8
;; 656 conflicts: 45 46 57 66 69 70 71 642 648 656 719 720 721 0 2 7 8
;; 658 conflicts: 45 57 66 69 70 71 642 648 658 719 720 721 0 2 7 8
;; 664 conflicts: 45 57 66 69 70 71 664 7 8
;; 665 conflicts: 45 57 66 69 70 71 665 7 8
;; 666 conflicts: 45 57 66 69 70 71 666 668 669 670 7 8 9
;; 667 conflicts: 45 57 66 69 70 71 667 7 9
;; 668 conflicts: 45 57 66 69 70 71 666 668 7 8 9
;; 669 conflicts: 45 57 66 69 70 71 666 669 7 8 9
;; 670 conflicts: 45 57 66 69 70 71 666 670 7 8 9
;; 672 conflicts: 45 57 66 69 70 71 672 7 9
;; 673 conflicts: 45 57 66 69 70 71 673 7 9
;; 674 conflicts: 45 57 66 69 70 71 674 676 677 678 7 8 9
;; 675 conflicts: 45 57 66 69 70 71 675 7 9
;; 676 conflicts: 45 57 66 69 70 71 674 676 7 8 9
;; 677 conflicts: 45 57 66 69 70 71 674 677 7 8 9
;; 678 conflicts: 45 57 66 69 70 71 674 678 7 8 9
;; 680 conflicts: 45 57 66 69 70 71 680 7 9
;; 681 conflicts: 45 57 66 69 70 71 681 7 9
;; 682 conflicts: 45 57 66 69 70 71 682 7 8
;; 683 conflicts: 45 57 66 69 70 71 683 7 8
;; 684 conflicts: 45 57 66 69 70 71 684 7 8
;; 685 conflicts: 45 57 66 69 70 71 685 7 8
;; 686 conflicts: 45 57 66 69 70 71 686 7 8
;; 687 conflicts: 45 57 66 69 70 71 687 7
;; 690 conflicts: 45 46 57 66 70 71 690 691 692 694 695 696 704 706 716 717 718 0 1 2 7 8
;; 691 conflicts: 45 46 57 66 70 71 690 691 694 716 717 718 0 1 2 7
;; 692 conflicts: 45 46 57 66 70 71 690 692 716 717 718 0 2 7
;; 694 conflicts: 45 46 57 66 70 71 690 691 694 716 717 718 0 1 2 7
;; 695 conflicts: 45 46 57 66 70 71 690 695 716 717 718 0 2 7
;; 696 conflicts: 45 46 57 66 70 71 690 696 704 706 716 717 718 0 2 7 8
;; 704 conflicts: 45 46 57 66 70 71 690 696 704 716 717 718 0 2 7 8
;; 706 conflicts: 45 57 66 70 71 690 696 706 716 717 718 0 2 7 8
;; 707 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489 707 708 7 8 9
;; 708 conflicts: 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489 707 708 7 8 9
;; 711 conflicts: 45 46 55 711 0 7
;; 712 conflicts: 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 712 0 3 7
;; 713 conflicts: 55 713 0 7
;; 714 conflicts: 55 714 0 7
;; 715 conflicts: 52 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 715 0 3 7
;; 716 conflicts: 45 46 57 66 70 71 690 691 692 694 695 696 704 706 716 717 718 0 1 2 7 8
;; 717 conflicts: 45 46 57 66 70 71 690 691 692 694 695 696 704 706 716 717 718 0 1 2 7 8
;; 718 conflicts: 45 46 57 66 70 71 690 691 692 694 695 696 704 706 716 717 718 0 1 2 7 8
;; 719 conflicts: 45 46 57 66 69 70 71 642 643 644 646 647 648 656 658 719 720 721 0 1 2 7 8
;; 720 conflicts: 45 46 57 66 69 70 71 642 643 644 646 647 648 656 658 719 720 721 0 1 2 7 8
;; 721 conflicts: 45 46 57 66 69 70 71 642 643 644 646 647 648 656 658 719 720 721 0 1 2 7 8
;; 722 conflicts: 45 56 57 66 69 70 71 631 632 633 635 636 637 638 640 641 722 0 1 2 7 8
;; 723 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 724 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 725 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 726 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 727 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 728 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 729 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 730 conflicts: 45 46 56 57 63 64 65 66 68 69 70 71 535 536 537 539 540 541 542 544 554 555 564 565 566 567 568 570 571 572 573 575 590 591 592 600 608 610 611 619 627 628 723 724 725 726 727 728 729 730 0 1 7 8 9 10
;; 731 conflicts: 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 519 731 0 1 7
;; 732 conflicts: 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 503 732 0 1 7
;; 733 conflicts: 45 56 57 58 59 63 64 65 66 68 69 70 71 499 733 0 1 7
;; 734 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 485 486 734 0 1 7
;; 735 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 473 475 476 477 478 735 736 0 1 2 7 8
;; 736 conflicts: 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 473 475 476 477 478 735 736 0 1 2 7 8

Spilling for insn 6.
Spilling for insn 17.
Spilling for insn 1850.
Spilling for insn 22.
Spilling for insn 24.
Spilling for insn 29.
Spilling for insn 34.
Spilling for insn 36.
Spilling for insn 41.
Spilling for insn 46.
Spilling for insn 48.
Spilling for insn 54.
Spilling for insn 56.
Spilling for insn 62.
Spilling for insn 64.
Spilling for insn 70.
Spilling for insn 72.
Spilling for insn 78.
Spilling for insn 83.
Spilling for insn 88.
Spilling for insn 90.
Spilling for insn 92.
Spilling for insn 98.
Spilling for insn 100.
Spilling for insn 106.
Spilling for insn 108.
Spilling for insn 115.
Spilling for insn 118.
Spilling for insn 3116.
Spilling for insn 145.
Spilling for insn 158.
Spilling for insn 175.
Spilling for insn 177.
Spilling for insn 179.
Spilling for insn 190.
Spilling for insn 199.
Spilling for insn 208.
Spilling for insn 217.
Spilling for insn 219.
Spilling for insn 221.
Spilling for insn 522.
Spilling for insn 529.
Spilling for insn 233.
Spilling for insn 250.
Spilling for insn 257.
Spilling for insn 258.
Spilling for insn 265.
Spilling for insn 282.
Spilling for insn 289.
Spilling for insn 290.
Spilling for insn 297.
Spilling for insn 314.
Spilling for insn 321.
Spilling for insn 322.
Spilling for insn 329.
Spilling for insn 346.
Spilling for insn 353.
Spilling for insn 354.
Spilling for insn 361.
Spilling for insn 378.
Spilling for insn 385.
Spilling for insn 386.
Spilling for insn 393.
Spilling for insn 410.
Spilling for insn 417.
Spilling for insn 418.
Spilling for insn 425.
Spilling for insn 442.
Spilling for insn 449.
Spilling for insn 450.
Spilling for insn 457.
Spilling for insn 474.
Spilling for insn 481.
Spilling for insn 482.
Spilling for insn 489.
Spilling for insn 506.
Spilling for insn 513.
Spilling for insn 514.
Spilling for insn 544.
Spilling for insn 550.
Spilling for insn 556.
Spilling for insn 564.
Spilling for insn 578.
Spilling for insn 584.
Spilling for insn 126.
Spilling for insn 615.
Spilling for insn 618.
Spilling for insn 623.
Spilling for insn 625.
Spilling for insn 629.
Spilling for insn 634.
Spilling for insn 636.
Spilling for insn 638.
Spilling for insn 643.
Spilling for insn 648.
Spilling for insn 650.
Spilling for insn 652.
Spilling for insn 654.
Spilling for insn 656.
Spilling for insn 664.
Spilling for insn 666.
Spilling for insn 672.
Spilling for insn 674.
Spilling for insn 681.
Spilling for insn 686.
Spilling for insn 688.
Spilling for insn 695.
Spilling for insn 700.
Spilling for insn 702.
Spilling for insn 709.
Spilling for insn 3126.
Spilling for insn 730.
Spilling for insn 737.
Spilling for insn 739.
Spilling for insn 741.
Spilling for insn 743.
Spilling for insn 773.
Spilling for insn 779.
Spilling for insn 784.
Spilling for insn 799.
Spilling for insn 814.
Spilling for insn 829.
Spilling for insn 831.
Spilling for insn 833.
Spilling for insn 846.
Spilling for insn 852.
Spilling for insn 857.
Spilling for insn 872.
Spilling for insn 887.
Spilling for insn 902.
Spilling for insn 904.
Spilling for insn 906.
Spilling for insn 913.
Spilling for insn 919.
Spilling for insn 925.
Spilling for insn 926.
Spilling for insn 953.
Spilling for insn 960.
Spilling for insn 964.
Spilling for insn 979.
Spilling for insn 981.
Spilling for insn 983.
Spilling for insn 1009.
Spilling for insn 1010.
Spilling for insn 1011.
Spilling for insn 1013.
Spilling for insn 1039.
Spilling for insn 1040.
Spilling for insn 1042.
Spilling for insn 1049.
Spilling for insn 1053.
Spilling for insn 1058.
Spilling for insn 1064.
Spilling for insn 1070.
Spilling for insn 1086.
Spilling for insn 1092.
Spilling for insn 717.
Spilling for insn 1110.
Spilling for insn 1115.
Spilling for insn 1117.
Spilling for insn 1119.
Spilling for insn 1121.
Spilling for insn 1125.
Spilling for insn 1132.
Spilling for insn 1136.
Spilling for insn 1142.
Spilling for insn 1145.
Spilling for insn 1147.
Spilling for insn 1150.
Spilling for insn 1163.
Spilling for insn 1165.
Spilling for insn 1168.
Spilling for insn 1181.
Spilling for insn 1183.
Spilling for insn 1186.
Spilling for insn 1199.
Spilling for insn 1201.
Spilling for insn 1204.
Spilling for insn 1217.
Spilling for insn 1219.
Spilling for insn 1222.
Spilling for insn 1235.
Spilling for insn 1237.
Spilling for insn 1240.
Spilling for insn 1253.
Spilling for insn 1255.
Spilling for insn 1258.
Spilling for insn 1264.
Spilling for insn 1265.
Spilling for insn 1269.
Spilling for insn 1275.
Spilling for insn 1286.
Spilling for insn 1288.
Spilling for insn 1291.
Spilling for insn 1304.
Spilling for insn 1306.
Spilling for insn 1309.
Spilling for insn 1322.
Spilling for insn 1324.
Spilling for insn 1327.
Spilling for insn 1340.
Spilling for insn 1342.
Spilling for insn 1345.
Spilling for insn 1358.
Spilling for insn 1360.
Spilling for insn 1363.
Spilling for insn 1376.
Spilling for insn 1378.
Spilling for insn 1381.
Spilling for insn 1389.
Spilling for insn 1392.
Spilling for insn 1394.
Spilling for insn 1397.
Spilling for insn 1405.
Spilling for insn 1408.
Spilling for insn 1410.
Spilling for insn 1417.
Spilling for insn 3131.
Spilling for insn 1437.
Spilling for insn 1445.
Spilling for insn 1613.
Spilling for insn 1468.
Spilling for insn 1469.
Spilling for insn 1471.
Using reg 0 for reload 0
Spilling for insn 1493.
Spilling for insn 1494.
Spilling for insn 1497.
Spilling for insn 1499.
Spilling for insn 1504.
Using reg 0 for reload 0
Spilling for insn 1517.
Spilling for insn 1518.
Spilling for insn 1532.
Spilling for insn 1534.
Spilling for insn 1539.
Using reg 0 for reload 0
Spilling for insn 1565.
Spilling for insn 1566.
Spilling for insn 1568.
Spilling for insn 1573.
Using reg 0 for reload 0
Spilling for insn 1596.
Spilling for insn 1597.
Spilling for insn 1599.
Using reg 0 for reload 0
Spilling for insn 3136.
Spilling for insn 3430.
Spilling for insn 3431.
Spilling for insn 3434.
Spilling for insn 3437.
Spilling for insn 1642.
Using reg 0 for reload 0
Spilling for insn 1644.
Using reg 0 for reload 0
Using reg 1 for reload 1
Spilling for insn 1655.
Using reg 0 for reload 0
Spilling for insn 1656.
Using reg 0 for reload 0
Spilling for insn 1425.
Spilling for insn 1688.
Spilling for insn 1694.
Spilling for insn 1696.
Spilling for insn 3141.
Spilling for insn 1716.
Spilling for insn 1717.
Spilling for insn 1720.
Using reg 1 for reload 0
Spilling for insn 1722.
Spilling for insn 1725.
Using reg 2 for reload 0
Spilling for insn 1727.
Using reg 2 for reload 0
Spilling for insn 1853.
Spilling for insn 1733.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1856.
Spilling for insn 3146.
Spilling for insn 3425.
Spilling for insn 3428.
Spilling for insn 1757.
Using reg 2 for reload 0
Spilling for insn 1758.
Using reg 2 for reload 0
Spilling for insn 1775.
Using reg 0 for reload 0
Spilling for insn 1859.
Spilling for insn 1776.
Using reg 0 for reload 0
Spilling for insn 1781.
Using reg 2 for reload 0
Spilling for insn 1786.
Spilling for insn 1789.
Spilling for insn 1792.
Using reg 0 for reload 0
Spilling for insn 1794.
Spilling for insn 1796.
Spilling for insn 1705.
Spilling for insn 1817.
Spilling for insn 1821.
Spilling for insn 3151.
Spilling for insn 3152.
Spilling for insn 3153.
Using reg 0 for reload 0
Spilling for insn 1841.
Spilling for insn 1843.
Spilling for insn 1847.
Spilling for insn 1862.
Spilling for insn 1864.
Spilling for insn 1866.
Spilling for insn 1868.
Spilling for insn 1870.
Spilling for insn 1872.
Spilling for insn 1874.
Spilling for insn 1876.
Spilling for insn 1878.
Spilling for insn 1880.
Spilling for insn 1884.
Spilling for insn 1891.
Spilling for insn 1893.
Spilling for insn 1895.
Spilling for insn 1900.
Spilling for insn 1828.
Spilling for insn 1830.
Spilling for insn 1831.
Using reg 0 for reload 0
Spilling for insn 1916.
Spilling for insn 1918.
Spilling for insn 3157.
Spilling for insn 1934.
Spilling for insn 1936.
Using reg 3 for reload 0
Spilling for insn 1937.
Spilling for insn 1927.
Spilling for insn 1952.
Using reg 8 for reload 0
Spilling for insn 3162.
Spilling for insn 3424.
Spilling for insn 1967.
Using reg 3 for reload 0
Spilling for insn 1968.
Using reg 3 for reload 0
Spilling for insn 1989.
Spilling for insn 1990.
Using reg 8 for reload 0
Spilling for insn 1992.
Using reg 8 for reload 0
Spilling for insn 3167.
Spilling for insn 3172.
Spilling for insn 3177.
Spilling for insn 3421.
Spilling for insn 2028.
Using reg 3 for reload 0
Spilling for insn 2029.
Using reg 3 for reload 0
Spilling for insn 2048.
Using reg 0 for reload 0
Spilling for insn 2049.
Spilling for insn 2051.
Using reg 0 for reload 0
Spilling for insn 2060.
Using reg 0 for reload 0
Spilling for insn 2061.
Spilling for insn 2063.
Using reg 0 for reload 0
Spilling for insn 2066.
Using reg 0 for reload 0
Spilling for insn 2067.
Spilling for insn 2069.
Using reg 0 for reload 0
Spilling for insn 2076.
Spilling for insn 2078.
Spilling for insn 2084.
Spilling for insn 2088.
Spilling for insn 2095.
Spilling for insn 2097.
Using reg 1 for reload 0
Spilling for insn 2010.
Spilling for insn 1998.
Spilling for insn 3182.
Spilling for insn 3187.
Spilling for insn 3192.
Spilling for insn 3418.
Spilling for insn 2161.
Using reg 3 for reload 0
Spilling for insn 2162.
Using reg 3 for reload 0
Spilling for insn 2181.
Using reg 0 for reload 0
Spilling for insn 2182.
Spilling for insn 2184.
Using reg 0 for reload 0
Spilling for insn 2193.
Using reg 0 for reload 0
Spilling for insn 2194.
Spilling for insn 2196.
Using reg 0 for reload 0
Spilling for insn 2199.
Using reg 0 for reload 0
Spilling for insn 2200.
Spilling for insn 2202.
Using reg 0 for reload 0
Spilling for insn 2209.
Spilling for insn 2211.
Spilling for insn 2217.
Spilling for insn 2221.
Spilling for insn 2228.
Spilling for insn 2230.
Using reg 1 for reload 0
Spilling for insn 2143.
Spilling for insn 2131.
Spilling for insn 3197.
Spilling for insn 3406.
Using reg 0 for reload 0
Spilling for insn 3409.
Using reg 8 for reload 0
Spilling for insn 3412.
Spilling for insn 3415.
Spilling for insn 3202.
Spilling for insn 3388.
Spilling for insn 3394.
Spilling for insn 3403.
Spilling for insn 2304.
Spilling for insn 2323.
Spilling for insn 2326.
Using reg 0 for reload 0
Spilling for insn 2340.
Using reg 0 for reload 0
Spilling for insn 2343.
Using reg 0 for reload 0
Spilling for insn 2357.
Spilling for insn 2366.
Spilling for insn 2397.
Using reg 3 for reload 0
Spilling for insn 2398.
Using reg 3 for reload 0
Spilling for insn 2412.
Using reg 3 for reload 0
Spilling for insn 2426.
Using reg 3 for reload 0
Spilling for insn 2429.
Spilling for insn 2444.
Using reg 0 for reload 0
Spilling for insn 2458.
Using reg 0 for reload 0
Spilling for insn 2461.
Using reg 0 for reload 0
Spilling for insn 2264.
Spilling for insn 2494.
Spilling for insn 2496.
Spilling for insn 2498.
Spilling for insn 2504.
Spilling for insn 2506.
Spilling for insn 2508.
Spilling for insn 2513.
Spilling for insn 2517.
Spilling for insn 2525.
Spilling for insn 2527.
Spilling for insn 2533.
Spilling for insn 2535.
Spilling for insn 2541.
Spilling for insn 2543.
Spilling for insn 2547.
Spilling for insn 2549.
Spilling for insn 2551.
Spilling for insn 2559.
Spilling for insn 2565.
Spilling for insn 2567.
Spilling for insn 2573.
Spilling for insn 2584.
Spilling for insn 2586.
Spilling for insn 2588.
Spilling for insn 2593.
Spilling for insn 2597.
Spilling for insn 2605.
Spilling for insn 2607.
Spilling for insn 2613.
Spilling for insn 2615.
Spilling for insn 2621.
Spilling for insn 2623.
Spilling for insn 2627.
Spilling for insn 2629.
Spilling for insn 2631.
Spilling for insn 2639.
Spilling for insn 2645.
Spilling for insn 2647.
Spilling for insn 2653.
Spilling for insn 2664.
Spilling for insn 2666.
Spilling for insn 2668.
Spilling for insn 2674.
Spilling for insn 2676.
Spilling for insn 2678.
Spilling for insn 3207.
Spilling for insn 3384.
Spilling for insn 2697.
Spilling for insn 2701.
Spilling for insn 2709.
Using reg 1 for reload 0
Spilling for insn 2722.
Using reg 0 for reload 0
Spilling for insn 2725.
Using reg 5 for reload 0
Spilling for insn 2726.
Using reg 5 for reload 0
Spilling for insn 2744.
Spilling for insn 2746.
Spilling for insn 3212.
Spilling for insn 3381.
Using reg 0 for reload 0
Spilling for insn 3217.
Spilling for insn 3375.
Using reg 0 for reload 0
Spilling for insn 3378.
Spilling for insn 2775.
Spilling for insn 2779.
Spilling for insn 2801.
Using reg 1 for reload 0
Spilling for insn 2802.
Using reg 1 for reload 0
Spilling for insn 2804.
Using reg 1 for reload 0
Spilling for insn 2755.
Spilling for insn 2834.
Spilling for insn 3222.
Spilling for insn 2950.
Spilling for insn 2957.
Spilling for insn 2873.
Using reg 0 for reload 0
Spilling for insn 2874.
Spilling for insn 2876.
Using reg 0 for reload 0
Spilling for insn 2883.
Spilling for insn 2884.
Spilling for insn 2886.
Using reg 0 for reload 0
Spilling for insn 2887.
Using reg 0 for reload 0
Spilling for insn 2890.
Spilling for insn 2892.
Using reg 0 for reload 0
Spilling for insn 2894.
Using reg 0 for reload 0
Spilling for insn 2901.
Spilling for insn 2902.
Spilling for insn 2904.
Using reg 0 for reload 0
Spilling for insn 2905.
Using reg 0 for reload 0
Spilling for insn 2908.
Spilling for insn 2910.
Using reg 0 for reload 0
Spilling for insn 2912.
Using reg 0 for reload 0
Spilling for insn 2923.
Using reg 0 for reload 0
Spilling for insn 2927.
Spilling for insn 2928.
Using reg 0 for reload 0
Spilling for insn 2930.
Using reg 0 for reload 0
Spilling for insn 2940.
Using reg 0 for reload 0
Spilling for insn 2941.
Spilling for insn 2943.
Using reg 0 for reload 0
Spilling for insn 2843.
Spilling for insn 3227.
Spilling for insn 3372.
Using reg 0 for reload 0
Spilling for insn 3232.
Spilling for insn 3366.
Using reg 0 for reload 0
Spilling for insn 3369.
Spilling for insn 3001.
Spilling for insn 3005.
Spilling for insn 3027.
Using reg 1 for reload 0
Spilling for insn 3028.
Using reg 1 for reload 0
Spilling for insn 3030.
Using reg 1 for reload 0
Spilling for insn 2981.
Spilling for insn 3060.
Spilling for insn 3066.
Spilling for insn 3068.
Spilling for insn 3074.
Spilling for insn 3076.
Spilling for insn 3080.
Spilling for insn 3082.
Spilling for insn 3084.
Spilling for insn 3092.
Spilling for insn 3098.
Spilling for insn 3100.
Spilling for insn 3106.
 Register 478 now in 8.

 Register 482 now in 10.

 Register 726 now on stack.

 Register 731 now on stack.

 Register 732 now on stack.

 Register 734 now on stack.

Spilling for insn 6.
Spilling for insn 17.
Spilling for insn 1850.
Spilling for insn 22.
Spilling for insn 24.
Spilling for insn 29.
Spilling for insn 34.
Spilling for insn 36.
Spilling for insn 41.
Spilling for insn 46.
Spilling for insn 48.
Spilling for insn 54.
Spilling for insn 56.
Spilling for insn 62.
Spilling for insn 64.
Spilling for insn 70.
Spilling for insn 72.
Spilling for insn 78.
Spilling for insn 83.
Spilling for insn 88.
Spilling for insn 90.
Spilling for insn 92.
Spilling for insn 98.
Spilling for insn 100.
Spilling for insn 106.
Spilling for insn 108.
Spilling for insn 115.
Spilling for insn 118.
Spilling for insn 3116.
Spilling for insn 145.
Spilling for insn 158.
Spilling for insn 175.
Spilling for insn 177.
Spilling for insn 179.
Spilling for insn 190.
Spilling for insn 199.
Spilling for insn 208.
Spilling for insn 217.
Spilling for insn 219.
Spilling for insn 221.
Spilling for insn 522.
Spilling for insn 529.
Spilling for insn 233.
Spilling for insn 250.
Spilling for insn 257.
Spilling for insn 258.
Spilling for insn 265.
Spilling for insn 282.
Spilling for insn 289.
Spilling for insn 290.
Spilling for insn 297.
Spilling for insn 314.
Spilling for insn 321.
Spilling for insn 322.
Spilling for insn 329.
Spilling for insn 346.
Spilling for insn 353.
Spilling for insn 354.
Spilling for insn 361.
Spilling for insn 378.
Spilling for insn 385.
Spilling for insn 386.
Spilling for insn 393.
Spilling for insn 410.
Spilling for insn 417.
Spilling for insn 418.
Spilling for insn 425.
Spilling for insn 442.
Spilling for insn 449.
Spilling for insn 450.
Spilling for insn 457.
Spilling for insn 474.
Spilling for insn 481.
Spilling for insn 482.
Spilling for insn 489.
Spilling for insn 506.
Spilling for insn 513.
Spilling for insn 514.
Spilling for insn 544.
Spilling for insn 550.
Spilling for insn 556.
Spilling for insn 564.
Spilling for insn 578.
Spilling for insn 584.
Spilling for insn 126.
Spilling for insn 615.
Spilling for insn 618.
Spilling for insn 623.
Spilling for insn 625.
Spilling for insn 629.
Spilling for insn 634.
Spilling for insn 636.
Spilling for insn 638.
Spilling for insn 643.
Spilling for insn 648.
Spilling for insn 650.
Spilling for insn 652.
Spilling for insn 654.
Spilling for insn 656.
Spilling for insn 664.
Spilling for insn 666.
Spilling for insn 672.
Spilling for insn 674.
Spilling for insn 681.
Spilling for insn 686.
Spilling for insn 688.
Spilling for insn 695.
Spilling for insn 700.
Spilling for insn 702.
Spilling for insn 709.
Spilling for insn 3126.
Spilling for insn 730.
Spilling for insn 737.
Spilling for insn 739.
Spilling for insn 741.
Spilling for insn 743.
Spilling for insn 773.
Spilling for insn 779.
Spilling for insn 784.
Spilling for insn 799.
Spilling for insn 814.
Spilling for insn 829.
Spilling for insn 831.
Spilling for insn 833.
Spilling for insn 846.
Spilling for insn 852.
Spilling for insn 857.
Spilling for insn 872.
Spilling for insn 887.
Spilling for insn 902.
Spilling for insn 904.
Spilling for insn 906.
Spilling for insn 913.
Spilling for insn 919.
Spilling for insn 925.
Spilling for insn 926.
Spilling for insn 953.
Spilling for insn 960.
Spilling for insn 964.
Spilling for insn 979.
Spilling for insn 981.
Spilling for insn 983.
Spilling for insn 1009.
Spilling for insn 1010.
Spilling for insn 1011.
Spilling for insn 1013.
Spilling for insn 1039.
Spilling for insn 1040.
Spilling for insn 1042.
Spilling for insn 1049.
Spilling for insn 1053.
Spilling for insn 1058.
Spilling for insn 1064.
Spilling for insn 1070.
Spilling for insn 1086.
Spilling for insn 1092.
Spilling for insn 717.
Spilling for insn 1110.
Spilling for insn 1115.
Spilling for insn 1117.
Spilling for insn 1119.
Spilling for insn 1121.
Spilling for insn 1125.
Spilling for insn 1132.
Spilling for insn 1136.
Spilling for insn 1142.
Spilling for insn 1145.
Spilling for insn 1147.
Spilling for insn 1150.
Spilling for insn 1163.
Spilling for insn 1165.
Spilling for insn 1168.
Spilling for insn 1181.
Spilling for insn 1183.
Spilling for insn 1186.
Spilling for insn 1199.
Spilling for insn 1201.
Spilling for insn 1204.
Spilling for insn 1217.
Spilling for insn 1219.
Spilling for insn 1222.
Spilling for insn 1235.
Spilling for insn 1237.
Spilling for insn 1240.
Spilling for insn 1253.
Spilling for insn 1255.
Spilling for insn 1258.
Spilling for insn 1264.
Spilling for insn 1265.
Spilling for insn 1269.
Spilling for insn 1275.
Spilling for insn 1286.
Spilling for insn 1288.
Spilling for insn 1291.
Spilling for insn 1304.
Spilling for insn 1306.
Spilling for insn 1309.
Spilling for insn 1322.
Spilling for insn 1324.
Spilling for insn 1327.
Spilling for insn 1340.
Spilling for insn 1342.
Spilling for insn 1345.
Spilling for insn 1358.
Spilling for insn 1360.
Spilling for insn 1363.
Spilling for insn 1376.
Spilling for insn 1378.
Spilling for insn 1381.
Spilling for insn 1389.
Spilling for insn 1392.
Spilling for insn 1394.
Spilling for insn 1397.
Spilling for insn 1405.
Spilling for insn 1408.
Spilling for insn 1410.
Spilling for insn 1417.
Spilling for insn 3131.
Spilling for insn 1437.
Spilling for insn 1445.
Spilling for insn 1613.
Spilling for insn 1468.
Spilling for insn 1469.
Spilling for insn 1471.
Using reg 0 for reload 0
Spilling for insn 1493.
Spilling for insn 1494.
Spilling for insn 1497.
Spilling for insn 1499.
Spilling for insn 1504.
Using reg 0 for reload 0
Spilling for insn 1517.
Spilling for insn 1518.
Spilling for insn 1532.
Spilling for insn 1534.
Spilling for insn 1539.
Using reg 0 for reload 0
Spilling for insn 1565.
Spilling for insn 1566.
Spilling for insn 1568.
Spilling for insn 1573.
Using reg 0 for reload 0
Spilling for insn 1596.
Spilling for insn 1597.
Spilling for insn 1599.
Using reg 0 for reload 0
Spilling for insn 3136.
Spilling for insn 3430.
Spilling for insn 3431.
Spilling for insn 3434.
Spilling for insn 3437.
Spilling for insn 1642.
Using reg 0 for reload 0
Spilling for insn 1644.
Using reg 0 for reload 0
Using reg 1 for reload 1
Spilling for insn 1655.
Using reg 0 for reload 0
Spilling for insn 1656.
Using reg 0 for reload 0
Spilling for insn 1425.
Spilling for insn 1688.
Spilling for insn 1694.
Spilling for insn 1696.
Spilling for insn 3141.
Spilling for insn 1716.
Spilling for insn 1717.
Spilling for insn 1720.
Using reg 1 for reload 0
Spilling for insn 1722.
Spilling for insn 1727.
Using reg 0 for reload 0
Spilling for insn 1853.
Spilling for insn 1733.
Using reg 0 for reload 0
Spilling for insn 1856.
Spilling for insn 3146.
Spilling for insn 3425.
Spilling for insn 3428.
Using reg 0 for reload 0
Spilling for insn 1757.
Using reg 2 for reload 0
Spilling for insn 1758.
Using reg 2 for reload 0
Spilling for insn 1747.
Spilling for insn 1775.
Using reg 0 for reload 0
Spilling for insn 1859.
Spilling for insn 1776.
Using reg 0 for reload 0
Spilling for insn 1781.
Using reg 2 for reload 0
Spilling for insn 1786.
Spilling for insn 1789.
Spilling for insn 1792.
Using reg 0 for reload 0
Spilling for insn 1794.
Spilling for insn 1796.
Spilling for insn 1705.
Spilling for insn 1817.
Spilling for insn 1821.
Spilling for insn 3151.
Spilling for insn 3152.
Spilling for insn 3153.
Using reg 0 for reload 0
Spilling for insn 1841.
Spilling for insn 1843.
Spilling for insn 1847.
Spilling for insn 1862.
Spilling for insn 1864.
Spilling for insn 1866.
Spilling for insn 1868.
Spilling for insn 1870.
Spilling for insn 1872.
Spilling for insn 1874.
Spilling for insn 1876.
Spilling for insn 1878.
Spilling for insn 1880.
Spilling for insn 1884.
Spilling for insn 1891.
Spilling for insn 1893.
Spilling for insn 1895.
Spilling for insn 1900.
Spilling for insn 1828.
Spilling for insn 1830.
Spilling for insn 1831.
Using reg 0 for reload 0
Spilling for insn 1916.
Spilling for insn 1918.
Spilling for insn 3157.
Spilling for insn 1934.
Spilling for insn 1936.
Using reg 3 for reload 0
Spilling for insn 1937.
Spilling for insn 1927.
Spilling for insn 1952.
Using reg 8 for reload 0
Spilling for insn 3162.
Spilling for insn 3424.
Spilling for insn 1967.
Using reg 3 for reload 0
Spilling for insn 1968.
Using reg 3 for reload 0
Spilling for insn 1989.
Spilling for insn 1990.
Using reg 8 for reload 0
Spilling for insn 1992.
Using reg 8 for reload 0
Spilling for insn 3167.
Spilling for insn 3172.
Spilling for insn 3177.
Spilling for insn 3421.
Using reg 0 for reload 0
Spilling for insn 2028.
Using reg 3 for reload 0
Spilling for insn 2029.
Using reg 3 for reload 0
Spilling for insn 2022.
Spilling for insn 2048.
Using reg 0 for reload 0
Spilling for insn 2049.
Spilling for insn 2051.
Using reg 0 for reload 0
Spilling for insn 2060.
Using reg 0 for reload 0
Spilling for insn 2061.
Spilling for insn 2063.
Using reg 0 for reload 0
Spilling for insn 2066.
Using reg 0 for reload 0
Spilling for insn 2067.
Spilling for insn 2069.
Using reg 0 for reload 0
Spilling for insn 2076.
Spilling for insn 2078.
Spilling for insn 2084.
Spilling for insn 2088.
Spilling for insn 2095.
Spilling for insn 2097.
Using reg 1 for reload 0
Spilling for insn 2010.
Spilling for insn 1998.
Spilling for insn 3182.
Spilling for insn 3187.
Spilling for insn 3192.
Spilling for insn 3418.
Using reg 0 for reload 0
Spilling for insn 2161.
Using reg 3 for reload 0
Spilling for insn 2162.
Using reg 3 for reload 0
Spilling for insn 2155.
Spilling for insn 2181.
Using reg 0 for reload 0
Spilling for insn 2182.
Spilling for insn 2184.
Using reg 0 for reload 0
Spilling for insn 2193.
Using reg 0 for reload 0
Spilling for insn 2194.
Spilling for insn 2196.
Using reg 0 for reload 0
Spilling for insn 2199.
Using reg 0 for reload 0
Spilling for insn 2200.
Spilling for insn 2202.
Using reg 0 for reload 0
Spilling for insn 2209.
Spilling for insn 2211.
Spilling for insn 2217.
Spilling for insn 2221.
Spilling for insn 2228.
Spilling for insn 2230.
Using reg 1 for reload 0
Spilling for insn 2143.
Spilling for insn 2131.
Spilling for insn 3197.
Spilling for insn 3406.
Using reg 0 for reload 0
Spilling for insn 3409.
Using reg 8 for reload 0
Spilling for insn 3412.
Spilling for insn 3415.
Spilling for insn 3202.
Spilling for insn 3388.
Spilling for insn 3394.
Spilling for insn 3403.
Using reg 0 for reload 1
Spilling for insn 2304.
Spilling for insn 2323.
Spilling for insn 2326.
Using reg 0 for reload 0
Spilling for insn 2340.
Using reg 0 for reload 0
Spilling for insn 2343.
Using reg 0 for reload 0
Spilling for insn 2357.
Spilling for insn 2366.
Spilling for insn 2397.
Using reg 3 for reload 0
Spilling for insn 2398.
Using reg 3 for reload 0
Spilling for insn 2412.
Using reg 3 for reload 0
Spilling for insn 2426.
Using reg 3 for reload 0
Spilling for insn 2429.
Spilling for insn 2444.
Using reg 0 for reload 0
Spilling for insn 2458.
Using reg 0 for reload 0
Spilling for insn 2461.
Using reg 0 for reload 0
Spilling for insn 2276.
Spilling for insn 2264.
Spilling for insn 2494.
Spilling for insn 2496.
Spilling for insn 2498.
Spilling for insn 2504.
Spilling for insn 2506.
Spilling for insn 2508.
Spilling for insn 2513.
Spilling for insn 2517.
Spilling for insn 2525.
Spilling for insn 2527.
Spilling for insn 2533.
Spilling for insn 2535.
Spilling for insn 2541.
Spilling for insn 2543.
Spilling for insn 2547.
Spilling for insn 2549.
Spilling for insn 2551.
Spilling for insn 2559.
Spilling for insn 2565.
Spilling for insn 2567.
Spilling for insn 2573.
Spilling for insn 2584.
Spilling for insn 2586.
Spilling for insn 2588.
Spilling for insn 2593.
Spilling for insn 2597.
Spilling for insn 2605.
Spilling for insn 2607.
Spilling for insn 2613.
Spilling for insn 2615.
Spilling for insn 2621.
Spilling for insn 2623.
Spilling for insn 2627.
Spilling for insn 2629.
Spilling for insn 2631.
Spilling for insn 2639.
Spilling for insn 2645.
Spilling for insn 2647.
Spilling for insn 2653.
Spilling for insn 2664.
Spilling for insn 2666.
Spilling for insn 2668.
Spilling for insn 2674.
Spilling for insn 2676.
Spilling for insn 2678.
Spilling for insn 3207.
Spilling for insn 3384.
Spilling for insn 2697.
Spilling for insn 2701.
Spilling for insn 2709.
Using reg 1 for reload 0
Spilling for insn 2722.
Using reg 0 for reload 0
Spilling for insn 2725.
Using reg 5 for reload 0
Spilling for insn 2726.
Using reg 5 for reload 0
Spilling for insn 2744.
Spilling for insn 2746.
Spilling for insn 3212.
Spilling for insn 3381.
Using reg 0 for reload 0
Spilling for insn 3217.
Spilling for insn 3375.
Using reg 0 for reload 0
Spilling for insn 3378.
Spilling for insn 2775.
Spilling for insn 2779.
Spilling for insn 2801.
Using reg 1 for reload 0
Spilling for insn 2802.
Using reg 1 for reload 0
Spilling for insn 2804.
Using reg 1 for reload 0
Spilling for insn 2755.
Spilling for insn 2834.
Spilling for insn 3222.
Spilling for insn 2950.
Spilling for insn 2957.
Spilling for insn 2873.
Using reg 0 for reload 0
Spilling for insn 2874.
Spilling for insn 2876.
Using reg 0 for reload 0
Spilling for insn 2883.
Spilling for insn 2884.
Spilling for insn 2886.
Using reg 0 for reload 0
Spilling for insn 2887.
Using reg 0 for reload 0
Spilling for insn 2890.
Spilling for insn 2892.
Using reg 0 for reload 0
Spilling for insn 2894.
Using reg 0 for reload 0
Spilling for insn 2901.
Spilling for insn 2902.
Spilling for insn 2904.
Using reg 0 for reload 0
Spilling for insn 2905.
Using reg 0 for reload 0
Spilling for insn 2908.
Spilling for insn 2910.
Using reg 0 for reload 0
Spilling for insn 2912.
Using reg 0 for reload 0
Spilling for insn 2923.
Using reg 0 for reload 0
Spilling for insn 2927.
Spilling for insn 2928.
Using reg 0 for reload 0
Spilling for insn 2930.
Using reg 0 for reload 0
Spilling for insn 2940.
Using reg 0 for reload 0
Spilling for insn 2941.
Spilling for insn 2943.
Using reg 0 for reload 0
Spilling for insn 2843.
Spilling for insn 3227.
Spilling for insn 3372.
Using reg 0 for reload 0
Spilling for insn 3232.
Spilling for insn 3366.
Using reg 0 for reload 0
Spilling for insn 3369.
Spilling for insn 3001.
Spilling for insn 3005.
Spilling for insn 3027.
Using reg 1 for reload 0
Spilling for insn 3028.
Using reg 1 for reload 0
Spilling for insn 3030.
Using reg 1 for reload 0
Spilling for insn 2981.
Spilling for insn 3060.
Spilling for insn 3066.
Spilling for insn 3068.
Spilling for insn 3074.
Spilling for insn 3076.
Spilling for insn 3080.
Spilling for insn 3082.
Spilling for insn 3084.
Spilling for insn 3092.
Spilling for insn 3098.
Spilling for insn 3100.
Spilling for insn 3106.
;; Register dispositions:
43 in 3  45 in 4  46 in 5  47 in 2  50 in 2  51 in 1  
52 in 3  73 in 0  74 in 0  75 in 8  76 in 0  78 in 0  
81 in 1  82 in 1  83 in 0  91 in 1  92 in 0  97 in 0  
101 in 1  106 in 1  107 in 3  108 in 2  109 in 2  110 in 0  
111 in 0  116 in 0  117 in 3  118 in 2  119 in 2  120 in 0  
121 in 0  126 in 0  127 in 3  128 in 2  129 in 2  130 in 0  
131 in 0  136 in 0  137 in 3  138 in 2  139 in 2  140 in 0  
141 in 0  146 in 0  147 in 3  148 in 2  149 in 2  150 in 0  
151 in 0  156 in 0  157 in 3  158 in 2  159 in 2  160 in 0  
161 in 0  166 in 0  167 in 3  168 in 2  169 in 2  170 in 0  
171 in 0  176 in 0  177 in 3  178 in 2  179 in 2  180 in 0  
181 in 0  186 in 0  187 in 3  188 in 2  189 in 2  190 in 0  
191 in 0  196 in 0  197 in 0  201 in 0  202 in 0  207 in 3  
209 in 2  210 in 1  216 in 0  217 in 3  219 in 0  220 in 1  
221 in 0  224 in 0  226 in 0  228 in 0  231 in 3  232 in 3  
233 in 3  234 in 0  236 in 0  241 in 0  243 in 0  245 in 0  
246 in 1  247 in 1  253 in 1  259 in 1  265 in 0  267 in 0  
269 in 0  270 in 1  271 in 1  277 in 1  283 in 1  289 in 0  
290 in 3  291 in 0  293 in 2  294 in 2  295 in 0  296 in 0  
300 in 0  302 in 3  303 in 3  304 in 1  306 in 0  312 in 1  
313 in 0  321 in 8  323 in 9  324 in 8  325 in 0  333 in 9  
336 in 9  337 in 1  339 in 0  340 in 0  347 in 0  350 in 0  
351 in 0  352 in 0  354 in 0  356 in 0  358 in 0  360 in 0  
362 in 0  364 in 0  366 in 0  368 in 0  370 in 0  372 in 0  
374 in 0  376 in 0  378 in 0  380 in 0  381 in 0  383 in 1  
384 in 0  387 in 0  389 in 0  391 in 0  393 in 0  395 in 0  
397 in 0  399 in 0  401 in 0  403 in 0  405 in 0  407 in 0  
409 in 0  410 in 0  411 in 0  413 in 0  414 in 0  415 in 0  
416 in 0  418 in 1  419 in 0  425 in 0  426 in 0  430 in 8  
431 in 8  432 in 0  433 in 0  437 in 8  438 in 8  439 in 8  
441 in 8  442 in 8  444 in 8  445 in 0  446 in 0  450 in 8  
451 in 8  452 in 0  453 in 0  457 in 8  458 in 8  459 in 8  
460 in 0  461 in 0  465 in 8  466 in 8  467 in 0  470 in 0  
471 in 0  473 in 8  475 in 2  476 in 2  477 in 2  478 in 8  
479 in 0  481 in 0  482 in 10  484 in 3  485 in 0  486 in 0  
487 in 0  488 in 9  489 in 10  490 in 8  492 in 0  493 in 8  
495 in 8  496 in 8  497 in 2  498 in 0  499 in 0  500 in 0  
502 in 0  503 in 0  504 in 8  505 in 8  506 in 8  507 in 8  
508 in 8  509 in 8  510 in 8  511 in 2  512 in 0  513 in 0  
515 in 1  516 in 0  517 in 0  518 in 8  519 in 0  520 in 8  
521 in 8  522 in 8  523 in 8  524 in 8  525 in 8  526 in 8  
527 in 2  528 in 0  529 in 0  531 in 1  532 in 0  533 in 0  
534 in 8  535 in 0  536 in 0  537 in 0  539 in 1  540 in 0  
541 in 2  542 in 9  544 in 9  554 in 8  555 in 8  564 in 8  
565 in 9  566 in 0  567 in 0  568 in 0  570 in 1  571 in 0  
572 in 1  573 in 10  575 in 10  590 in 0  591 in 8  592 in 8  
600 in 8  608 in 8  610 in 9  611 in 8  619 in 8  627 in 8  
628 in 10  629 in 0  630 in 0  631 in 2  632 in 0  633 in 0  
635 in 1  636 in 0  637 in 0  638 in 8  640 in 8  641 in 0  
642 in 2  643 in 0  644 in 0  646 in 1  647 in 0  648 in 0  
656 in 8  658 in 8  664 in 8  665 in 8  666 in 9  667 in 9  
668 in 8  669 in 8  670 in 8  672 in 9  673 in 9  674 in 9  
675 in 9  676 in 8  677 in 8  678 in 8  680 in 9  681 in 9  
682 in 8  683 in 8  684 in 8  685 in 8  686 in 8  687 in 0  
690 in 2  691 in 0  692 in 0  694 in 1  695 in 0  696 in 0  
704 in 8  706 in 8  707 in 9  708 in 8  711 in 0  712 in 0  
713 in 0  714 in 0  715 in 0  716 in 9  717 in 3  719 in 9  
720 in 3  722 in 3  723 in 11  724 in 13  725 in 12  729 in 15  
730 in 14  733 in 2  735 in 3  736 in 9  

;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

(note 2 0 3237 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 3237 2 6 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 6 3237 7 (set (reg/v:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)
        (nil)))

(note 7 6 10 NOTE_INSN_FUNCTION_BEG 0)

(note 10 7 14 0x401a6e60 NOTE_INSN_BLOCK_BEG 0)

(note 14 10 3934 NOTE_INSN_DELETED 0)

(insn 3934 14 3935 (set (reg:SI 0 eax)
        (const_int -1577058304 [0xa2000000])) -1 (nil)
    (nil))

(insn 3935 3934 3936 (set (reg:SI 1 edx)
        (const_int 1114446484 [0x426d1a94])) -1 (nil)
    (nil))

(insn 3936 3935 3937 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3937 3936 20 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 20 3937 22 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 22 20 24 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC36"))) 27 {pushsi2} (insn_list 20 (nil))
    (nil))

(insn 24 22 25 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg/v:SI 3 ebx)
                (const_int 4 [0x4])) 0)) 27 {pushsi2} (insn_list 6 (nil))
    (nil))

(call_insn 25 24 27 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fopen")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 27 25 29 NOTE_INSN_DELETED 1075590800)

(insn 29 27 32 (set (mem/f:SI (symbol_ref:SI ("in_fp")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 27 (nil))
    (nil))

(insn 32 29 34 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 34 32 36 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC37"))) 27 {pushsi2} (insn_list 32 (nil))
    (nil))

(insn 36 34 37 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg/v:SI 3 ebx)
                (const_int 8 [0x8])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 37 36 39 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fopen")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 39 37 41 NOTE_INSN_DELETED 1075590528)

(insn 41 39 44 (set (mem/f:SI (symbol_ref:SI ("out_fp")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 39 (nil))
    (nil))

(insn 44 41 46 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 46 44 48 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg/v:SI 3 ebx)
                (const_int 4 [0x4])) 0)) 27 {pushsi2} (insn_list 44 (nil))
    (nil))

(insn 48 46 49 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("outfault"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 49 48 52 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("strcpy")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 52 49 54 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 54 52 56 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC38"))) 27 {pushsi2} (insn_list 52 (nil))
    (nil))

(insn 56 54 57 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("outfault"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 57 56 60 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("strtok")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 60 57 62 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 62 60 64 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC39"))) 27 {pushsi2} (insn_list 60 (nil))
    (nil))

(insn 64 62 65 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("outfault"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 65 64 68 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("strcat")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 68 65 70 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 70 68 72 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("outfault"))) 27 {pushsi2} (insn_list 68 (nil))
    (nil))

(insn 72 70 73 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC40"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 73 72 76 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 76 73 3938 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3938 76 3939 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int -1074790400 [0xbff00000])) -1 (nil)
    (nil))

(insn 3939 3938 79 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(call_insn 79 3939 81 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("acos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 81 79 83 NOTE_INSN_DELETED 1075589344)

(insn 83 81 86 (set (mem/f:DF (symbol_ref:SI ("pi")) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 81 (nil))
    (nil))

(insn 86 83 88 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 88 86 90 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("nfaults"))) 27 {pushsi2} (insn_list 86 (nil))
    (nil))

(insn 90 88 92 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC41"))) 27 {pushsi2} (nil)
    (nil))

(insn 92 90 93 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 93 92 96 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 96 93 98 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 98 96 100 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("nfaults")) 0)) 27 {pushsi2} (insn_list 96 (nil))
    (nil))

(insn 100 98 101 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC42"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 101 100 104 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 104 101 106 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 106 104 108 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 96 [0x60])) 27 {pushsi2} (insn_list 104 (nil))
    (nil))

(insn 108 106 109 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("nfaults")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 109 108 111 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 111 109 115 NOTE_INSN_DELETED 1075588640)

(insn 115 111 118 (set (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 111 (nil))
    (nil))

(insn 118 115 121 (set (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 121 118 123 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 123 121 3116 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3116 123 3117 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("nfaults")) 0))) 2 {*cmpsi_1_insn} (insn_list 121 (nil))
    (nil))

(jump_insn 3117 3116 124 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 612)
            (pc))) 288 {*jcc_1} (insn_list 3116 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 7 [sp] 20 [frame] 45 55

(note 124 3117 130 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 45 55
(code_label 130 124 3238 156 "" "" [1 uses])

(note 3238 130 135 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 135 3238 139 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 139 135 141 NOTE_INSN_DELETED 0)

(insn 141 139 143 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 143 141 3930 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 141 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(insn 3930 143 3931 (set (mem/s:SI (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 3931 3930 148 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)
        (const_int 1072693248 [0x3ff00000])) -1 (nil)
    (nil))

(insn 148 3931 3932 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 3932 148 3933 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 0 eax))
                (const_int 8 [0x8])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 3933 3932 161 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 0 eax))
                (const_int 12 [0xc])) 0)
        (const_int 1072693248 [0x3ff00000])) -1 (nil)
    (nil))

(insn 161 3933 162 (set (reg/v:SI 5 edi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 1, registers live:
 7 [sp] 20 [frame] 45 46 55

(note 162 161 168 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 168 162 3239 160 "" "" [1 uses])

(note 3239 168 173 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 173 3239 3355 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3355 173 175 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -20 [0xffffffec]))) 113 {*lea_0} (nil)
    (nil))

(insn 175 3355 177 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 173 (insn_list 3355 (nil)))
    (nil))

(insn 177 175 179 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC41"))) 27 {pushsi2} (nil)
    (nil))

(insn 179 177 180 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 180 179 185 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 185 180 187 NOTE_INSN_DELETED 0)

(insn 187 185 189 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 189 187 3457 NOTE_INSN_DELETED 0)

(insn 3457 189 190 (set (reg:SI 0 eax)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 190 3457 191 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 187 (nil))
    (nil))

(note 191 190 195 NOTE_INSN_DELETED 0)

(note 195 191 197 NOTE_INSN_DELETED 0)

(insn 197 195 199 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 8 [0x8]))
            (const:SI (plus:SI (symbol_ref:SI ("guess"))
                    (const_int -8 [0xfffffff8]))))) 113 {*lea_0} (insn_list 190 (nil))
    (nil))

(insn 199 197 207 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 197 (nil))
    (nil))

(note 207 199 208 NOTE_INSN_DELETED 0)

(insn 208 207 209 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 209 208 213 NOTE_INSN_DELETED 0)

(note 213 209 215 NOTE_INSN_DELETED 0)

(insn 215 213 217 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 1 edx)
                (const_int 4 [0x4]))
            (const:SI (plus:SI (symbol_ref:SI ("nactive"))
                    (const_int -4 [0xfffffffc]))))) 113 {*lea_0} (insn_list 208 (nil))
    (nil))

(insn 217 215 219 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 215 (nil))
    (nil))

(insn 219 217 221 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC43"))) 27 {pushsi2} (nil)
    (nil))

(insn 221 219 222 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 222 221 225 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 225 222 521 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 521 225 3460 NOTE_INSN_DELETED 0)

(insn 3460 521 522 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 522 3460 523 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 523 522 524 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 522 (nil))
    (nil))

(jump_insn 524 523 3240 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 534)
            (pc))) 288 {*jcc_1} (insn_list 523 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2, registers live:
 7 [sp] 20 [frame] 45 46 55 197

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 45 46 55 197
(note 3240 524 526 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(note 526 3240 528 NOTE_INSN_DELETED 0)

(note 528 526 529 NOTE_INSN_DELETED 0)

(jump_insn 529 528 530 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 531)) 0))
            (use (label_ref 531))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 531 (nil)))
;; End of basic block 3, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 530 529 531)

;; Insn is not within a basic block
(code_label 531 530 532 171 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 532 531 533 (addr_vec:SI[ 
            (label_ref:SI 230)
            (label_ref:SI 262)
            (label_ref:SI 294)
            (label_ref:SI 326)
            (label_ref:SI 358)
            (label_ref:SI 390)
            (label_ref:SI 422)
            (label_ref:SI 454)
            (label_ref:SI 486)
        ] ) -1 (nil)
    (nil))

(barrier 533 532 227)

(note 227 533 230 ("simplexfd.c") 189 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 230 227 3241 162 "" "" [1 uses])

(note 3241 230 233 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 233 3241 237 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 237 233 239 NOTE_INSN_DELETED 0)

(insn 239 237 241 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 241 239 245 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 239 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 245 241 247 NOTE_INSN_DELETED 0)

(insn 247 245 249 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 249 247 250 NOTE_INSN_DELETED 0)

(insn 250 249 251 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 247 (nil))
    (nil))

(note 251 250 253 NOTE_INSN_DELETED 0)

(note 253 251 255 NOTE_INSN_DELETED 0)

(note 255 253 3926 NOTE_INSN_DELETED 0)

(insn 3926 255 3927 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3927 3926 3928 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3928 3927 3929 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 24 [0x18])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3929 3928 260 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 28 [0x1c])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 260 3929 261 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 261 260 262)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 262 261 3242 163 "" "" [1 uses])

(note 3242 262 265 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 265 3242 269 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 269 265 271 NOTE_INSN_DELETED 0)

(insn 271 269 273 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 273 271 277 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 271 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 277 273 279 NOTE_INSN_DELETED 0)

(insn 279 277 281 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 281 279 282 NOTE_INSN_DELETED 0)

(insn 282 281 283 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 279 (nil))
    (nil))

(note 283 282 285 NOTE_INSN_DELETED 0)

(note 285 283 287 NOTE_INSN_DELETED 0)

(note 287 285 3922 NOTE_INSN_DELETED 0)

(insn 3922 287 3923 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3923 3922 3924 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3924 3923 3925 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 16 [0x10])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3925 3924 292 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 20 [0x14])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 292 3925 293 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 5, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 293 292 294)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 294 293 3243 164 "" "" [1 uses])

(note 3243 294 297 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 297 3243 301 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 301 297 303 NOTE_INSN_DELETED 0)

(insn 303 301 305 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 305 303 309 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 303 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 309 305 311 NOTE_INSN_DELETED 0)

(insn 311 309 313 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 313 311 314 NOTE_INSN_DELETED 0)

(insn 314 313 315 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 311 (nil))
    (nil))

(note 315 314 317 NOTE_INSN_DELETED 0)

(note 317 315 319 NOTE_INSN_DELETED 0)

(note 319 317 3918 NOTE_INSN_DELETED 0)

(insn 3918 319 3919 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3919 3918 3920 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3920 3919 3921 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 32 [0x20])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3921 3920 324 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 36 [0x24])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 324 3921 325 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 325 324 326)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 326 325 3244 165 "" "" [1 uses])

(note 3244 326 329 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 329 3244 333 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 333 329 335 NOTE_INSN_DELETED 0)

(insn 335 333 337 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 337 335 341 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 335 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 341 337 343 NOTE_INSN_DELETED 0)

(insn 343 341 345 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 345 343 346 NOTE_INSN_DELETED 0)

(insn 346 345 347 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 343 (nil))
    (nil))

(note 347 346 349 NOTE_INSN_DELETED 0)

(note 349 347 351 NOTE_INSN_DELETED 0)

(note 351 349 3914 NOTE_INSN_DELETED 0)

(insn 3914 351 3915 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3915 3914 3916 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3916 3915 3917 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 48 [0x30])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3917 3916 356 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 52 [0x34])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 356 3917 357 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 357 356 358)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 358 357 3245 166 "" "" [1 uses])

(note 3245 358 361 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 361 3245 365 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 365 361 367 NOTE_INSN_DELETED 0)

(insn 367 365 369 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 369 367 373 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 367 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 373 369 375 NOTE_INSN_DELETED 0)

(insn 375 373 377 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 377 375 378 NOTE_INSN_DELETED 0)

(insn 378 377 379 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 375 (nil))
    (nil))

(note 379 378 381 NOTE_INSN_DELETED 0)

(note 381 379 383 NOTE_INSN_DELETED 0)

(note 383 381 3910 NOTE_INSN_DELETED 0)

(insn 3910 383 3911 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3911 3910 3912 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3912 3911 3913 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 40 [0x28])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3913 3912 388 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 44 [0x2c])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 388 3913 389 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 8, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 389 388 390)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 390 389 3246 167 "" "" [1 uses])

(note 3246 390 393 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 393 3246 397 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 397 393 399 NOTE_INSN_DELETED 0)

(insn 399 397 401 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 401 399 405 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 399 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 405 401 407 NOTE_INSN_DELETED 0)

(insn 407 405 409 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 409 407 410 NOTE_INSN_DELETED 0)

(insn 410 409 411 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 407 (nil))
    (nil))

(note 411 410 413 NOTE_INSN_DELETED 0)

(note 413 411 415 NOTE_INSN_DELETED 0)

(note 415 413 3906 NOTE_INSN_DELETED 0)

(insn 3906 415 3907 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3907 3906 3908 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3908 3907 3909 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 64 [0x40])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3909 3908 420 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 68 [0x44])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 420 3909 421 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 421 420 422)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 422 421 3247 168 "" "" [1 uses])

(note 3247 422 425 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 425 3247 429 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 429 425 431 NOTE_INSN_DELETED 0)

(insn 431 429 433 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 433 431 437 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 431 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 437 433 439 NOTE_INSN_DELETED 0)

(insn 439 437 441 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 441 439 442 NOTE_INSN_DELETED 0)

(insn 442 441 443 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 439 (nil))
    (nil))

(note 443 442 445 NOTE_INSN_DELETED 0)

(note 445 443 447 NOTE_INSN_DELETED 0)

(note 447 445 3902 NOTE_INSN_DELETED 0)

(insn 3902 447 3903 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3903 3902 3904 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3904 3903 3905 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 56 [0x38])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3905 3904 452 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 60 [0x3c])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 452 3905 453 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 10, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 453 452 454)

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 454 453 3248 169 "" "" [1 uses])

(note 3248 454 457 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 457 3248 461 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 461 457 463 NOTE_INSN_DELETED 0)

(insn 463 461 465 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 465 463 469 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 463 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 469 465 471 NOTE_INSN_DELETED 0)

(insn 471 469 473 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 473 471 474 NOTE_INSN_DELETED 0)

(insn 474 473 475 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 471 (nil))
    (nil))

(note 475 474 477 NOTE_INSN_DELETED 0)

(note 477 475 479 NOTE_INSN_DELETED 0)

(note 479 477 3898 NOTE_INSN_DELETED 0)

(insn 3898 479 3899 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3899 3898 3900 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3900 3899 3901 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 72 [0x48])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3901 3900 484 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 76 [0x4c])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 484 3901 485 (set (pc)
        (label_ref 534)) 296 {jump} (nil)
    (nil))
;; End of basic block 11, registers live:
 7 [sp] 20 [frame] 45 46 55

(barrier 485 484 486)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 486 485 3249 170 "" "" [1 uses])

(note 3249 486 489 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 489 3249 493 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 493 489 495 NOTE_INSN_DELETED 0)

(insn 495 493 497 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 497 495 501 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 495 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 501 497 503 NOTE_INSN_DELETED 0)

(insn 503 501 505 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 505 503 506 NOTE_INSN_DELETED 0)

(insn 506 505 507 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 503 (nil))
    (nil))

(note 507 506 509 NOTE_INSN_DELETED 0)

(note 509 507 511 NOTE_INSN_DELETED 0)

(note 511 509 3894 NOTE_INSN_DELETED 0)

(insn 3894 511 3895 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -4 [0xfffffffc])))) 0)) -1 (nil)
    (nil))

(insn 3895 3894 3896 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) -1 (nil)
    (nil))

(insn 3896 3895 3897 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 80 [0x50])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3897 3896 534 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 84 [0x54])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))
;; End of basic block 12, registers live:
 7 [sp] 20 [frame] 45 46 55

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 534 3897 3250 161 "" "" [9 uses])

(note 3250 534 539 [bb 13] NOTE_INSN_BASIC_BLOCK 0)

(note 539 3250 541 NOTE_INSN_DELETED 0)

(insn 541 539 543 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 8 [0x8]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(note 543 541 544 NOTE_INSN_DELETED 0)

(insn 544 543 545 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 541 (nil))
    (nil))

(note 545 544 547 NOTE_INSN_DELETED 0)

(note 547 545 549 NOTE_INSN_DELETED 0)

(note 549 547 550 NOTE_INSN_DELETED 0)

(insn 550 549 551 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (const:SI (plus:SI (symbol_ref:SI ("nactive"))
                            (const_int -4 [0xfffffffc])))) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (insn_list 544 (nil))
    (nil))

(jump_insn 551 550 3251 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 590)
            (pc))) 288 {*jcc_1} (insn_list 550 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 13, registers live:
 7 [sp] 20 [frame] 45 46 55

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 45 46 55
(note 3251 551 556 [bb 14] NOTE_INSN_BASIC_BLOCK 0)

(insn 556 3251 560 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 560 556 562 (set (reg:SI 2 ecx)
        (mult:SI (reg:SI 3 ebx)
            (const_int 8 [0x8]))) -1 (insn_list 556 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 3 ebx)
            (const_int 8 [0x8]))
        (nil)))

(insn 562 560 564 (set (reg:SI 1 edx)
        (symbol_ref:SI ("lookup"))) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (symbol_ref:SI ("lookup"))
        (nil)))

(insn 564 562 573 (set (mem/s:SI (plus:SI (reg:SI 1 edx)
                (reg:SI 2 ecx)) 0)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (insn_list 560 (insn_list 562 (nil)))
    (nil))

(note 573 564 577 NOTE_INSN_DELETED 0)

(insn 577 573 578 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)
        (nil)))

(insn 578 577 582 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 577 (nil))
    (nil))

(insn 582 578 584 (parallel[ 
            (set (reg:SI 3 ebx)
                (plus:SI (reg:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 584 582 589 (set (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (reg:SI 3 ebx)) 33 {*movsi_1} (insn_list 582 (nil))
    (expr_list:REG_EQUAL (plus:SI (mem/f:SI (symbol_ref:SI ("ndim")) 0)
            (const_int 1 [0x1]))
        (nil)))
;; End of basic block 14, registers live:
 7 [sp] 20 [frame] 45 46 55

(note 589 584 590 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 15, registers live: 6 [bp] 7 [sp] 45 46 55
(code_label 590 589 3252 159 "" "" [1 uses])

(note 3252 590 592 [bb 15] NOTE_INSN_BASIC_BLOCK 0)

(insn 592 3252 3125 (parallel[ 
            (set (reg/v:SI 5 edi)
                (plus:SI (reg/v:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3125 592 164 NOTE_INSN_LOOP_VTOP 0)

(insn 164 3125 165 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 592 (nil))
    (nil))

(jump_insn 165 164 598 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 168)
            (pc))) 288 {*jcc_1} (insn_list 164 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15, registers live:
 7 [sp] 20 [frame] 45 46 55

(note 598 165 602 NOTE_INSN_LOOP_END 0)

(note 602 598 3253 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 45 55
(note 3253 602 605 [bb 16] NOTE_INSN_BASIC_BLOCK 0)

(insn 605 3253 3120 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3120 605 126 NOTE_INSN_LOOP_VTOP 0)

(insn 126 3120 127 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("nfaults")) 0))) 2 {*cmpsi_1_insn} (insn_list 605 (nil))
    (nil))

(jump_insn 127 126 611 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 130)
            (pc))) 288 {*jcc_1} (insn_list 126 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16, registers live:
 7 [sp] 20 [frame] 45 55

(note 611 127 612 NOTE_INSN_LOOP_END 0)

;; Start of basic block 17, registers live: 6 [bp] 7 [sp] 55
(code_label 612 611 3254 154 "" "" [1 uses])

(note 3254 612 615 [bb 17] NOTE_INSN_BASIC_BLOCK 0)

(insn 615 3254 616 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 616 615 618 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 1 edx)
            (const_int 1 [0x1]))) -1 (insn_list 615 (nil))
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("nverts")) 0)
        (expr_list:REG_EQUAL (plus:SI (mem/f:SI (symbol_ref:SI ("ndim")) 0)
                (const_int 1 [0x1]))
            (nil))))

(insn 618 616 621 (set (mem/f:SI (symbol_ref:SI ("nverts")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 616 (nil))
    (nil))

(insn 621 618 623 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 623 621 625 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 621 (nil))
    (nil))

(insn 625 623 626 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC44"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 626 625 629 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 629 626 632 (set (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 632 629 634 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 634 632 636 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("ndata"))) 27 {pushsi2} (insn_list 632 (nil))
    (nil))

(insn 636 634 638 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC41"))) 27 {pushsi2} (nil)
    (nil))

(insn 638 636 639 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 639 638 642 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 642 639 643 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndata")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndata")) 0)
        (nil)))

(insn 643 642 646 (set (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 642 (nil))
    (nil))

(insn 646 643 648 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 648 646 3359 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("numtrials"))) 27 {pushsi2} (insn_list 646 (nil))
    (nil))

(insn 3359 648 650 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -24 [0xffffffe8]))) 113 {*lea_0} (nil)
    (nil))

(insn 650 3359 3361 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 3359 (nil))
    (nil))

(insn 3361 650 652 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -32 [0xffffffe0]))) 113 {*lea_0} (nil)
    (nil))

(insn 652 3361 654 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 3361 (nil))
    (nil))

(insn 654 652 656 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC45"))) 27 {pushsi2} (nil)
    (nil))

(insn 656 654 657 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 657 656 660 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 32 [0x20]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 660 657 662 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 662 660 664 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 660 (nil))
    (nil))

(insn 664 662 666 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndata")) 0)) 27 {pushsi2} (insn_list 662 (nil))
    (nil))

(insn 666 664 667 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC46"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 667 666 670 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 670 667 672 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 672 670 674 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 68 [0x44])) 27 {pushsi2} (insn_list 670 (nil))
    (nil))

(insn 674 672 675 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndata")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 675 674 677 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 677 675 681 NOTE_INSN_DELETED 1075580064)

(insn 681 677 684 (set (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 677 (nil))
    (nil))

(insn 684 681 686 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 686 684 688 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 48 [0x30])) 27 {pushsi2} (insn_list 684 (nil))
    (nil))

(insn 688 686 689 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndata")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 689 688 691 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 691 689 695 NOTE_INSN_DELETED 1075579792)

(insn 695 691 698 (set (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 691 (nil))
    (nil))

(insn 698 695 700 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 700 698 702 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 8 [0x8])) 27 {pushsi2} (insn_list 698 (nil))
    (nil))

(insn 702 700 703 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndata")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 703 702 705 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 705 703 709 NOTE_INSN_DELETED 1075579520)

(insn 709 705 712 (set (mem/f:SI (symbol_ref:SI ("origdata")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 705 (nil))
    (nil))

(insn 712 709 714 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 714 712 3126 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3126 714 3127 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 712 (nil))
    (nil))

(jump_insn 3127 3126 715 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1107)
            (pc))) 288 {*jcc_1} (insn_list 3126 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17, registers live:
 7 [sp] 20 [frame] 45 55

(note 715 3127 721 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 18, registers live: 6 [bp] 7 [sp] 45 55
(code_label 721 715 3255 179 "" "" [1 uses])

(note 3255 721 726 [bb 18] NOTE_INSN_BASIC_BLOCK 0)

(insn 726 3255 3463 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3463 726 730 (set (reg:SI 3 ebx)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 730 3463 732 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 732 730 734 (parallel[ 
            (set (reg:SI 3 ebx)
                (plus:SI (reg:SI 3 ebx)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 730 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(insn 734 732 736 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 732 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 68 [0x44]))
        (nil)))

(note 736 734 3466 NOTE_INSN_DELETED 0)

(insn 3466 736 737 (set (reg:SI 0 eax)
        (reg:SI 3 ebx)) 33 {*movsi_1} (nil)
    (nil))

(insn 737 3466 739 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("obs")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 734 (nil))
    (nil))

(insn 739 737 741 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 726 (insn_list 737 (nil)))
    (nil))

(insn 741 739 743 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC41"))) 27 {pushsi2} (nil)
    (nil))

(insn 743 741 744 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 744 743 747 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 747 744 757 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 757 747 758 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (reg:SI 3 ebx)
                (reg:SI 0 eax)) 0)) 33 {*movsi_1} (insn_list 747 (nil))
    (nil))

(insn 758 757 759 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 eax)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (insn_list 757 (nil))
    (nil))

(jump_insn 759 758 3256 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 762)
            (pc))) 288 {*jcc_1} (insn_list 758 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 18, registers live:
 7 [sp] 20 [frame] 45 55 241

;; Start of basic block 19, registers live: 6 [bp] 7 [sp] 45 55 241
(note 3256 759 761 [bb 19] NOTE_INSN_BASIC_BLOCK 0)

(insn 761 3256 762 (parallel[ 
            (set (reg:SI 0 eax)
                (neg:SI (reg:SI 0 eax)))
            (clobber (reg:CC 17 flags))
        ] ) 203 {*negsi2_1} (nil)
    (nil))
;; End of basic block 19, registers live:
 7 [sp] 20 [frame] 45 55 241

;; Start of basic block 20, registers live: 6 [bp] 7 [sp] 45 55 241
(code_label 762 761 3257 181 "" "" [1 uses])

(note 3257 762 764 [bb 20] NOTE_INSN_BASIC_BLOCK 0)

(insn 764 3257 765 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 765 764 766 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 766 765 3258 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 839)
            (pc))) 288 {*jcc_1} (insn_list 765 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 20, registers live:
 7 [sp] 20 [frame] 45 55

;; Start of basic block 21, registers live: 6 [bp] 7 [sp] 45 55
(note 3258 766 769 [bb 21] NOTE_INSN_BASIC_BLOCK 0)

(insn 769 3258 3469 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3469 769 773 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 773 3469 775 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 775 773 777 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 773 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(note 777 775 779 NOTE_INSN_DELETED 0)

(insn 779 777 780 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 780 779 782 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 4 [0x4]))
            (reg:SI 1 edx))) 113 {*lea_0} (insn_list 775 (insn_list 779 (nil)))
    (nil))

(insn 782 780 784 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 36 [0x24]))) -1 (insn_list 780 (nil))
    (nil))

(insn 784 782 797 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 769 (insn_list 782 (nil)))
    (nil))

(insn 797 784 799 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 28 [0x1c]))) -1 (nil)
    (nil))

(insn 799 797 812 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 797 (nil))
    (nil))

(insn 812 799 814 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 814 812 827 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 812 (nil))
    (nil))

(insn 827 814 829 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 829 827 831 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 827 (nil))
    (nil))

(insn 831 829 833 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC47"))) 27 {pushsi2} (nil)
    (nil))

(insn 833 831 834 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 834 833 836 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 32 [0x20]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 836 834 837 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 837 836 838 (set (pc)
        (label_ref 910)) 296 {jump} (nil)
    (nil))
;; End of basic block 21, registers live:
 7 [sp] 20 [frame] 45 55

(barrier 838 837 839)

;; Start of basic block 22, registers live: 6 [bp] 7 [sp] 45 55
(code_label 839 838 3259 180 "" "" [1 uses])

(note 3259 839 842 [bb 22] NOTE_INSN_BASIC_BLOCK 0)

(insn 842 3259 3472 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3472 842 846 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 846 3472 848 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 848 846 850 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 846 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(note 850 848 852 NOTE_INSN_DELETED 0)

(insn 852 850 853 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 853 852 855 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 4 [0x4]))
            (reg:SI 1 edx))) 113 {*lea_0} (insn_list 848 (insn_list 852 (nil)))
    (nil))

(insn 855 853 857 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 36 [0x24]))) -1 (insn_list 853 (nil))
    (nil))

(insn 857 855 870 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 842 (insn_list 855 (nil)))
    (nil))

(insn 870 857 872 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 28 [0x1c]))) -1 (nil)
    (nil))

(insn 872 870 885 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 870 (nil))
    (nil))

(insn 885 872 887 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 20 [0x14]))) -1 (nil)
    (nil))

(insn 887 885 900 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 885 (nil))
    (nil))

(insn 900 887 902 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 902 900 904 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 900 (nil))
    (nil))

(insn 904 902 906 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC48"))) 27 {pushsi2} (nil)
    (nil))

(insn 906 904 907 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 907 906 909 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 32 [0x20]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 909 907 910 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 22, registers live:
 7 [sp] 20 [frame] 45 55

;; Start of basic block 23, registers live: 6 [bp] 7 [sp] 45 55
(code_label 910 909 3260 182 "" "" [1 uses])

(note 3260 910 913 [bb 23] NOTE_INSN_BASIC_BLOCK 0)

(insn 913 3260 915 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("origdata")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("origdata")) 0)
        (nil)))

(insn 915 913 3475 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 3475 915 919 (set (reg:SI 2 ecx)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 919 3475 921 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 921 919 923 (parallel[ 
            (set (reg:SI 2 ecx)
                (plus:SI (reg:SI 2 ecx)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 919 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(insn 923 921 3882 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 921 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 68 [0x44]))
        (nil)))

(insn 3882 923 3883 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 0 eax))
                (const_int 32 [0x20])) 0)) -1 (nil)
    (nil))

(insn 3883 3882 3884 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 0 eax))
                (const_int 28 [0x1c])) 0)) -1 (nil)
    (nil))

(insn 3884 3883 3885 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3885 3884 929 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 929 3885 939 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 939 929 940 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (reg:SI 2 ecx)
                (reg:SI 0 eax)) 0)) 33 {*movsi_1} (insn_list 929 (nil))
    (nil))

(insn 940 939 941 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 eax)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (insn_list 939 (nil))
    (nil))

(jump_insn 941 940 3261 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 944)
            (pc))) 288 {*jcc_1} (insn_list 940 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 23, registers live:
 7 [sp] 20 [frame] 45 55 300

;; Start of basic block 24, registers live: 6 [bp] 7 [sp] 45 55 300
(note 3261 941 943 [bb 24] NOTE_INSN_BASIC_BLOCK 0)

(insn 943 3261 944 (parallel[ 
            (set (reg:SI 0 eax)
                (neg:SI (reg:SI 0 eax)))
            (clobber (reg:CC 17 flags))
        ] ) 203 {*negsi2_1} (nil)
    (nil))
;; End of basic block 24, registers live:
 7 [sp] 20 [frame] 45 55 300

;; Start of basic block 25, registers live: 6 [bp] 7 [sp] 45 55 300
(code_label 944 943 3262 184 "" "" [1 uses])

(note 3262 944 945 [bb 25] NOTE_INSN_BASIC_BLOCK 0)

(insn 945 3262 946 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 eax)
            (const_int 7 [0x7]))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 946 945 3263 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1046)
            (pc))) 288 {*jcc_1} (insn_list 945 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 25, registers live:
 7 [sp] 20 [frame] 45 55

;; Start of basic block 26, registers live: 6 [bp] 7 [sp] 45 55
(note 3263 946 3478 [bb 26] NOTE_INSN_BASIC_BLOCK 0)

(insn 3478 3263 953 (set (reg:SI 3 ebx)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 953 3478 955 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 955 953 957 (parallel[ 
            (set (reg:SI 3 ebx)
                (plus:SI (reg:SI 3 ebx)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 953 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(insn 957 955 959 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 955 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 68 [0x44]))
        (nil)))

(note 959 957 3481 NOTE_INSN_DELETED 0)

(insn 3481 959 960 (set (reg:SI 1 edx)
        (reg:SI 3 ebx)) 33 {*movsi_1} (nil)
    (nil))

(insn 960 3481 962 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (mem/f:SI (symbol_ref:SI ("obs")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 957 (nil))
    (nil))

(insn 962 960 964 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 1 edx)
            (const_int 60 [0x3c]))) -1 (insn_list 960 (nil))
    (nil))

(insn 964 962 977 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 962 (nil))
    (nil))

(insn 977 964 979 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (const_int 52 [0x34])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 979 977 981 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (insn_list 977 (nil))
    (nil))

(insn 981 979 983 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC49"))) 27 {pushsi2} (nil)
    (nil))

(insn 983 981 984 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("in_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 984 983 987 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fscanf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 987 984 1007 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(note 1007 987 1009 NOTE_INSN_DELETED 0)

(insn 1009 1007 3484 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC50")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC50")) 0) 0 [0x0] 0 [0x0] 1074181120 [0x4006b400])
        (nil)))

(insn 3484 1009 1010 (set (reg:DF 8 st(0))
        (mem/f:DF (symbol_ref:SI ("pi")) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1010 3484 1011 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 1009 (nil))
    (nil))

(insn 1011 1010 1013 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                        (reg:SI 0 eax))
                    (const_int 52 [0x34])) 0))) 314 {*fop_df_comm} (insn_list 987 (insn_list 1010 (nil)))
    (nil))

(insn 1013 1011 1016 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1011 (nil))
    (nil))

(insn 1016 1013 1036 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(note 1036 1016 1039 NOTE_INSN_DELETED 0)

(insn 1039 1036 1040 (set (reg:DF 9 st(1))
        (div:DF (mem/f:DF (symbol_ref:SI ("pi")) 0)
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1040 1039 1042 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                        (reg:SI 0 eax))
                    (const_int 60 [0x3c])) 0))) 314 {*fop_df_comm} (insn_list 1016 (insn_list 1039 (nil)))
    (nil))

(insn 1042 1040 1045 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 1040 (nil))
    (nil))

(insn 1045 1042 1046 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 26, registers live:
 7 [sp] 20 [frame] 45 55

;; Start of basic block 27, registers live: 6 [bp] 7 [sp] 45 55
(code_label 1046 1045 3264 183 "" "" [1 uses])

(note 3264 1046 1049 [bb 27] NOTE_INSN_BASIC_BLOCK 0)

(insn 1049 3264 3487 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3487 1049 1053 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 1053 3487 1055 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 1055 1053 1057 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1053 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(insn 1057 1055 1058 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1055 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 68 [0x44]))
        (nil)))

(insn 1058 1057 1059 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem/s:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (insn_list 1049 (insn_list 1057 (nil)))
    (nil))

(jump_insn 1059 1058 3265 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1098)
            (pc))) 288 {*jcc_1} (insn_list 1058 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 27, registers live:
 7 [sp] 20 [frame] 45 55 337 340

;; Start of basic block 28, registers live: 6 [bp] 7 [sp] 45 55 337 340
(note 3265 1059 1064 [bb 28] NOTE_INSN_BASIC_BLOCK 0)

(insn 1064 3265 1067 (set (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (nil))

(note 1067 1064 1068 NOTE_INSN_DELETED 0)

(note 1068 1067 1070 NOTE_INSN_DELETED 0)

(insn 1070 1068 1083 (parallel[ 
            (set (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)
                (plus:SI (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1083 1070 1084 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 33 {*movsi_1} (nil)
    (nil))

(note 1084 1083 3490 NOTE_INSN_DELETED 0)

(insn 3490 1084 1086 (set (reg/v:SI 5 edi)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 1086 3490 1088 (set (reg/v:SI 5 edi)
        (not:SI (reg/v:SI 5 edi))) 227 {*one_cmplsi2_1} (insn_list 1083 (nil))
    (nil))

(note 1088 1086 1090 NOTE_INSN_DELETED 0)

(note 1090 1088 1092 NOTE_INSN_DELETED 0)

(insn 1092 1090 1097 (set (mem/s:SI (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("rel_ref"))) 0)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (insn_list 1086 (nil))
    (nil))
;; End of basic block 28, registers live:
 7 [sp] 20 [frame] 45 55

(note 1097 1092 1098 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 29, registers live: 6 [bp] 7 [sp] 45 55
(code_label 1098 1097 3266 178 "" "" [1 uses])

(note 3266 1098 1100 [bb 29] NOTE_INSN_BASIC_BLOCK 0)

(insn 1100 3266 3130 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3130 1100 717 NOTE_INSN_LOOP_VTOP 0)

(insn 717 3130 718 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 1100 (nil))
    (nil))

(jump_insn 718 717 1106 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 721)
            (pc))) 288 {*jcc_1} (insn_list 717 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 29, registers live:
 7 [sp] 20 [frame] 45 55

(note 1106 718 1107 NOTE_INSN_LOOP_END 0)

;; Start of basic block 30, registers live: 6 [bp] 7 [sp] 55
(code_label 1107 1106 3267 177 "" "" [1 uses])

(note 3267 1107 1110 [bb 30] NOTE_INSN_BASIC_BLOCK 0)

(insn 1110 3267 1113 (set (mem/f:SI (symbol_ref:SI ("numtrials")) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (nil))

(insn 1113 1110 1115 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1115 1113 1117 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (insn_list 1113 (nil))
    (nil))

(insn 1117 1115 3879 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 3879 1117 3880 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) -1 (nil)
    (nil))

(insn 3880 3879 1121 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) -1 (nil)
    (nil))

(insn 1121 3880 1122 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC51"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 1122 1121 1125 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 32 [0x20]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1125 1122 1128 (set (mem/f:SI (symbol_ref:SI ("idum")) 0)
        (const_int -55555 [0xffff26fd])) 33 {*movsi_1} (nil)
    (nil))

(insn 1128 1125 1130 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1130 1128 1132 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1128 (nil))
    (nil))

(insn 1132 1130 1133 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("idum"))) 27 {pushsi2} (insn_list 1130 (nil))
    (nil))

(call_insn 1133 1132 1136 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1136 1133 1139 (set (mem/f:SI (symbol_ref:SI ("idum")) 0)
        (const_int 12345 [0x3039])) 33 {*movsi_1} (nil)
    (nil))

(insn 1139 1136 1141 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1141 1139 1142 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("nverts")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("nverts")) 0)
        (nil)))

(insn 1142 1141 1143 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 1141 (nil))
    (nil))

(insn 1143 1142 1145 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1142 (nil))
    (nil))

(insn 1145 1143 1147 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1139 (insn_list 1143 (nil)))
    (nil))

(insn 1147 1145 1148 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1148 1147 1150 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1150 1148 1155 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1148 (nil))
    (expr_list:REG_NOALIAS (reg:SI 353)
        (nil)))

(insn 1155 1150 1157 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1157 1155 1161 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1161 1157 1163 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1157 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1163 1161 1165 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1155 (insn_list 1161 (nil)))
    (nil))

(insn 1165 1163 1166 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1166 1165 1168 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1168 1166 1173 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1166 (nil))
    (expr_list:REG_NOALIAS (reg:SI 357)
        (nil)))

(insn 1173 1168 1175 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1175 1173 1179 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1179 1175 1181 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1175 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1181 1179 1183 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1173 (insn_list 1179 (nil)))
    (nil))

(insn 1183 1181 1184 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1184 1183 1186 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1186 1184 1191 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1184 (nil))
    (expr_list:REG_NOALIAS (reg:SI 361)
        (nil)))

(insn 1191 1186 1193 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1193 1191 1197 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1197 1193 1199 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1193 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1199 1197 1201 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1191 (insn_list 1197 (nil)))
    (nil))

(insn 1201 1199 1202 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1202 1201 1204 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1204 1202 1209 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1202 (nil))
    (expr_list:REG_NOALIAS (reg:SI 365)
        (nil)))

(insn 1209 1204 1211 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1211 1209 1215 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1215 1211 1217 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1211 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1217 1215 1219 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1209 (insn_list 1215 (nil)))
    (nil))

(insn 1219 1217 1220 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1220 1219 1222 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1222 1220 1227 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -60 [0xffffffc4])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1220 (nil))
    (expr_list:REG_NOALIAS (reg:SI 369)
        (nil)))

(insn 1227 1222 1229 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1229 1227 1233 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1233 1229 1235 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1229 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1235 1233 1237 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1227 (insn_list 1233 (nil)))
    (nil))

(insn 1237 1235 1238 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1238 1237 1240 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1240 1238 1245 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1238 (nil))
    (expr_list:REG_NOALIAS (reg:SI 373)
        (nil)))

(insn 1245 1240 1247 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1247 1245 1251 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("nverts")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("nverts")) 0)
        (nil)))

(insn 1251 1247 1253 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1247 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1253 1251 1255 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1245 (insn_list 1251 (nil)))
    (nil))

(insn 1255 1253 1256 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1256 1255 1258 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1258 1256 1263 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1256 (nil))
    (expr_list:REG_NOALIAS (reg:SI 377)
        (nil)))

(note 1263 1258 3493 NOTE_INSN_DELETED 0)

(insn 3493 1263 1264 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1264 3493 1265 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1265 1264 1267 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 1264 (nil))
    (nil))

(note 1267 1265 3496 NOTE_INSN_DELETED 0)

(insn 3496 1267 1269 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 1269 3496 1271 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 1265 (nil))
    (nil))

(insn 1271 1269 1273 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1269 (nil))
    (nil))

(insn 1273 1271 1275 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 1271 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 1275 1273 1278 (set (mem/f:SI (symbol_ref:SI ("nupper")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1273 (nil))
    (nil))

(insn 1278 1275 1284 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1284 1278 1286 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1286 1284 1288 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1278 (insn_list 1284 (nil)))
    (nil))

(insn 1288 1286 1289 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1289 1288 1291 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1291 1289 1296 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1289 (nil))
    (expr_list:REG_NOALIAS (reg:SI 388)
        (nil)))

(insn 1296 1291 1298 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1298 1296 1302 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("nupper")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("nupper")) 0)
        (nil)))

(insn 1302 1298 1304 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1298 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1304 1302 1306 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1296 (insn_list 1302 (nil)))
    (nil))

(insn 1306 1304 1307 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1307 1306 1309 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1309 1307 1314 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1307 (nil))
    (expr_list:REG_NOALIAS (reg:SI 392)
        (nil)))

(insn 1314 1309 1316 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1316 1314 1320 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("nupper")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("nupper")) 0)
        (nil)))

(insn 1320 1316 1322 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1316 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1322 1320 1324 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1314 (insn_list 1320 (nil)))
    (nil))

(insn 1324 1322 1325 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1325 1324 1327 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1327 1325 1332 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1325 (nil))
    (expr_list:REG_NOALIAS (reg:SI 396)
        (nil)))

(insn 1332 1327 1334 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1334 1332 1338 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("nupper")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("nupper")) 0)
        (nil)))

(insn 1338 1334 1340 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1334 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1340 1338 1342 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1332 (insn_list 1338 (nil)))
    (nil))

(insn 1342 1340 1343 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1343 1342 1345 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1345 1343 1350 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1343 (nil))
    (expr_list:REG_NOALIAS (reg:SI 400)
        (nil)))

(insn 1350 1345 1352 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1352 1350 1356 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1356 1352 1358 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1352 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1358 1356 1360 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1350 (insn_list 1356 (nil)))
    (nil))

(insn 1360 1358 1361 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1361 1360 1363 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1363 1361 1368 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1361 (nil))
    (expr_list:REG_NOALIAS (reg:SI 404)
        (nil)))

(insn 1368 1363 1370 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1370 1368 1374 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1374 1370 1376 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1370 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 1376 1374 1378 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1368 (insn_list 1374 (nil)))
    (nil))

(insn 1378 1376 1379 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1379 1378 1381 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1381 1379 1386 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1379 (nil))
    (expr_list:REG_NOALIAS (reg:SI 408)
        (nil)))

(insn 1386 1381 1388 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1388 1386 1389 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1389 1388 1390 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 1388 (nil))
    (nil))

(insn 1390 1389 1392 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1389 (nil))
    (nil))

(insn 1392 1390 1394 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1386 (insn_list 1390 (nil)))
    (nil))

(insn 1394 1392 1395 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1395 1394 1397 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1397 1395 1402 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -108 [0xffffff94])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1395 (nil))
    (expr_list:REG_NOALIAS (reg:SI 412)
        (nil)))

(insn 1402 1397 1404 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1404 1402 1405 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 1405 1404 1406 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("numtrials")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 1404 (nil))
    (nil))

(insn 1406 1405 1408 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1405 (nil))
    (nil))

(insn 1408 1406 1410 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1402 (insn_list 1406 (nil)))
    (nil))

(insn 1410 1408 1411 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 1411 1410 1413 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1413 1411 1417 NOTE_INSN_DELETED 1075570000)

(insn 1417 1413 1420 (set (mem/f:SI (symbol_ref:SI ("table")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 1413 (nil))
    (nil))

(insn 1420 1417 1422 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 1422 1420 3131 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3131 1422 3132 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1420 (nil))
    (nil))

(jump_insn 3132 3131 1423 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1683)
            (pc))) 288 {*jcc_1} (insn_list 3131 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 30, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(note 1423 3132 1429 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 31, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1429 1423 3268 190 "" "" [1 uses])

(note 3268 1429 1433 [bb 31] NOTE_INSN_BASIC_BLOCK 0)

(insn 1433 3268 1435 (set (reg:SI 1 edx)
        (mult:SI (reg/v:SI 4 esi)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 1435 1433 1437 (set (reg:SI 0 eax)
        (symbol_ref:SI ("lookup"))) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (symbol_ref:SI ("lookup"))
        (nil)))

(insn 1437 1435 1441 (set (reg/v:SI 2 ecx)
        (mem/s:SI (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 33 {*movsi_1} (insn_list 1433 (insn_list 1435 (nil)))
    (nil))

(note 1441 1437 1445 NOTE_INSN_DELETED 0)

(insn 1445 1441 1606 (set (reg/v:SI 1 edx)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1606 1445 1607 (set (reg:SI 0 eax)
        (plus:SI (reg/v:SI 1 edx)
            (const_int -1 [0xffffffff]))) -1 (insn_list 1445 (nil))
    (nil))

(insn 1607 1606 1608 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 1606 (nil))
    (nil))

(jump_insn 1608 1607 3269 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1618)
            (pc))) 288 {*jcc_1} (insn_list 1607 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 31, registers live:
 7 [sp] 20 [frame] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 467

;; Start of basic block 32, registers live: 6 [bp] 7 [sp] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 467
(note 3269 1608 1610 [bb 32] NOTE_INSN_BASIC_BLOCK 0)

(note 1610 3269 1612 NOTE_INSN_DELETED 0)

(note 1612 1610 1613 NOTE_INSN_DELETED 0)

(jump_insn 1613 1612 1614 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 1615)) 0))
            (use (label_ref 1615))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 1615 (nil)))
;; End of basic block 32, registers live:
 7 [sp] 20 [frame] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(barrier 1614 1613 1615)

;; Insn is not within a basic block
(code_label 1615 1614 1616 201 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 1616 1615 1617 (addr_vec:SI[ 
            (label_ref:SI 1452)
            (label_ref:SI 1452)
            (label_ref:SI 1475)
            (label_ref:SI 1510)
            (label_ref:SI 1547)
            (label_ref:SI 1547)
            (label_ref:SI 1547)
            (label_ref:SI 1580)
            (label_ref:SI 1580)
        ] ) -1 (nil)
    (nil))

(barrier 1617 1616 1448)

(note 1448 1617 1452 ("simplexfd.c") 327 0)

;; Start of basic block 33, registers live: 6 [bp] 7 [sp] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1452 1448 3270 193 "" "" [2 uses])

(note 3270 1452 1457 [bb 33] NOTE_INSN_BASIC_BLOCK 0)

(note 1457 3270 1459 NOTE_INSN_DELETED 0)

(insn 1459 1457 1461 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 2 ecx)
                (const_int 8 [0x8]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 1461 1459 1462 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1459 (nil))
    (nil))

(note 1462 1461 1464 NOTE_INSN_DELETED 0)

(note 1464 1462 1466 NOTE_INSN_DELETED 0)

(note 1466 1464 1468 NOTE_INSN_DELETED 0)

(insn 1468 1466 1469 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) 63 {*movdf_integer} (insn_list 1461 (nil))
    (nil))

(insn 1469 1468 3499 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 319 {*fop_df_1} (insn_list 1468 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 3499 1469 1471 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1471 3499 1473 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1469 (nil))
    (nil))

(jump_insn 1473 1471 1474 (set (pc)
        (label_ref 1618)) 296 {jump} (nil)
    (nil))
;; End of basic block 33, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(barrier 1474 1473 1475)

;; Start of basic block 34, registers live: 6 [bp] 7 [sp] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1475 1474 3271 194 "" "" [1 uses])

(note 3271 1475 1478 [bb 34] NOTE_INSN_BASIC_BLOCK 0)

(insn 1478 3271 1482 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1482 1478 1484 NOTE_INSN_DELETED 0)

(insn 1484 1482 1486 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 2 ecx)
                (const_int 8 [0x8]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 1486 1484 1487 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1484 (nil))
    (nil))

(note 1487 1486 1489 NOTE_INSN_DELETED 0)

(note 1489 1487 1491 NOTE_INSN_DELETED 0)

(note 1491 1489 1493 NOTE_INSN_DELETED 0)

(insn 1493 1491 1494 (set (reg:DF 8 st(0))
        (mem/f:DF (symbol_ref:SI ("pi")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (symbol_ref:SI ("pi")) 0)
        (nil)))

(insn 1494 1493 1496 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (const:SI (plus:SI (symbol_ref:SI ("guess"))
                            (const_int -8 [0xfffffff8])))) 0))) 314 {*fop_df_comm} (insn_list 1493 (insn_list 1486 (nil)))
    (nil))

(note 1496 1494 1497 NOTE_INSN_DELETED 0)

(insn 1497 1496 3875 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0))) 319 {*fop_df_1} (insn_list 1494 (nil))
    (nil))

(insn 3875 1497 3876 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 3876 3875 1500 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 1500 3876 1502 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("tan")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1502 1500 3502 NOTE_INSN_DELETED 1075568576)

(insn 3502 1502 1504 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1504 3502 1507 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1502 (nil))
    (nil))

(insn 1507 1504 1508 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 1508 1507 1509 (set (pc)
        (label_ref 1618)) 296 {jump} (nil)
    (nil))
;; End of basic block 34, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(barrier 1509 1508 1510)

;; Start of basic block 35, registers live: 6 [bp] 7 [sp] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1510 1509 3272 195 "" "" [1 uses])

(note 3272 1510 1513 [bb 35] NOTE_INSN_BASIC_BLOCK 0)

(insn 1513 3272 1515 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1515 1513 1517 NOTE_INSN_DELETED 0)

(insn 1517 1515 1518 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0) 0 [0x0] 0 [0x0] 1074246656 [0x4007b400])
        (nil)))

(insn 1518 1517 1522 (set (reg:DF 8 st(0))
        (div:DF (mem/f:DF (symbol_ref:SI ("pi")) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1517 (nil))
    (nil))

(note 1522 1518 1524 NOTE_INSN_DELETED 0)

(insn 1524 1522 1526 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 2 ecx)
                (const_int 8 [0x8]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 1526 1524 1527 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1524 (nil))
    (nil))

(note 1527 1526 1529 NOTE_INSN_DELETED 0)

(note 1529 1527 1531 NOTE_INSN_DELETED 0)

(note 1531 1529 1532 NOTE_INSN_DELETED 0)

(insn 1532 1531 3873 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (const:SI (plus:SI (symbol_ref:SI ("guess"))
                            (const_int -8 [0xfffffff8])))) 0))) 314 {*fop_df_comm} (insn_list 1518 (insn_list 1526 (nil)))
    (nil))

(insn 3873 1532 3874 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 3874 3873 1535 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 1535 3874 1537 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("tan")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1537 1535 3505 NOTE_INSN_DELETED 1075567856)

(insn 3505 1537 1539 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1539 3505 1542 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1537 (nil))
    (nil))

(insn 1542 1539 1543 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 1543 1542 1544 (set (pc)
        (label_ref 1618)) 296 {jump} (nil)
    (nil))
;; End of basic block 35, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(barrier 1544 1543 1547)

;; Start of basic block 36, registers live: 6 [bp] 7 [sp] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1547 1544 3273 198 "" "" [3 uses])

(note 3273 1547 1550 [bb 36] NOTE_INSN_BASIC_BLOCK 0)

(insn 1550 3273 1554 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1554 1550 1556 NOTE_INSN_DELETED 0)

(insn 1556 1554 1558 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 2 ecx)
                (const_int 8 [0x8]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 1558 1556 1559 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1556 (nil))
    (nil))

(note 1559 1558 1561 NOTE_INSN_DELETED 0)

(note 1561 1559 1563 NOTE_INSN_DELETED 0)

(note 1563 1561 1565 NOTE_INSN_DELETED 0)

(insn 1565 1563 1566 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) 63 {*movdf_integer} (insn_list 1558 (nil))
    (nil))

(insn 1566 1565 3871 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 319 {*fop_df_1} (insn_list 1565 (nil))
    (nil))

(insn 3871 1566 3872 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 3872 3871 1569 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 1569 3872 1571 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1571 1569 3508 NOTE_INSN_DELETED 1075567200)

(insn 3508 1571 1573 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1573 3508 1576 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1571 (nil))
    (nil))

(insn 1576 1573 1577 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 1577 1576 1578 (set (pc)
        (label_ref 1618)) 296 {jump} (nil)
    (nil))
;; End of basic block 36, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(barrier 1578 1577 1580)

;; Start of basic block 37, registers live: 6 [bp] 7 [sp] 45 50 51 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1580 1578 3274 200 "" "" [2 uses])

(note 3274 1580 1585 [bb 37] NOTE_INSN_BASIC_BLOCK 0)

(note 1585 3274 1587 NOTE_INSN_DELETED 0)

(insn 1587 1585 1589 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 2 ecx)
                (const_int 8 [0x8]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 1589 1587 1590 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1587 (nil))
    (nil))

(note 1590 1589 1592 NOTE_INSN_DELETED 0)

(note 1592 1590 1594 NOTE_INSN_DELETED 0)

(note 1594 1592 1596 NOTE_INSN_DELETED 0)

(insn 1596 1594 1597 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("guess"))
                        (const_int -8 [0xfffffff8])))) 0)) 63 {*movdf_integer} (insn_list 1589 (nil))
    (nil))

(insn 1597 1596 3511 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_slip")) 0))) 319 {*fop_df_1} (insn_list 1596 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 3511 1597 1599 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1599 3511 1618 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1597 (nil))
    (nil))
;; End of basic block 37, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

;; Start of basic block 38, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1618 1599 3275 191 "" "" [5 uses])

(note 3275 1618 1621 [bb 38] NOTE_INSN_BASIC_BLOCK 0)

(insn 1621 3275 3136 (set (reg/v:SI 5 edi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3136 1621 3137 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1621 (nil))
    (nil))

(jump_insn 3137 3136 3438 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1674)
            (pc))) 288 {*jcc_1} (insn_list 3136 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 38, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

;; Start of basic block 39, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(note 3438 3137 3429 [bb 39] NOTE_INSN_BASIC_BLOCK 0)

(insn 3429 3438 3430 (set (reg:SI 0 eax)
        (plus:SI (reg/v:SI 4 esi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3430 3429 3431 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 3429 (nil))
    (nil))

(insn 3431 3430 3514 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 3430 (nil))
    (nil))

(insn 3514 3431 3434 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -124 [0xffffff84])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 3434 3514 3437 (set (reg/v:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3437 3434 1622 (set (reg/v:DF 9 st(1))
        (mem/f:DF (symbol_ref:SI ("fuzz")) 0)) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 39, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736

(note 1622 3437 1628 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 40, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736
(code_label 1628 1622 3276 206 "" "" [1 uses])

(note 3276 1628 1632 [bb 40] NOTE_INSN_BASIC_BLOCK 0)

(insn 1632 3276 1633 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 5 edi)
            (reg/v:SI 4 esi))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 1633 1632 3277 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1647)
            (pc))) 288 {*jcc_1} (insn_list 1632 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 40, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736

;; Start of basic block 41, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736
(note 3277 1633 1641 [bb 41] NOTE_INSN_BASIC_BLOCK 0)

(note 1641 3277 3517 NOTE_INSN_DELETED 0)

(insn 3517 1641 3520 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3520 3517 1642 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1642 3520 3523 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg/v:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 3523 1642 1644 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -124 [0xffffff84])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1644 3523 1645 (set (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1642 (nil))
    (nil))

(jump_insn 1645 1644 1646 (set (pc)
        (label_ref 1661)) 296 {jump} (nil)
    (nil))
;; End of basic block 41, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736

(barrier 1646 1645 1647)

;; Start of basic block 42, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736
(code_label 1647 1646 3278 207 "" "" [1 uses])

(note 3278 1647 1650 [bb 42] NOTE_INSN_BASIC_BLOCK 0)

(insn 1650 3278 1651 (set (reg:SI 2 ecx)
        (plus:SI (reg/v:SI 5 edi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 1651 1650 1653 (parallel[ 
            (set (reg:SI 2 ecx)
                (mult:SI (reg:SI 2 ecx)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 1650 (nil))
    (nil))

(insn 1653 1651 3526 (parallel[ 
            (set (reg:SI 2 ecx)
                (plus:SI (reg:SI 2 ecx)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1651 (nil))
    (nil))

(insn 3526 1653 1655 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1655 3526 1656 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 1656 1655 1660 (set (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1653 (insn_list 1655 (nil)))
    (nil))
;; End of basic block 42, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736

(note 1660 1656 1661 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 43, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736
(code_label 1661 1660 3279 205 "" "" [1 uses])

(note 3279 1661 1663 [bb 43] NOTE_INSN_BASIC_BLOCK 0)

(insn 1663 3279 3140 (parallel[ 
            (set (reg/v:SI 5 edi)
                (plus:SI (reg/v:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3140 1663 1624 NOTE_INSN_LOOP_VTOP 0)

(insn 1624 3140 1625 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 1663 (nil))
    (nil))

(jump_insn 1625 1624 1669 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1628)
            (pc))) 288 {*jcc_1} (insn_list 1624 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 472 735 736

(note 1669 1625 1673 NOTE_INSN_LOOP_END 0)

(note 1673 1669 1674 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 44, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1674 1673 3280 189 "" "" [1 uses])

(note 3280 1674 1676 [bb 44] NOTE_INSN_BASIC_BLOCK 0)

(insn 1676 3280 3135 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3135 1676 1425 NOTE_INSN_LOOP_VTOP 0)

(insn 1425 3135 1426 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1676 (nil))
    (nil))

(jump_insn 1426 1425 1682 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1429)
            (pc))) 288 {*jcc_1} (insn_list 1425 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 44, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(note 1682 1426 1683 NOTE_INSN_LOOP_END 0)

;; Start of basic block 45, registers live: 6 [bp] 7 [sp] 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1683 1682 3281 188 "" "" [1 uses])

(note 3281 1683 1686 [bb 45] NOTE_INSN_BASIC_BLOCK 0)

(insn 1686 3281 1688 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1688 1686 1689 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC53"))) 27 {pushsi2} (insn_list 1686 (nil))
    (nil))

(call_insn 1689 1688 1692 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1692 1689 1694 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1694 1692 1696 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (insn_list 1692 (nil))
    (nil))

(insn 1696 1694 1697 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 1697 1696 1700 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1700 1697 1702 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 1702 1700 3141 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3141 1702 3142 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 1700 (nil))
    (nil))

(jump_insn 3142 3141 1703 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1812)
            (pc))) 288 {*jcc_1} (insn_list 3141 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 45, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(note 1703 3142 1709 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 46, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1709 1703 3282 214 "" "" [1 uses])

(note 3282 1709 1714 [bb 46] NOTE_INSN_BASIC_BLOCK 0)

(insn 1714 3282 1716 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1716 1714 3529 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 1714 (nil))
    (nil))

(insn 3529 1716 1717 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 1717 3529 1718 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(note 1718 1717 3532 NOTE_INSN_DELETED 0)

(insn 3532 1718 1720 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1720 3532 1722 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 8 [0x8]))
            (reg:SI 1 edx))) 113 {*lea_0} (insn_list 1717 (nil))
    (nil))

(insn 1722 1720 1723 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 1720 (nil))
    (nil))

(call_insn 1723 1722 1725 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1725 1723 3535 (set (reg:DF 10 st(2))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1723 (nil))
    (nil))

(insn 3535 1725 1727 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1727 3535 1730 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (insn_list 1725 (nil))
    (nil))

(insn 1730 1727 1853 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1853 1730 3865 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (nil)))

(insn 3865 1853 3866 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 10 st(2))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 3866 3865 3867 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 3867 3866 3868 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 3868 3867 3283 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1772))) -1 (nil)
    (nil))
;; End of basic block 46, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 482

;; Start of basic block 47, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 482
(note 3283 3868 1856 [bb 47] NOTE_INSN_BASIC_BLOCK 0)

(insn 1856 3283 1744 (set (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1744 1856 3146 (set (reg/v:SI 5 edi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3146 1744 3147 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1744 (nil))
    (nil))

(jump_insn 3147 3146 3439 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1772)
            (pc))) 288 {*jcc_1} (insn_list 3146 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 47, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

;; Start of basic block 48, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(note 3439 3147 3538 [bb 48] NOTE_INSN_BASIC_BLOCK 0)

(insn 3538 3439 3425 (set (reg:SI 3 ebx)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3425 3538 3428 (parallel[ 
            (set (reg:SI 3 ebx)
                (mult:SI (reg:SI 3 ebx)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 3428 3425 3541 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3541 3428 1745 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -160 [0xffffff60])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 48, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 734

(note 1745 3541 1751 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 49, registers live: 6 [bp] 7 [sp] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 734
(code_label 1751 1745 3284 220 "" "" [1 uses])

(note 3284 1751 1755 [bb 49] NOTE_INSN_BASIC_BLOCK 0)

(insn 1755 3284 3544 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 3 ebx)
            (reg/v:SI 5 edi))) -1 (nil)
    (nil))

(insn 3544 1755 3861 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3861 3544 3862 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3862 3861 3547 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) -1 (nil)
    (nil))

(insn 3547 3862 3863 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3863 3547 3864 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3864 3863 1760 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 5 edi)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 1760 3864 1763 NOTE_INSN_LOOP_CONT 0)

(insn 1763 1760 3150 (parallel[ 
            (set (reg/v:SI 5 edi)
                (plus:SI (reg/v:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3150 1763 1747 NOTE_INSN_LOOP_VTOP 0)

(insn 1747 3150 1748 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 2 {*cmpsi_1_insn} (insn_list 1763 (nil))
    (nil))

(jump_insn 1748 1747 1769 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1751)
            (pc))) 288 {*jcc_1} (insn_list 1747 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 49, registers live:
 7 [sp] 20 [frame] 45 46 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 484 734

(note 1769 1748 1772 NOTE_INSN_LOOP_END 0)

;; Start of basic block 50, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1772 1769 3285 215 "" "" [2 uses])

(note 3285 1772 3550 [bb 50] NOTE_INSN_BASIC_BLOCK 0)

(insn 3550 3285 1775 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1775 3550 1859 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1859 1775 3856 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (nil)))

(insn 3856 1859 3857 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 3857 3856 3858 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 3858 3857 3859 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 3859 3858 3286 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1784))) -1 (nil)
    (nil))
;; End of basic block 50, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 488

;; Start of basic block 51, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 488
(note 3286 3859 3553 [bb 51] NOTE_INSN_BASIC_BLOCK 0)

(insn 3553 3286 3852 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -152 [0xffffff68])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 3852 3553 3853 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -152 [0xffffff68])) 0)) -1 (nil)
    (nil))

(insn 3853 3852 3854 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -148 [0xffffff6c])) 0)) -1 (nil)
    (nil))

(insn 3854 3853 3855 (set (reg:SI 0 eax)
        (reg:SI 2 ecx)) -1 (nil)
    (nil))

(insn 3855 3854 1782 (set (reg:SI 1 edx)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(jump_insn 1782 3855 1783 (set (pc)
        (label_ref 1787)) 296 {jump} (nil)
    (nil))
;; End of basic block 51, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 487

(barrier 1783 1782 1784)

;; Start of basic block 52, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1784 1783 3287 222 "" "" [1 uses])

(note 3287 1784 3850 [bb 52] NOTE_INSN_BASIC_BLOCK 0)

(insn 3850 3287 3851 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 3851 3850 1787 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))
;; End of basic block 52, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 487

;; Start of basic block 53, registers live: 6 [bp] 7 [sp] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 487
(code_label 1787 3851 3288 223 "" "" [1 uses])

(note 3288 1787 3846 [bb 53] NOTE_INSN_BASIC_BLOCK 0)

(insn 3846 3288 3847 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3847 3846 3559 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 3559 3847 3848 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3848 3559 3849 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3849 3848 1794 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) -1 (nil)
    (nil))

(insn 1794 3849 1796 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 4 esi)) 27 {pushsi2} (nil)
    (nil))

(insn 1796 1794 1797 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC54"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 1797 1796 1801 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1801 1797 1802 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1802 1801 1805 NOTE_INSN_LOOP_CONT 0)

(insn 1805 1802 3145 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3145 1805 1705 NOTE_INSN_LOOP_VTOP 0)

(insn 1705 3145 1706 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 1805 (nil))
    (nil))

(jump_insn 1706 1705 1811 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1709)
            (pc))) 288 {*jcc_1} (insn_list 1705 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 53, registers live:
 7 [sp] 20 [frame] 45 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71

(note 1811 1706 1812 NOTE_INSN_LOOP_END 0)

;; Start of basic block 54, registers live: 6 [bp] 7 [sp] 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71
(code_label 1812 1811 3289 212 "" "" [1 uses])

(note 3289 1812 1815 [bb 54] NOTE_INSN_BASIC_BLOCK 0)

(insn 1815 3289 1817 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1817 1815 1818 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC55"))) 27 {pushsi2} (insn_list 1815 (nil))
    (nil))

(call_insn 1818 1817 1821 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1821 1818 1824 (set (mem/f:SI (symbol_ref:SI ("count")) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 1824 1821 3151 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3151 1824 3353 (set (reg:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (nil)))

(insn 3353 3151 3152 (set (reg/s:DF 10 st(2))
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 3151 (nil))
    (nil))

(insn 3152 3353 3843 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC56")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC56")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 3843 3152 3844 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 3844 3843 3845 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 5 [0x5]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 3845 3844 1825 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1911))) -1 (nil)
    (nil))
;; End of basic block 54, registers live:
 7 [sp] 20 [frame] 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489

(note 1825 3845 1834 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 55, registers live: 6 [bp] 7 [sp] 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489
(code_label 1834 1825 3290 228 "" "" [1 uses])

(note 3290 1834 1839 [bb 55] NOTE_INSN_BASIC_BLOCK 0)

(insn 1839 3290 3828 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3828 1839 3829 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 3829 3828 1843 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/s:DF 10 st(2))) -1 (nil)
    (nil))

(insn 1843 3829 1844 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC57"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 1844 1843 1847 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1847 1844 3830 (set (reg/v:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3830 1847 3831 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1037794527 [0x3ddb7cdf])) -1 (nil)
    (nil))

(insn 3831 3830 3832 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int -640172613 [0xd9d7bdbb])) -1 (nil)
    (nil))

(insn 3832 3831 3833 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) -1 (nil)
    (nil))

(insn 3833 3832 3357 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) -1 (nil)
    (nil))

(insn 3357 3833 1866 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -24 [0xffffffe8]))) 113 {*lea_0} (nil)
    (nil))

(insn 1866 3357 1868 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 3357 (nil))
    (nil))

(insn 1868 1866 3363 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("chisq"))) 27 {pushsi2} (nil)
    (nil))

(insn 3363 1868 1870 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -40 [0xffffffd8]))) 113 {*lea_0} (nil)
    (nil))

(insn 1870 3363 1872 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 3363 (nil))
    (nil))

(insn 1872 1870 1874 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1874 1872 1876 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -60 [0xffffffc4])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1876 1874 1878 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1878 1876 1880 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1880 1878 1881 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 1881 1880 1884 (call (mem:QI (symbol_ref:SI ("amebsa")) 0)
        (const_int 48 [0x30])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 1884 1881 1887 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg/v:SI 3 ebx)) 33 {*movsi_1} (insn_list 1847 (nil))
    (nil))

(insn 1887 1884 1889 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1889 1887 1891 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1887 (nil))
    (nil))

(insn 1891 1889 3834 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 3 ebx)) 27 {pushsi2} (insn_list 1889 (nil))
    (nil))

(insn 3834 1891 3835 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) -1 (nil)
    (nil))

(insn 3835 3834 3836 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) -1 (nil)
    (nil))

(insn 3836 3835 3837 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3837 3836 1896 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(call_insn 1896 3837 1898 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("NewTemp")) 0)
            (const_int 32 [0x20]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1898 1896 1900 NOTE_INSN_DELETED 1075563456)

(insn 1900 1898 1904 (set (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1898 (nil))
    (nil))

(insn 1904 1900 1902 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1902 1904 3156 NOTE_INSN_LOOP_CONT 0)

(note 3156 1902 1828 NOTE_INSN_LOOP_VTOP 0)

(insn 1828 3156 1830 (set (reg/s:DF 10 st(2))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1830 1828 3839 (set (reg/s:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC56")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC56")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 3839 1830 3840 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/s:DF 10 st(2))
                    (reg/s:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 3840 3839 3841 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 5 [0x5]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 3841 3840 1910 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1834)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 55, registers live:
 7 [sp] 20 [frame] 55 56 57 58 59 60 61 62 63 64 65 66 69 70 71 489

(note 1910 3841 1911 NOTE_INSN_LOOP_END 0)

;; Start of basic block 56, registers live: 6 [bp] 7 [sp] 56 57 58 59 63 64 65 66 69 70 71
(code_label 1911 1910 3291 227 "" "" [1 uses])

(note 3291 1911 1914 [bb 56] NOTE_INSN_BASIC_BLOCK 0)

(insn 1914 3291 1916 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1916 1914 1918 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("count")) 0)) 27 {pushsi2} (insn_list 1914 (nil))
    (nil))

(insn 1918 1916 1919 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC58"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 1919 1918 1922 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1922 1919 1924 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 1924 1922 3157 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3157 1924 3158 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1922 (nil))
    (nil))

(jump_insn 3158 3157 1925 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1949)
            (pc))) 288 {*jcc_1} (insn_list 3157 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 56, registers live:
 7 [sp] 20 [frame] 45 56 57 58 59 63 64 65 66 69 70 71

(note 1925 3158 1931 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 57, registers live: 6 [bp] 7 [sp] 45 56 57 58 59 63 64 65 66 69 70 71
(code_label 1931 1925 3292 233 "" "" [1 uses])

(note 3292 1931 1934 [bb 57] NOTE_INSN_BASIC_BLOCK 0)

(insn 1934 3292 3562 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("table")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("table")) 0)
        (nil)))

(insn 3562 1934 3824 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3824 3562 3825 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) -1 (nil)
    (nil))

(insn 3825 3824 3826 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3826 3825 3827 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3827 3826 1939 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 1939 3827 1942 NOTE_INSN_LOOP_CONT 0)

(insn 1942 1939 3161 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3161 1942 1927 NOTE_INSN_LOOP_VTOP 0)

(insn 1927 3161 1928 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1942 (nil))
    (nil))

(jump_insn 1928 1927 1948 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1931)
            (pc))) 288 {*jcc_1} (insn_list 1927 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 57, registers live:
 7 [sp] 20 [frame] 45 56 57 58 59 63 64 65 66 69 70 71

(note 1948 1928 1949 NOTE_INSN_LOOP_END 0)

;; Start of basic block 58, registers live: 6 [bp] 7 [sp] 56 57 58 59 63 64 65 66 69 70 71
(code_label 1949 1948 3293 231 "" "" [1 uses])

(note 3293 1949 1952 [bb 58] NOTE_INSN_BASIC_BLOCK 0)

(insn 1952 3293 3565 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3565 1952 1955 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1955 3565 3162 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3162 1955 3163 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1955 (nil))
    (nil))

(jump_insn 3163 3162 3440 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1981)
            (pc))) 288 {*jcc_1} (insn_list 3162 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 58, registers live:
 7 [sp] 20 [frame] 45 56 57 58 59 63 64 65 66 68 69 70 71

;; Start of basic block 59, registers live: 6 [bp] 7 [sp] 45 56 57 58 59 63 64 65 66 68 69 70 71
(note 3440 3163 3424 [bb 59] NOTE_INSN_BASIC_BLOCK 0)

(insn 3424 3440 1956 (set (reg/v:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 59, registers live:
 7 [sp] 20 [frame] 45 56 57 58 59 63 64 65 66 68 69 70 71 733

(note 1956 3424 1962 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 60, registers live: 6 [bp] 7 [sp] 45 56 57 58 59 63 64 65 66 68 69 70 71 733
(code_label 1962 1956 3294 238 "" "" [1 uses])

(note 3294 1962 3568 [bb 60] NOTE_INSN_BASIC_BLOCK 0)

(insn 3568 3294 3820 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3820 3568 3821 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) -1 (nil)
    (nil))

(insn 3821 3820 3571 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3571 3821 3822 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3822 3571 3823 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3823 3822 1971 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 1971 3823 1974 NOTE_INSN_LOOP_CONT 0)

(insn 1974 1971 3166 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3166 1974 1958 NOTE_INSN_LOOP_VTOP 0)

(insn 1958 3166 1959 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (reg/v:SI 2 ecx))) 2 {*cmpsi_1_insn} (insn_list 1974 (nil))
    (nil))

(jump_insn 1959 1958 1980 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1962)
            (pc))) 288 {*jcc_1} (insn_list 1958 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 60, registers live:
 7 [sp] 20 [frame] 45 56 57 58 59 63 64 65 66 68 69 70 71 733

(note 1980 1959 1981 NOTE_INSN_LOOP_END 0)

;; Start of basic block 61, registers live: 6 [bp] 7 [sp] 56 57 58 63 64 65 66 68 69 70 71
(code_label 1981 1980 3295 236 "" "" [1 uses])

(note 3295 1981 1983 [bb 61] NOTE_INSN_BASIC_BLOCK 0)

(call_insn 1983 3295 1986 (call (mem:QI (symbol_ref:SI ("OutPut")) 0)
        (const_int 0 [0x0])) 303 {*call_0} (nil)
    (nil)
    (nil))

(note 1986 1983 1988 NOTE_INSN_DELETED 0)

(insn 1988 1986 1989 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)
        (nil)))

(insn 1989 1988 3817 (parallel[ 
            (set (reg:SI 0 eax)
                (minus:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 138 {*subsi_1} (insn_list 1988 (nil))
    (nil))

(insn 3817 1989 3818 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3818 3817 3819 (set (reg:DF 8 st(0))
        (float:DF (mem:SI (reg:SI 7 esp) 0))) -1 (nil)
    (nil))

(insn 3819 3818 3574 (parallel[ 
            (set (reg:SI 0 eax)
                (mem:SI (reg:SI 7 esp) 0))
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
        ] ) -1 (nil)
    (nil))

(insn 3574 3819 3577 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 3577 3574 1992 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1992 3577 3580 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1990 (nil))
    (nil))

(insn 3580 1992 1995 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1995 3580 3167 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3167 1995 3168 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 1995 (nil))
    (nil))

(jump_insn 3168 3167 1996 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2125)
            (pc))) 288 {*jcc_1} (insn_list 3167 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 61, registers live:
 7 [sp] 20 [frame] 45 56 57 58 63 64 65 66 68 69 70 71 72

(note 1996 3168 2002 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 62, registers live: 6 [bp] 7 [sp] 45 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2002 1996 3296 243 "" "" [1 uses])

(note 3296 2002 2007 [bb 62] NOTE_INSN_BASIC_BLOCK 0)

(insn 2007 3296 3172 (set (reg/v:SI 5 edi)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3172 2007 3173 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 3173 3172 2008 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2116)
            (pc))) 288 {*jcc_1} (insn_list 3172 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 62, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

(note 2008 3173 2014 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 63, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2014 2008 3297 247 "" "" [1 uses])

(note 3297 2014 2019 [bb 63] NOTE_INSN_BASIC_BLOCK 0)

(insn 2019 3297 3177 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 3177 2019 3178 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2019 (nil))
    (nil))

(jump_insn 3178 3177 3441 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2040)
            (pc))) 288 {*jcc_1} (insn_list 3177 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 63, registers live:
 7 [sp] 20 [frame] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72

;; Start of basic block 64, registers live: 6 [bp] 7 [sp] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72
(note 3441 3178 3421 [bb 64] NOTE_INSN_BASIC_BLOCK 0)

(insn 3421 3441 3583 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3583 3421 2020 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -156 [0xffffff64])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 64, registers live:
 7 [sp] 20 [frame] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 732

(note 2020 3583 2026 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 65, registers live: 6 [bp] 7 [sp] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 732
(code_label 2026 2020 3298 251 "" "" [1 uses])

(note 3298 2026 3586 [bb 65] NOTE_INSN_BASIC_BLOCK 0)

(insn 3586 3298 3813 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3813 3586 3814 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) -1 (nil)
    (nil))

(insn 3814 3813 3589 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3589 3814 3815 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3815 3589 3816 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3816 3815 2030 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 2030 3816 2033 NOTE_INSN_LOOP_CONT 0)

(insn 2033 2030 3181 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3181 2033 2022 NOTE_INSN_LOOP_VTOP 0)

(insn 2022 3181 2023 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -156 [0xffffff64])) 0))) 2 {*cmpsi_1_insn} (insn_list 2033 (nil))
    (nil))

(jump_insn 2023 2022 2039 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2026)
            (pc))) 288 {*jcc_1} (insn_list 2022 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 65, registers live:
 7 [sp] 20 [frame] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 732

(note 2039 2023 2040 NOTE_INSN_LOOP_END 0)

;; Start of basic block 66, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2040 2039 3299 249 "" "" [1 uses])

(note 3299 2040 2042 [bb 66] NOTE_INSN_BASIC_BLOCK 0)

(insn 2042 3299 2043 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 4 esi)
            (reg/v:SI 5 edi))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 2043 2042 3300 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2055)
            (pc))) 288 {*jcc_1} (insn_list 2042 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 66, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

;; Start of basic block 67, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(note 3300 2043 3592 [bb 67] NOTE_INSN_BASIC_BLOCK 0)

(insn 3592 3300 2048 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2048 3592 2049 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 2049 2048 3595 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("ddel")) 0))) 314 {*fop_df_comm} (insn_list 2048 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 3595 2049 2051 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2051 3595 2053 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2049 (nil))
    (nil))

(jump_insn 2053 2051 2054 (set (pc)
        (label_ref 2071)) 296 {jump} (nil)
    (nil))
;; End of basic block 67, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

(barrier 2054 2053 2055)

;; Start of basic block 68, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2055 2054 3301 253 "" "" [1 uses])

(note 3301 2055 3598 [bb 68] NOTE_INSN_BASIC_BLOCK 0)

(insn 3598 3301 2060 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2060 3598 2061 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2061 2060 3601 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("ddel")) 0))) 314 {*fop_df_comm} (insn_list 2060 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 3601 2061 2063 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2063 3601 2066 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2061 (nil))
    (nil))

(insn 2066 2063 2067 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2067 2066 2069 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("ddel")) 0))) 314 {*fop_df_comm} (insn_list 2066 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 2069 2067 2071 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2067 (nil))
    (nil))
;; End of basic block 68, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

;; Start of basic block 69, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2071 2069 3302 254 "" "" [1 uses])

(note 3302 2071 2074 [bb 69] NOTE_INSN_BASIC_BLOCK 0)

(insn 2074 3302 2076 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2076 2074 2078 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 2074 (nil))
    (nil))

(insn 2078 2076 2079 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2079 2078 2081 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 2081 2079 2083 NOTE_INSN_DELETED 1075561744)

(insn 2083 2081 3604 (set (reg:SI 2 ecx)
        (plus:SI (reg/v:SI 5 edi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3604 2083 2084 (set (reg:SI 0 eax)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 2084 3604 2086 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 2083 (nil))
    (nil))

(note 2086 2084 3607 NOTE_INSN_DELETED 0)

(insn 3607 2086 2088 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 2088 3607 2090 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 2084 (nil))
    (nil))

(insn 2090 2088 2092 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2088 (nil))
    (nil))

(insn 2092 2090 2094 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 2090 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 2094 2092 2095 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2092 (nil))
    (nil))

(insn 2095 2094 3610 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0))) 314 {*fop_df_comm} (insn_list 2081 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 3610 2095 2097 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2097 3610 2101 (set (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2094 (insn_list 2095 (nil)))
    (nil))

(insn 2101 2097 2102 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 2102 2101 2105 NOTE_INSN_LOOP_CONT 0)

(insn 2105 2102 3176 (set (reg/v:SI 5 edi)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(note 3176 2105 2010 NOTE_INSN_LOOP_VTOP 0)

(insn 2010 3176 2011 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2105 (nil))
    (nil))

(jump_insn 2011 2010 2111 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2014)
            (pc))) 288 {*jcc_1} (insn_list 2010 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 69, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

(note 2111 2011 2115 NOTE_INSN_LOOP_END 0)

(note 2115 2111 2116 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 70, registers live: 6 [bp] 7 [sp] 45 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2116 2115 3303 242 "" "" [1 uses])

(note 3303 2116 2118 [bb 70] NOTE_INSN_BASIC_BLOCK 0)

(insn 2118 3303 3171 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3171 2118 1998 NOTE_INSN_LOOP_VTOP 0)

(insn 1998 3171 1999 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2118 (nil))
    (nil))

(jump_insn 1999 1998 2124 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2002)
            (pc))) 288 {*jcc_1} (insn_list 1998 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 70, registers live:
 7 [sp] 20 [frame] 45 56 57 58 63 64 65 66 68 69 70 71 72

(note 2124 1999 2125 NOTE_INSN_LOOP_END 0)

;; Start of basic block 71, registers live: 6 [bp] 7 [sp] 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2125 2124 3304 241 "" "" [1 uses])

(note 3304 2125 2128 [bb 71] NOTE_INSN_BASIC_BLOCK 0)

(insn 2128 3304 3182 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3182 2128 3183 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2128 (nil))
    (nil))

(jump_insn 3183 3182 2129 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2258)
            (pc))) 288 {*jcc_1} (insn_list 3182 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 71, registers live:
 7 [sp] 20 [frame] 45 56 57 58 63 64 65 66 68 69 70 71 72

(note 2129 3183 2135 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 72, registers live: 6 [bp] 7 [sp] 45 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2135 2129 3305 260 "" "" [1 uses])

(note 3305 2135 2140 [bb 72] NOTE_INSN_BASIC_BLOCK 0)

(insn 2140 3305 3187 (set (reg/v:SI 5 edi)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3187 2140 3188 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 3188 3187 2141 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2249)
            (pc))) 288 {*jcc_1} (insn_list 3187 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 72, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

(note 2141 3188 2147 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 73, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2147 2141 3306 264 "" "" [1 uses])

(note 3306 2147 2152 [bb 73] NOTE_INSN_BASIC_BLOCK 0)

(insn 2152 3306 3192 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3192 2152 3193 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2152 (nil))
    (nil))

(jump_insn 3193 3192 3442 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2173)
            (pc))) 288 {*jcc_1} (insn_list 3192 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 73, registers live:
 7 [sp] 20 [frame] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72

;; Start of basic block 74, registers live: 6 [bp] 7 [sp] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72
(note 3442 3193 3418 [bb 74] NOTE_INSN_BASIC_BLOCK 0)

(insn 3418 3442 3613 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3613 3418 2153 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -156 [0xffffff64])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 74, registers live:
 7 [sp] 20 [frame] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 731

(note 2153 3613 2159 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 75, registers live: 6 [bp] 7 [sp] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 731
(code_label 2159 2153 3307 268 "" "" [1 uses])

(note 3307 2159 3616 [bb 75] NOTE_INSN_BASIC_BLOCK 0)

(insn 3616 3307 3808 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3808 3616 3809 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) -1 (nil)
    (nil))

(insn 3809 3808 3619 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3619 3809 3810 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3810 3619 3811 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3811 3810 2163 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 2163 3811 2166 NOTE_INSN_LOOP_CONT 0)

(insn 2166 2163 3196 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3196 2166 2155 NOTE_INSN_LOOP_VTOP 0)

(insn 2155 3196 2156 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -156 [0xffffff64])) 0))) 2 {*cmpsi_1_insn} (insn_list 2166 (nil))
    (nil))

(jump_insn 2156 2155 2172 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2159)
            (pc))) 288 {*jcc_1} (insn_list 2155 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 75, registers live:
 7 [sp] 20 [frame] 45 46 47 56 57 58 63 64 65 66 68 69 70 71 72 731

(note 2172 2156 2173 NOTE_INSN_LOOP_END 0)

;; Start of basic block 76, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2173 2172 3308 266 "" "" [1 uses])

(note 3308 2173 2175 [bb 76] NOTE_INSN_BASIC_BLOCK 0)

(insn 2175 3308 2176 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 4 esi)
            (reg/v:SI 5 edi))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 2176 2175 3309 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2188)
            (pc))) 288 {*jcc_1} (insn_list 2175 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 76, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

;; Start of basic block 77, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(note 3309 2176 3622 [bb 77] NOTE_INSN_BASIC_BLOCK 0)

(insn 3622 3309 2181 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2181 3622 2182 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 2182 2181 3625 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("ddel")) 0))) 319 {*fop_df_1} (insn_list 2181 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 3625 2182 2184 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2184 3625 2186 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2182 (nil))
    (nil))

(jump_insn 2186 2184 2187 (set (pc)
        (label_ref 2204)) 296 {jump} (nil)
    (nil))
;; End of basic block 77, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

(barrier 2187 2186 2188)

;; Start of basic block 78, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2188 2187 3310 270 "" "" [1 uses])

(note 3310 2188 3628 [bb 78] NOTE_INSN_BASIC_BLOCK 0)

(insn 3628 3310 2193 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2193 3628 2194 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2194 2193 3631 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("ddel")) 0))) 319 {*fop_df_1} (insn_list 2193 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 3631 2194 2196 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2196 3631 2199 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2194 (nil))
    (nil))

(insn 2199 2196 2200 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2200 2199 2202 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("ddel")) 0))) 319 {*fop_df_1} (insn_list 2199 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 2202 2200 2204 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2200 (nil))
    (nil))
;; End of basic block 78, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

;; Start of basic block 79, registers live: 6 [bp] 7 [sp] 45 46 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2204 2202 3311 271 "" "" [1 uses])

(note 3311 2204 2207 [bb 79] NOTE_INSN_BASIC_BLOCK 0)

(insn 2207 3311 2209 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2209 2207 2211 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 2207 (nil))
    (nil))

(insn 2211 2209 2212 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2212 2211 2214 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 2214 2212 2216 NOTE_INSN_DELETED 1075560512)

(insn 2216 2214 3634 (set (reg:SI 2 ecx)
        (plus:SI (reg/v:SI 5 edi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3634 2216 2217 (set (reg:SI 0 eax)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 2217 3634 2219 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 2216 (nil))
    (nil))

(note 2219 2217 3637 NOTE_INSN_DELETED 0)

(insn 3637 2219 2221 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 2221 3637 2223 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 2217 (nil))
    (nil))

(insn 2223 2221 2225 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2221 (nil))
    (nil))

(insn 2225 2223 2227 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 2223 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 2227 2225 2228 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2225 (nil))
    (nil))

(insn 2228 2227 3640 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0))) 314 {*fop_df_comm} (insn_list 2214 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 3640 2228 2230 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2230 3640 2234 (set (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2227 (insn_list 2228 (nil)))
    (nil))

(insn 2234 2230 2235 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 2235 2234 2238 NOTE_INSN_LOOP_CONT 0)

(insn 2238 2235 3191 (set (reg/v:SI 5 edi)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(note 3191 2238 2143 NOTE_INSN_LOOP_VTOP 0)

(insn 2143 3191 2144 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2238 (nil))
    (nil))

(jump_insn 2144 2143 2244 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2147)
            (pc))) 288 {*jcc_1} (insn_list 2143 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 79, registers live:
 7 [sp] 20 [frame] 45 46 56 57 58 63 64 65 66 68 69 70 71 72

(note 2244 2144 2248 NOTE_INSN_LOOP_END 0)

(note 2248 2244 2249 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 80, registers live: 6 [bp] 7 [sp] 45 56 57 58 63 64 65 66 68 69 70 71 72
(code_label 2249 2248 3312 259 "" "" [1 uses])

(note 3312 2249 2251 [bb 80] NOTE_INSN_BASIC_BLOCK 0)

(insn 2251 3312 3186 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3186 2251 2131 NOTE_INSN_LOOP_VTOP 0)

(insn 2131 3186 2132 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2251 (nil))
    (nil))

(jump_insn 2132 2131 2257 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2135)
            (pc))) 288 {*jcc_1} (insn_list 2131 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 80, registers live:
 7 [sp] 20 [frame] 45 56 57 58 63 64 65 66 68 69 70 71 72

(note 2257 2132 2258 NOTE_INSN_LOOP_END 0)

;; Start of basic block 81, registers live: 6 [bp] 7 [sp] 56 57 63 64 65 66 68 69 70 71
(code_label 2258 2257 3313 258 "" "" [1 uses])

(note 3313 2258 2261 [bb 81] NOTE_INSN_BASIC_BLOCK 0)

(insn 2261 3313 3197 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3197 2261 3198 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2261 (nil))
    (nil))

(jump_insn 3198 3197 3443 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2489)
            (pc))) 288 {*jcc_1} (insn_list 3197 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 81, registers live:
 7 [sp] 20 [frame] 45 56 57 63 64 65 66 68 69 70 71

;; Start of basic block 82, registers live: 6 [bp] 7 [sp] 45 56 57 63 64 65 66 68 69 70 71
(note 3443 3198 3406 [bb 82] NOTE_INSN_BASIC_BLOCK 0)

(insn 3406 3443 3643 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3643 3406 3409 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 3409 3643 3646 (set (reg:DF 8 st(0))
        (mem/f:DF (symbol_ref:SI ("ddel")) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3646 3409 3412 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 3412 3646 3415 (set (reg/v:DF 15 st(7))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC59")) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3415 3412 2262 (set (reg/v:DF 14 st(6))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC60")) 0)) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 82, registers live:
 7 [sp] 20 [frame] 45 56 57 63 64 65 66 68 69 70 71 727 728 729 730

(note 2262 3415 2268 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 83, registers live: 6 [bp] 7 [sp] 45 56 57 63 64 65 66 68 69 70 71 727 728 729 730
(code_label 2268 2262 3314 277 "" "" [1 uses])

(note 3314 2268 2273 [bb 83] NOTE_INSN_BASIC_BLOCK 0)

(insn 2273 3314 3202 (set (reg/v:SI 5 edi)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3202 2273 3203 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -136 [0xffffff78])) 0))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 3203 3202 3444 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2480)
            (pc))) 288 {*jcc_1} (insn_list 3202 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 83, registers live:
 7 [sp] 20 [frame] 45 46 56 57 63 64 65 66 68 69 70 71 727 728 729 730

;; Start of basic block 84, registers live: 6 [bp] 7 [sp] 45 46 56 57 63 64 65 66 68 69 70 71 727 728 729 730
(note 3444 3203 3385 [bb 84] NOTE_INSN_BASIC_BLOCK 0)

(insn 3385 3444 3386 (set (reg:SI 0 eax)
        (plus:SI (reg/v:SI 4 esi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3386 3385 3387 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 3385 (nil))
    (nil))

(note 3387 3386 3649 NOTE_INSN_DELETED 0)

(insn 3649 3387 3388 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 3388 3649 3389 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 3386 (nil))
    (nil))

(insn 3389 3388 3390 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 3388 (nil))
    (nil))

(insn 3390 3389 3391 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 3389 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 3391 3390 3394 (set (reg:SI 2 ecx)
        (plus:SI (reg:SI 0 eax)
            (reg/v:SI 4 esi))) -1 (insn_list 3390 (nil))
    (nil))

(insn 3394 3391 3397 (set (reg/v:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3397 3394 3400 (set (reg/v:DF 13 st(5))
        (reg/v:DF 15 st(7))) 63 {*movdf_integer} (nil)
    (nil))

(insn 3400 3397 3652 (set (reg/v:DF 12 st(4))
        (reg/v:DF 14 st(6))) 63 {*movdf_integer} (nil)
    (nil))

(insn 3652 3400 3403 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3403 3652 2274 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -156 [0xffffff64])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 84, registers live:
 7 [sp] 20 [frame] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730

(note 2274 3403 2280 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 85, registers live: 6 [bp] 7 [sp] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730
(code_label 2280 2274 3315 281 "" "" [1 uses])

(note 3315 2280 2284 [bb 85] NOTE_INSN_BASIC_BLOCK 0)

(insn 2284 3315 2285 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 4 esi)
            (reg/v:SI 5 edi))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 2285 2284 3316 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2347)
            (pc))) 288 {*jcc_1} (insn_list 2284 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 85, registers live:
 7 [sp] 20 [frame] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730

;; Start of basic block 86, registers live: 6 [bp] 7 [sp] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730
(note 3316 2285 2303 [bb 86] NOTE_INSN_BASIC_BLOCK 0)

(note 2303 3316 3655 NOTE_INSN_DELETED 0)

(insn 3655 2303 2304 (set (reg:DF 9 st(1))
        (reg/v:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2304 3655 2306 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 11 st(3)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2306 2304 2307 NOTE_INSN_DELETED 0)

(insn 2307 2306 3658 (set (reg:DF 9 st(1))
        (div:DF (reg/v:DF 13 st(5))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 2304 (nil))
    (nil))

(insn 3658 2307 2323 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2323 3658 2325 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2325 2323 3661 NOTE_INSN_DELETED 0)

(insn 3661 2325 2326 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2326 3661 3664 (set (reg:DF 8 st(0))
        (minus:DF (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 2323 (nil))
    (nil))

(insn 3664 2326 2340 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2340 3664 2341 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx)) 0))) 314 {*fop_df_comm} (insn_list 2326 (nil))
    (nil))

(insn 2341 2340 3667 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 2307 (insn_list 2340 (nil)))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 3667 2341 2343 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2343 3667 2345 (set (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 2341 (nil))
    (nil))

(jump_insn 2345 2343 2346 (set (pc)
        (label_ref 2467)) 296 {jump} (nil)
    (nil))
;; End of basic block 86, registers live:
 7 [sp] 20 [frame] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730

(barrier 2346 2345 2347)

;; Start of basic block 87, registers live: 6 [bp] 7 [sp] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730
(code_label 2347 2346 3317 282 "" "" [1 uses])

(note 3317 2347 2352 [bb 87] NOTE_INSN_BASIC_BLOCK 0)

(insn 2352 3317 2353 (set (reg:SI 0 eax)
        (plus:SI (reg/v:SI 5 edi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 2353 2352 2355 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 5 edi)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 2352 (nil))
    (nil))

(note 2355 2353 3670 NOTE_INSN_DELETED 0)

(insn 3670 2355 2357 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 2357 3670 2359 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 2353 (nil))
    (nil))

(insn 2359 2357 2361 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2357 (nil))
    (nil))

(insn 2361 2359 2363 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 2359 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 2363 2361 2365 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (reg/v:SI 4 esi))) -1 (insn_list 2361 (nil))
    (nil))

(note 2365 2363 3673 NOTE_INSN_DELETED 0)

(insn 3673 2365 2366 (set (reg:DF 10 st(2))
        (reg/v:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2366 3673 2368 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg/v:DF 11 st(3)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2368 2366 2369 NOTE_INSN_DELETED 0)

(insn 2369 2368 2395 (set (reg:DF 10 st(2))
        (div:DF (reg/v:DF 12 st(4))
            (reg:DF 10 st(2)))) 319 {*fop_df_1} (insn_list 2366 (nil))
    (nil))

(insn 2395 2369 3676 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 5 edi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3676 2395 2397 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2397 3676 2398 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 2398 2397 3679 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx)) 0))) 314 {*fop_df_comm} (insn_list 2395 (insn_list 2397 (nil)))
    (nil))

(insn 3679 2398 2412 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2412 3679 2426 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx)) 0))) 314 {*fop_df_comm} (insn_list 2398 (nil))
    (nil))

(insn 2426 2412 3682 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx)) 0))) 314 {*fop_df_comm} (insn_list 2412 (nil))
    (nil))

(insn 3682 2426 2429 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2429 3682 2430 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2430 2429 3685 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 2426 (insn_list 2429 (nil)))
    (nil))

(insn 3685 2430 2444 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2444 3685 2458 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax)) 0))) 319 {*fop_df_1} (insn_list 2363 (insn_list 2430 (nil)))
    (nil))

(insn 2458 2444 2459 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx)) 0))) 319 {*fop_df_1} (insn_list 2444 (nil))
    (nil))

(insn 2459 2458 3688 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 2369 (insn_list 2458 (nil)))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 3688 2459 2461 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2461 3688 2466 (set (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (insn_list 2459 (nil))
    (nil))
;; End of basic block 87, registers live:
 7 [sp] 20 [frame] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730

(note 2466 2461 2467 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 88, registers live: 6 [bp] 7 [sp] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730
(code_label 2467 2466 3318 280 "" "" [1 uses])

(note 3318 2467 2469 [bb 88] NOTE_INSN_BASIC_BLOCK 0)

(insn 2469 3318 3206 (parallel[ 
            (set (reg/v:SI 5 edi)
                (plus:SI (reg/v:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3206 2469 2276 NOTE_INSN_LOOP_VTOP 0)

(insn 2276 3206 2277 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -156 [0xffffff64])) 0))) 2 {*cmpsi_1_insn} (insn_list 2469 (nil))
    (nil))

(jump_insn 2277 2276 2475 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2280)
            (pc))) 288 {*jcc_1} (insn_list 2276 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 88, registers live:
 7 [sp] 20 [frame] 45 46 56 57 63 64 65 66 68 69 70 71 541 723 724 725 726 727 728 729 730

(note 2475 2277 2479 NOTE_INSN_LOOP_END 0)

(note 2479 2475 2480 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 89, registers live: 6 [bp] 7 [sp] 45 56 57 63 64 65 66 68 69 70 71 727 728 729 730
(code_label 2480 2479 3319 276 "" "" [1 uses])

(note 3319 2480 2482 [bb 89] NOTE_INSN_BASIC_BLOCK 0)

(insn 2482 3319 3201 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3201 2482 2264 NOTE_INSN_LOOP_VTOP 0)

(insn 2264 3201 2265 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -136 [0xffffff78])) 0))) 2 {*cmpsi_1_insn} (insn_list 2482 (nil))
    (nil))

(jump_insn 2265 2264 2488 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2268)
            (pc))) 288 {*jcc_1} (insn_list 2264 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 89, registers live:
 7 [sp] 20 [frame] 45 56 57 63 64 65 66 68 69 70 71 727 728 729 730

(note 2488 2265 2489 NOTE_INSN_LOOP_END 0)

;; Start of basic block 90, registers live: 6 [bp] 7 [sp] 56 57 65 66 69 70 71
(code_label 2489 2488 3320 275 "" "" [1 uses])

(note 3320 2489 2492 [bb 90] NOTE_INSN_BASIC_BLOCK 0)

(insn 2492 3320 2494 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2494 2492 2496 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 27 {pushsi2} (insn_list 2492 (nil))
    (nil))

(insn 2496 2494 2498 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 2498 2496 2499 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2499 2498 2502 (call (mem:QI (symbol_ref:SI ("triangle_matrix_copy")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 2502 2499 2504 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2504 2502 2506 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 27 {pushsi2} (insn_list 2502 (nil))
    (nil))

(insn 2506 2504 2508 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 2508 2506 2509 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2509 2508 2511 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("lower_cholesky_factor")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 2511 2509 2513 NOTE_INSN_DELETED 1075557904)

(insn 2513 2511 2516 (set (mem/f:SI (symbol_ref:SI ("singular_return")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 2511 (nil))
    (nil))

(insn 2516 2513 2517 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2517 2516 2518 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 eax)
            (const_int -1 [0xffffffff]))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 2518 2517 3322 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2579)
            (pc))) 288 {*jcc_1} (insn_list 2517 (nil))
    (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 90, registers live:
 7 [sp] 20 [frame] 56 57 65 66 69 70 71 629

;; Start of basic block 91, registers live: 6 [bp] 7 [sp] 57 629
(note 3322 2518 2523 [bb 91] NOTE_INSN_BASIC_BLOCK 0)

(insn 2523 3322 2525 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2525 2523 2527 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 2523 (nil))
    (nil))

(insn 2527 2525 2528 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC61"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 2528 2527 2531 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2531 2528 2533 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2533 2531 2535 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (insn_list 2531 (nil))
    (nil))

(insn 2535 2533 2536 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2536 2535 2539 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2539 2536 2541 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2541 2539 2543 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC62"))) 27 {pushsi2} (insn_list 2539 (nil))
    (nil))

(insn 2543 2541 2544 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2544 2543 3799 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3799 2544 3800 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3800 3799 2549 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2549 3800 2551 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC63"))) 27 {pushsi2} (nil)
    (nil))

(insn 2551 2549 2552 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2552 2551 2555 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2555 2552 2557 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2557 2555 2559 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2555 (nil))
    (nil))

(insn 2559 2557 2560 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC62"))) 27 {pushsi2} (insn_list 2557 (nil))
    (nil))

(call_insn 2560 2559 2563 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2563 2560 3801 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3801 2563 3802 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3802 3801 2567 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2567 3802 2568 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC63"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 2568 2567 2571 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2571 2568 2573 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2573 2571 2574 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int -1 [0xffffffff])) 27 {pushsi2} (insn_list 2571 (nil))
    (nil))

(call_insn 2574 2573 3321 (call (mem:QI (symbol_ref:SI ("exit")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 3321 2574 2575 (use (const_int 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 91, registers live:
 7 [sp]

(barrier 2575 3321 2579)

;; Start of basic block 92, registers live: 6 [bp] 7 [sp] 56 57 65 66 69 70 71
(code_label 2579 2575 3323 286 "" "" [1 uses])

(note 3323 2579 2582 [bb 92] NOTE_INSN_BASIC_BLOCK 0)

(insn 2582 3323 2584 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2584 2582 2586 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 27 {pushsi2} (insn_list 2582 (nil))
    (nil))

(insn 2586 2584 2588 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 2588 2586 2589 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2589 2588 2591 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("invert_upper_triangle_matrix")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 2591 2589 2593 NOTE_INSN_DELETED 1075556000)

(insn 2593 2591 2596 (set (mem/f:SI (symbol_ref:SI ("singular_return")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 2591 (nil))
    (nil))

(insn 2596 2593 2597 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2597 2596 2598 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 eax)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 2598 2597 3325 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2659)
            (pc))) 288 {*jcc_1} (insn_list 2597 (nil))
    (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 92, registers live:
 7 [sp] 20 [frame] 56 57 65 66 69 70 71 630

;; Start of basic block 93, registers live: 6 [bp] 7 [sp] 57 630
(note 3325 2598 2603 [bb 93] NOTE_INSN_BASIC_BLOCK 0)

(insn 2603 3325 2605 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2605 2603 2607 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 2603 (nil))
    (nil))

(insn 2607 2605 2608 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC64"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 2608 2607 2611 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2611 2608 2613 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2613 2611 2615 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (insn_list 2611 (nil))
    (nil))

(insn 2615 2613 2616 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2616 2615 2619 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2619 2616 2621 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2621 2619 2623 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC62"))) 27 {pushsi2} (insn_list 2619 (nil))
    (nil))

(insn 2623 2621 2624 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2624 2623 3795 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3795 2624 3796 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3796 3795 2629 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2629 3796 2631 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC63"))) 27 {pushsi2} (nil)
    (nil))

(insn 2631 2629 2632 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2632 2631 2635 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2635 2632 2637 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2637 2635 2639 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2635 (nil))
    (nil))

(insn 2639 2637 2640 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC62"))) 27 {pushsi2} (insn_list 2637 (nil))
    (nil))

(call_insn 2640 2639 2643 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2643 2640 3797 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3797 2643 3798 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3798 3797 2647 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2647 3798 2648 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC63"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 2648 2647 2651 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 2651 2648 2653 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2653 2651 2654 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int -1 [0xffffffff])) 27 {pushsi2} (insn_list 2651 (nil))
    (nil))

(call_insn 2654 2653 3324 (call (mem:QI (symbol_ref:SI ("exit")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 3324 2654 2655 (use (const_int 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 93, registers live:
 7 [sp]

(barrier 2655 3324 2659)

;; Start of basic block 94, registers live: 6 [bp] 7 [sp] 56 57 65 66 69 70 71
(code_label 2659 2655 3326 287 "" "" [1 uses])

(note 3326 2659 2662 [bb 94] NOTE_INSN_BASIC_BLOCK 0)

(insn 2662 3326 2664 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2664 2662 2666 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 27 {pushsi2} (insn_list 2662 (nil))
    (nil))

(insn 2666 2664 2668 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 2668 2666 2669 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2669 2668 2672 (call (mem:QI (symbol_ref:SI ("square_upper_triangle_matrix")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 2672 2669 2674 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2674 2672 2676 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 27 {pushsi2} (insn_list 2672 (nil))
    (nil))

(insn 2676 2674 2678 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 2678 2676 2679 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2679 2678 2682 (call (mem:QI (symbol_ref:SI ("inverse_check")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 2682 2679 2684 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 2684 2682 3207 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3207 2684 3208 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2682 (nil))
    (nil))

(jump_insn 3208 3207 3445 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2739)
            (pc))) 288 {*jcc_1} (insn_list 3207 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 94, registers live:
 7 [sp] 20 [frame] 45 56 57 66 69 70 71

;; Start of basic block 95, registers live: 6 [bp] 7 [sp] 45 56 57 66 69 70 71
(note 3445 3208 3384 [bb 95] NOTE_INSN_BASIC_BLOCK 0)

(insn 3384 3445 2685 (set (reg/v:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 95, registers live:
 7 [sp] 20 [frame] 45 56 57 66 69 70 71 722

(note 2685 3384 2691 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 96, registers live: 6 [bp] 7 [sp] 45 56 57 66 69 70 71 722
(code_label 2691 2685 3327 291 "" "" [1 uses])

(note 3327 2691 2696 [bb 96] NOTE_INSN_BASIC_BLOCK 0)

(insn 2696 3327 3691 (set (reg:SI 2 ecx)
        (plus:SI (reg/v:SI 4 esi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3691 2696 2697 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 2697 3691 2699 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 2696 (nil))
    (nil))

(note 2699 2697 3694 NOTE_INSN_DELETED 0)

(insn 3694 2699 2701 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 2701 3694 2703 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 2697 (nil))
    (nil))

(insn 2703 2701 2705 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2701 (nil))
    (nil))

(insn 2705 2703 2707 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 2703 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 2707 2705 3697 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2705 (nil))
    (nil))

(insn 3697 2707 2709 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2709 3697 2710 (set (reg/v:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) 63 {*movdf_integer} (insn_list 2707 (nil))
    (nil))

(note 2710 2709 2712 0x4019bc00 NOTE_INSN_BLOCK_BEG 0)

(note/i 2712 2710 2713 0x4019bc20 NOTE_INSN_BLOCK_BEG 0)

(insn/i 2713 2712 2717 (parallel[ 
            (set (reg/v:DF 8 st(0))
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg/v:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 2709 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(note/i 2717 2713 2720 0x4019bc20 NOTE_INSN_BLOCK_END 0)

(note 2720 2717 3700 0x4019bc00 NOTE_INSN_BLOCK_END 0)

(insn 3700 2720 2722 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2722 3700 3703 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2713 (nil))
    (nil))

(insn 3703 2722 3791 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3791 3703 3792 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) -1 (nil)
    (nil))

(insn 3792 3791 3706 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3706 3792 3793 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3793 3706 3794 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 3794 3793 2729 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 2729 3794 2732 NOTE_INSN_LOOP_CONT 0)

(insn 2732 2729 3211 (set (reg/v:SI 4 esi)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(note 3211 2732 2687 NOTE_INSN_LOOP_VTOP 0)

(insn 2687 3211 2688 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 2732 (nil))
    (nil))

(jump_insn 2688 2687 2738 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2691)
            (pc))) 288 {*jcc_1} (insn_list 2687 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 96, registers live:
 7 [sp] 20 [frame] 45 56 57 66 69 70 71 722

(note 2738 2688 2739 NOTE_INSN_LOOP_END 0)

;; Start of basic block 97, registers live: 6 [bp] 7 [sp] 57 66 69 70 71
(code_label 2739 2738 3328 289 "" "" [1 uses])

(note 3328 2739 2742 [bb 97] NOTE_INSN_BASIC_BLOCK 0)

(insn 2742 3328 2744 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2744 2742 2746 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)) 27 {pushsi2} (insn_list 2742 (nil))
    (nil))

(insn 2746 2744 2747 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 2747 2746 2750 (call (mem:QI (symbol_ref:SI ("OutPutDev")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 2750 2747 2752 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 2752 2750 3212 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3212 2752 3213 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2750 (nil))
    (nil))

(jump_insn 3213 3212 3446 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2829)
            (pc))) 288 {*jcc_1} (insn_list 3212 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 97, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

;; Start of basic block 98, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(note 3446 3213 3381 [bb 98] NOTE_INSN_BASIC_BLOCK 0)

(insn 3381 3446 3709 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3709 3381 2753 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -132 [0xffffff7c])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 98, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71 721

(note 2753 3709 2759 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 99, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71 721
(code_label 2759 2753 3329 297 "" "" [1 uses])

(note 3329 2759 2764 [bb 99] NOTE_INSN_BASIC_BLOCK 0)

(insn 2764 3329 3217 (set (reg/v:SI 5 edi)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3217 2764 3218 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -132 [0xffffff7c])) 0))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 3218 3217 3447 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2820)
            (pc))) 288 {*jcc_1} (insn_list 3217 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 99, registers live:
 7 [sp] 20 [frame] 45 46 57 66 69 70 71 721

;; Start of basic block 100, registers live: 6 [bp] 7 [sp] 45 46 57 66 69 70 71 721
(note 3447 3218 3712 [bb 100] NOTE_INSN_BASIC_BLOCK 0)

(insn 3712 3447 3375 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3375 3712 3378 (set (reg/v:DF 9 st(1))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3378 3375 2765 (set (reg/v:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -132 [0xffffff7c])) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 100, registers live:
 7 [sp] 20 [frame] 45 46 57 66 69 70 71 719 720 721

(note 2765 3378 2771 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 101, registers live: 6 [bp] 7 [sp] 45 46 57 66 69 70 71 719 720 721
(code_label 2771 2765 3330 301 "" "" [1 uses])

(note 3330 2771 2774 [bb 101] NOTE_INSN_BASIC_BLOCK 0)

(insn 2774 3330 3715 (set (reg:SI 2 ecx)
        (plus:SI (reg/v:SI 5 edi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3715 2774 2775 (set (reg:SI 0 eax)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 2775 3715 2777 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 2774 (nil))
    (nil))

(note 2777 2775 3718 NOTE_INSN_DELETED 0)

(insn 3718 2777 2779 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 2779 3718 2781 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 2775 (nil))
    (nil))

(insn 2781 2779 2783 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2779 (nil))
    (nil))

(insn 2783 2781 2785 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 2781 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 2785 2783 2800 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 2783 (nil))
    (nil))

(note 2800 2785 3721 NOTE_INSN_DELETED 0)

(insn 3721 2800 3724 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3724 3721 2801 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2801 3724 3727 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg/v:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 2785 (nil))
    (nil))

(insn 3727 2801 2802 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2802 3727 3730 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 319 {*fop_df_1} (insn_list 2801 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 3730 2802 2804 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -108 [0xffffff94])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2804 3730 2806 (set (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2802 (nil))
    (nil))

(note 2806 2804 2809 NOTE_INSN_LOOP_CONT 0)

(insn 2809 2806 3221 (set (reg/v:SI 5 edi)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(note 3221 2809 2767 NOTE_INSN_LOOP_VTOP 0)

(insn 2767 3221 2768 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 2809 (nil))
    (nil))

(jump_insn 2768 2767 2815 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2771)
            (pc))) 288 {*jcc_1} (insn_list 2767 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 101, registers live:
 7 [sp] 20 [frame] 45 46 57 66 69 70 71 719 720 721

(note 2815 2768 2819 NOTE_INSN_LOOP_END 0)

(note 2819 2815 2820 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 102, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71 721
(code_label 2820 2819 3331 296 "" "" [1 uses])

(note 3331 2820 2822 [bb 102] NOTE_INSN_BASIC_BLOCK 0)

(insn 2822 3331 3216 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3216 2822 2755 NOTE_INSN_LOOP_VTOP 0)

(insn 2755 3216 2756 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -132 [0xffffff7c])) 0))) 2 {*cmpsi_1_insn} (insn_list 2822 (nil))
    (nil))

(jump_insn 2756 2755 2828 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2759)
            (pc))) 288 {*jcc_1} (insn_list 2755 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 102, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71 721

(note 2828 2756 2829 NOTE_INSN_LOOP_END 0)

;; Start of basic block 103, registers live: 6 [bp] 7 [sp] 57 66 69 70 71
(code_label 2829 2828 3332 295 "" "" [1 uses])

(note 3332 2829 2832 [bb 103] NOTE_INSN_BASIC_BLOCK 0)

(insn 2832 3332 2834 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2834 2832 2835 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -108 [0xffffff94])) 0)) 27 {pushsi2} (insn_list 2832 (nil))
    (nil))

(call_insn 2835 2834 2838 (call (mem:QI (symbol_ref:SI ("OutPutCor2")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 2838 2835 2840 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 2840 2838 3222 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3222 2840 3223 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2838 (nil))
    (nil))

(jump_insn 3223 3222 2841 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2975)
            (pc))) 288 {*jcc_1} (insn_list 3222 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 103, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(note 2841 3223 2847 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 104, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2847 2841 3333 307 "" "" [1 uses])

(note 3333 2847 2851 [bb 104] NOTE_INSN_BASIC_BLOCK 0)

(note 2851 3333 2853 NOTE_INSN_DELETED 0)

(note 2853 2851 2859 NOTE_INSN_DELETED 0)

(note 2859 2853 2863 NOTE_INSN_DELETED 0)

(note 2863 2859 3733 NOTE_INSN_DELETED 0)

(insn 3733 2863 2950 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("lookup"))
                        (const_int 4 [0x4])))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2950 3733 2951 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2951 2950 2952 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 2950 (nil))
    (nil))

(jump_insn 2952 2951 3334 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2966)
            (pc))) 288 {*jcc_1} (insn_list 2951 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 104, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71 687

;; Start of basic block 105, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71 687
(note 3334 2952 2954 [bb 105] NOTE_INSN_BASIC_BLOCK 0)

(note 2954 3334 2956 NOTE_INSN_DELETED 0)

(note 2956 2954 2957 NOTE_INSN_DELETED 0)

(jump_insn 2957 2956 2958 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 2959)) 0))
            (use (label_ref 2959))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 2959 (nil)))
;; End of basic block 105, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(barrier 2958 2957 2959)

;; Insn is not within a basic block
(code_label 2959 2958 2960 318 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 2960 2959 2961 (addr_vec:SI[ 
            (label_ref:SI 2870)
            (label_ref:SI 2870)
            (label_ref:SI 2880)
            (label_ref:SI 2898)
            (label_ref:SI 2918)
            (label_ref:SI 2918)
            (label_ref:SI 2918)
            (label_ref:SI 2937)
            (label_ref:SI 2937)
        ] ) -1 (nil)
    (nil))

(barrier 2961 2960 2866)

(note 2866 2961 2870 ("simplexfd.c") 530 0)

;; Start of basic block 106, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2870 2866 3335 310 "" "" [2 uses])

(note 3335 2870 3736 [bb 106] NOTE_INSN_BASIC_BLOCK 0)

(insn 3736 3335 2873 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2873 3736 2874 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 2874 2873 2876 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 2873 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 2876 2874 2878 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2874 (nil))
    (nil))

(jump_insn 2878 2876 2879 (set (pc)
        (label_ref 2966)) 296 {jump} (nil)
    (nil))
;; End of basic block 106, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(barrier 2879 2878 2880)

;; Start of basic block 107, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2880 2879 3336 311 "" "" [1 uses])

(note 3336 2880 2883 [bb 107] NOTE_INSN_BASIC_BLOCK 0)

(insn 2883 3336 2884 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0) 0 [0x0] 0 [0x0] 1074246656 [0x4007b400])
        (nil)))

(insn 2884 2883 3739 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 319 {*fop_df_1} (insn_list 2883 (nil))
    (nil))

(insn 3739 2884 2886 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2886 3739 2887 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 2887 2886 2889 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 2886 (nil))
    (nil))

(note 2889 2887 2890 NOTE_INSN_DELETED 0)

(insn 2890 2889 2891 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC65")) 0))) 314 {*fop_df_comm} (insn_list 2887 (nil))
    (nil))

(insn 2891 2890 3742 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 2884 (insn_list 2890 (nil)))
    (nil))

(insn 3742 2891 2892 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2892 3742 2894 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx)) 0))) 314 {*fop_df_comm} (insn_list 2891 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2894 2892 2896 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 2892 (nil))
    (nil))

(jump_insn 2896 2894 2897 (set (pc)
        (label_ref 2966)) 296 {jump} (nil)
    (nil))
;; End of basic block 107, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(barrier 2897 2896 2898)

;; Start of basic block 108, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2898 2897 3337 312 "" "" [1 uses])

(note 3337 2898 2901 [bb 108] NOTE_INSN_BASIC_BLOCK 0)

(insn 2901 3337 2902 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC52")) 0) 0 [0x0] 0 [0x0] 1074246656 [0x4007b400])
        (nil)))

(insn 2902 2901 3745 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 319 {*fop_df_1} (insn_list 2901 (nil))
    (nil))

(insn 3745 2902 2904 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2904 3745 2905 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (nil)))

(insn 2905 2904 2907 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 2904 (nil))
    (nil))

(note 2907 2905 2908 NOTE_INSN_DELETED 0)

(insn 2908 2907 2909 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC65")) 0))) 314 {*fop_df_comm} (insn_list 2905 (nil))
    (nil))

(insn 2909 2908 3748 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 2902 (insn_list 2908 (nil)))
    (nil))

(insn 3748 2909 2910 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2910 3748 2912 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi)) 0))) 314 {*fop_df_comm} (insn_list 2909 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 2912 2910 2914 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 2910 (nil))
    (nil))

(jump_insn 2914 2912 2915 (set (pc)
        (label_ref 2966)) 296 {jump} (nil)
    (nil))
;; End of basic block 108, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(barrier 2915 2914 2918)

;; Start of basic block 109, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2918 2915 3338 315 "" "" [3 uses])

(note 3338 2918 2921 [bb 109] NOTE_INSN_BASIC_BLOCK 0)

(insn 2921 3338 3751 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3751 2921 3787 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3787 3751 3788 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 3788 3787 2924 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) -1 (nil)
    (nil))

(call_insn 2924 3788 2926 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 2926 2924 2927 NOTE_INSN_DELETED 1075551008)

(insn 2927 2926 3754 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 2926 (nil))
    (nil))

(insn 3754 2927 2928 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2928 3754 2930 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 314 {*fop_df_comm} (insn_list 2927 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 2930 2928 2933 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2928 (nil))
    (nil))

(insn 2933 2930 2934 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 2934 2933 2935 (set (pc)
        (label_ref 2966)) 296 {jump} (nil)
    (nil))
;; End of basic block 109, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(barrier 2935 2934 2937)

;; Start of basic block 110, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2937 2935 3339 317 "" "" [2 uses])

(note 3339 2937 3757 [bb 110] NOTE_INSN_BASIC_BLOCK 0)

(insn 3757 3339 2940 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 2940 3757 2941 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2941 2940 2943 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_slip")) 0))) 314 {*fop_df_comm} (insn_list 2940 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 2943 2941 2965 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 2941 (nil))
    (nil))
;; End of basic block 110, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(note 2965 2943 2966 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 111, registers live: 6 [bp] 7 [sp] 45 57 66 69 70 71
(code_label 2966 2965 3340 306 "" "" [5 uses])

(note 3340 2966 2968 [bb 111] NOTE_INSN_BASIC_BLOCK 0)

(insn 2968 3340 3226 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3226 2968 2843 NOTE_INSN_LOOP_VTOP 0)

(insn 2843 3226 2844 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2968 (nil))
    (nil))

(jump_insn 2844 2843 2974 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2847)
            (pc))) 288 {*jcc_1} (insn_list 2843 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 111, registers live:
 7 [sp] 20 [frame] 45 57 66 69 70 71

(note 2974 2844 2975 NOTE_INSN_LOOP_END 0)

;; Start of basic block 112, registers live: 6 [bp] 7 [sp] 57 66 70 71
(code_label 2975 2974 3341 305 "" "" [1 uses])

(note 3341 2975 2978 [bb 112] NOTE_INSN_BASIC_BLOCK 0)

(insn 2978 3341 3227 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 3227 2978 3228 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 2978 (nil))
    (nil))

(jump_insn 3228 3227 3448 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 3055)
            (pc))) 288 {*jcc_1} (insn_list 3227 (nil))
    (expr_list:REG_BR_PROB (const_int 0 [0x0])
        (nil)))
;; End of basic block 112, registers live:
 7 [sp] 20 [frame] 45 57 66 70 71

;; Start of basic block 113, registers live: 6 [bp] 7 [sp] 45 57 66 70 71
(note 3448 3228 3372 [bb 113] NOTE_INSN_BASIC_BLOCK 0)

(insn 3372 3448 3760 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3760 3372 2979 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 113, registers live:
 7 [sp] 20 [frame] 45 57 66 70 71 718

(note 2979 3760 2985 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 114, registers live: 6 [bp] 7 [sp] 45 57 66 70 71 718
(code_label 2985 2979 3342 324 "" "" [1 uses])

(note 3342 2985 2990 [bb 114] NOTE_INSN_BASIC_BLOCK 0)

(insn 2990 3342 3232 (set (reg/v:SI 5 edi)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3232 2990 3233 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 3233 3232 3449 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 3046)
            (pc))) 288 {*jcc_1} (insn_list 3232 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 114, registers live:
 7 [sp] 20 [frame] 45 46 57 66 70 71 718

;; Start of basic block 115, registers live: 6 [bp] 7 [sp] 45 46 57 66 70 71 718
(note 3449 3233 3763 [bb 115] NOTE_INSN_BASIC_BLOCK 0)

(insn 3763 3449 3366 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3366 3763 3369 (set (reg/v:DF 9 st(1))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3369 3366 2991 (set (reg/v:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 115, registers live:
 7 [sp] 20 [frame] 45 46 57 66 70 71 716 717 718

(note 2991 3369 2997 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 116, registers live: 6 [bp] 7 [sp] 45 46 57 66 70 71 716 717 718
(code_label 2997 2991 3343 328 "" "" [1 uses])

(note 3343 2997 3000 [bb 116] NOTE_INSN_BASIC_BLOCK 0)

(insn 3000 3343 3766 (set (reg:SI 2 ecx)
        (plus:SI (reg/v:SI 5 edi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 3766 3000 3001 (set (reg:SI 0 eax)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 3001 3766 3003 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 3000 (nil))
    (nil))

(note 3003 3001 3769 NOTE_INSN_DELETED 0)

(insn 3769 3003 3005 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 3005 3769 3007 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 3001 (nil))
    (nil))

(insn 3007 3005 3009 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 3005 (nil))
    (nil))

(insn 3009 3007 3011 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 3007 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(insn 3011 3009 3026 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 3009 (nil))
    (nil))

(note 3026 3011 3772 NOTE_INSN_DELETED 0)

(insn 3772 3026 3775 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -108 [0xffffff94])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3775 3772 3027 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 3027 3775 3778 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 3011 (nil))
    (nil))

(insn 3778 3027 3028 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3028 3778 3781 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 314 {*fop_df_comm} (insn_list 3027 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 3781 3028 3030 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 3030 3781 3032 (set (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 3028 (nil))
    (nil))

(note 3032 3030 3035 NOTE_INSN_LOOP_CONT 0)

(insn 3035 3032 3236 (set (reg/v:SI 5 edi)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(note 3236 3035 2993 NOTE_INSN_LOOP_VTOP 0)

(insn 2993 3236 2994 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 3035 (nil))
    (nil))

(jump_insn 2994 2993 3041 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2997)
            (pc))) 288 {*jcc_1} (insn_list 2993 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 116, registers live:
 7 [sp] 20 [frame] 45 46 57 66 70 71 716 717 718

(note 3041 2994 3045 NOTE_INSN_LOOP_END 0)

(note 3045 3041 3046 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 117, registers live: 6 [bp] 7 [sp] 45 57 66 70 71 718
(code_label 3046 3045 3344 323 "" "" [1 uses])

(note 3344 3046 3048 [bb 117] NOTE_INSN_BASIC_BLOCK 0)

(insn 3048 3344 3231 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 3231 3048 2981 NOTE_INSN_LOOP_VTOP 0)

(insn 2981 3231 2982 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 2 {*cmpsi_1_insn} (insn_list 3048 (nil))
    (nil))

(jump_insn 2982 2981 3054 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 2985)
            (pc))) 288 {*jcc_1} (insn_list 2981 (nil))
    (expr_list:REG_BR_PROB (const_int 10000 [0x2710])
        (nil)))
;; End of basic block 117, registers live:
 7 [sp] 20 [frame] 45 57 66 70 71 718

(note 3054 2982 3055 NOTE_INSN_LOOP_END 0)

;; Start of basic block 118, registers live: 6 [bp] 7 [sp] 57 66
(code_label 3055 3054 3346 322 "" "" [1 uses])

(note 3346 3055 3058 [bb 118] NOTE_INSN_BASIC_BLOCK 0)

(insn 3058 3346 3060 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3060 3058 3061 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 27 {pushsi2} (insn_list 3058 (nil))
    (nil))

(call_insn 3061 3060 3064 (call (mem:QI (symbol_ref:SI ("OutPutCov")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 3064 3061 3066 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3066 3064 3068 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (insn_list 3064 (nil))
    (nil))

(insn 3068 3066 3069 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 3069 3068 3072 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3072 3069 3074 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3074 3072 3076 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC62"))) 27 {pushsi2} (insn_list 3072 (nil))
    (nil))

(insn 3076 3074 3077 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 3077 3076 3782 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3782 3077 3783 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3783 3782 3082 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 3082 3783 3084 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC63"))) 27 {pushsi2} (nil)
    (nil))

(insn 3084 3082 3085 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 3085 3084 3088 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3088 3085 3090 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3090 3088 3092 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 3088 (nil))
    (nil))

(insn 3092 3090 3093 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC62"))) 27 {pushsi2} (insn_list 3090 (nil))
    (nil))

(call_insn 3093 3092 3096 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3096 3093 3784 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3784 3096 3785 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 3785 3784 3100 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 3100 3785 3101 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC63"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 3101 3100 3104 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 3104 3101 3106 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 3106 3104 3107 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 3104 (nil))
    (nil))

(call_insn 3107 3106 3345 (call (mem:QI (symbol_ref:SI ("exit")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 3345 3107 3108 (use (const_int 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 118, registers live:
 7 [sp]

(barrier 3108 3345 3110)

(note 3110 3108 3454 0x401a6e60 NOTE_INSN_BLOCK_END 0)

(note 3454 3110 0 NOTE_INSN_DELETED 0)


;; Function amebsa

;; 34 regs to allocate: 124 (2) 68 (2) 69 (2) 63 (2) 123 (2) 55 61 (2) 56 62 (2) 73 57 149 65 (2) 66 (2) 52 148 152 151 133 (2) 153 (2) 42 54 53 43 49 45 51 (2) 48 47 46 44 58 60 59
;; 42 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 43 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 44 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 45 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 46 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 47 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 48 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 49 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 50 conflicts: 42 43 44 45 46 47 48 49 50 51 58 59 60 0 1 7
;; 51 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 52 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 55 58 59 60 65 66 68 99 100 101 102 124 126 127 128 129 130 131 132 133 134 135 137 0 1 7 8
;; 53 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 61 65 66 67 68 69 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 122 123 124 125 145 146 147 0 3 4 7 8 9 10
;; 54 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 55 57 58 59 60 61 63 65 66 67 68 69 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 145 147 0 1 3 4 7 8 9 10
;; 55 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 126 127 128 129 130 131 132 133 134 135 0 1 7 8
;; 56 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 71 72 141 142 148 149 151 152 153 0 7
;; 57 conflicts: 42 43 44 45 46 47 48 49 51 54 56 57 58 59 60 62 63 71 72 114 115 116 117 118 141 142 148 149 151 152 153 0 1 7
;; 58 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 59 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 79 80 81 82 83 84 87 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 60 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 70 71 72 73 75 90 91 92 93 95 96 97 98 99 100 101 102 103 106 108 110 112 113 114 115 116 117 118 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 138 140 141 142 145 146 147 148 149 151 152 153 0 1 3 4 7 8 9 10
;; 61 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66 108 110 112 0 7 9 10
;; 62 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 71 72 141 142 148 149 151 152 153 0 7
;; 63 conflicts: 42 43 44 45 46 47 48 49 51 54 57 58 59 60 63 113 114 115 116 117 118 0 1 7
;; 65 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 61 65 66 68 69 95 96 97 98 99 100 101 102 103 106 108 110 112 122 123 124 125 147 0 7 8 9 10
;; 66 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 61 65 66 68 69 95 96 97 98 99 100 101 102 103 106 108 110 112 122 123 124 125 147 0 7 8 9 10
;; 67 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 67 69 145 0 3 4 7 8
;; 68 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68 124 7
;; 68 preferences: 8
;; 69 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 67 69 3 4 7
;; 69 preferences: 8
;; 70 conflicts: 42 43 44 45 46 47 48 49 51 58 59 60 70 0 1 7
;; 71 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 71 151 152 153 0 7
;; 72 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 72 151 152 153 0 7
;; 73 conflicts: 42 43 44 45 46 47 48 49 51 58 59 60 73 75 0 7
;; 75 conflicts: 42 43 44 45 46 47 48 49 51 58 59 60 73 75 0 7
;; 79 conflicts: 42 43 44 45 46 47 48 49 51 58 59 79 1 7
;; 80 conflicts: 42 43 44 45 46 47 48 49 51 58 59 80 81 82 83 0 1 7
;; 81 conflicts: 42 43 44 45 46 47 48 49 51 58 59 80 81 0 1 7
;; 82 conflicts: 42 43 44 45 46 47 48 49 51 58 59 80 82 0 1 7
;; 83 conflicts: 42 43 44 45 46 47 48 49 51 58 59 80 83 84 0 1 7
;; 84 conflicts: 42 43 44 45 46 47 48 49 51 58 59 83 84 0 1 7
;; 87 conflicts: 42 43 44 45 46 47 48 49 51 58 59 87 1 7
;; 90 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 90 7 8
;; 91 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 91 7 8
;; 92 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 92 7 8
;; 93 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 93 7 8
;; 93 preferences: 10
;; 95 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 95 7 8
;; 96 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 96 7 8
;; 97 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 97 7 8
;; 98 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 98 7 8
;; 99 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 99 7 8
;; 100 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 100 7 8
;; 101 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 101 7 8
;; 102 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 102 7 8
;; 103 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 103 7 8
;; 106 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 106 108 110 125 7 8 9 10
;; 108 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66 106 108 110 7 8 9 10
;; 110 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66 106 108 110 7 8 9 10
;; 112 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66 112 7 9
;; 113 conflicts: 42 43 44 45 46 47 48 49 51 54 58 59 60 63 113 0 1 7
;; 114 conflicts: 42 43 44 45 46 47 48 49 51 54 57 58 59 60 63 114 0 7
;; 115 conflicts: 42 43 44 45 46 47 48 49 51 54 57 58 59 60 63 115 0 7
;; 116 conflicts: 42 43 44 45 46 47 48 49 51 54 57 58 59 60 63 116 0 1 7
;; 117 conflicts: 42 43 44 45 46 47 48 49 51 54 57 58 59 60 63 117 0 7
;; 118 conflicts: 42 43 44 45 46 47 48 49 51 54 57 58 59 60 63 118 0 7
;; 122 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 122 7 8
;; 123 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 123 7
;; 124 conflicts: 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68 124 7
;; 125 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 106 125 7 8 9
;; 126 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 126 133 1 7
;; 127 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 127 128 129 133 0 1 7
;; 128 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 127 128 133 0 1 7
;; 129 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 127 129 131 133 0 1 7 8
;; 130 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 130 133 7 8
;; 131 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 129 131 133 0 7 8
;; 132 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 132 133 134 135 0 7 8
;; 133 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 126 127 128 129 130 131 132 133 134 135 0 1 7 8
;; 134 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 132 133 134 0 7 8
;; 135 conflicts: 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 132 133 135 0 7 8
;; 137 conflicts: 42 43 44 45 46 47 48 49 51 52 54 58 59 60 137 7 8
;; 138 conflicts: 42 43 44 45 46 47 48 49 51 58 59 60 138 0 7
;; 140 conflicts: 42 43 44 45 46 47 48 49 51 58 59 60 140 0 7
;; 141 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 141 148 149 0 7
;; 142 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 142 148 149 0 7
;; 145 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 67 145 0 3 4 7
;; 146 conflicts: 42 43 44 45 46 47 48 49 51 53 58 59 60 146 0 7
;; 147 conflicts: 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 147 0 7
;; 148 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 141 142 148 149 0 7
;; 149 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 141 142 148 149 0 7
;; 151 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 71 72 151 152 153 0 7
;; 152 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 71 72 151 152 153 0 7
;; 153 conflicts: 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 71 72 151 152 153 0 7

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 6.
Using reg 0 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 10.
Using reg 0 for reload 0
Spilling for insn 12.
Using reg 0 for reload 0
Spilling for insn 14.
Using reg 0 for reload 0
Spilling for insn 16.
Using reg 0 for reload 0
Spilling for insn 18.
Using reg 0 for reload 0
Spilling for insn 20.
Spilling for insn 22.
Using reg 8 for reload 0
Spilling for insn 30.
Spilling for insn 33.
Using reg 0 for reload 1
Using reg 0 for reload 0
Spilling for insn 36.
Spilling for insn 41.
Spilling for insn 772.
Using reg 0 for reload 0
Spilling for insn 880.
Spilling for insn 777.
Spilling for insn 874.
Spilling for insn 877.
Spilling for insn 65.
Spilling for insn 68.
Using reg 5 for reload 0
Spilling for insn 81.
Using reg 0 for reload 0
Spilling for insn 47.
Spilling for insn 101.
Using reg 0 for reload 0
Spilling for insn 103.
Spilling for insn 110.
Using reg 0 for reload 0
Spilling for insn 117.
Spilling for insn 119.
Spilling for insn 121.
Spilling for insn 128.
Using reg 0 for reload 0
Spilling for insn 148.
Spilling for insn 155.
Spilling for insn 158.
Spilling for insn 165.
Spilling for insn 174.
Spilling for insn 178.
Spilling for insn 179.
Using reg 0 for reload 0
Spilling for insn 183.
Spilling for insn 190.
Spilling for insn 199.
Spilling for insn 203.
Spilling for insn 204.
Using reg 0 for reload 0
Spilling for insn 461.
Spilling for insn 464.
Spilling for insn 208.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 216.
Spilling for insn 219.
Spilling for insn 222.
Spilling for insn 225.
Spilling for insn 228.
Spilling for insn 782.
Spilling for insn 249.
Spilling for insn 258.
Spilling for insn 262.
Spilling for insn 263.
Using reg 0 for reload 0
Spilling for insn 267.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 275.
Spilling for insn 278.
Using reg 0 for reload 0
Spilling for insn 467.
Spilling for insn 282.
Using reg 0 for reload 0
Spilling for insn 290.
Spilling for insn 293.
Spilling for insn 296.
Spilling for insn 302.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 308.
Spilling for insn 236.
Spilling for insn 325.
Spilling for insn 470.
Spilling for insn 348.
Spilling for insn 357.
Spilling for insn 359.
Spilling for insn 361.
Using reg 0 for reload 0
Spilling for insn 363.
Using reg 0 for reload 2
Using reg 8 for reload 0
Using reg 9 for reload 1
Spilling for insn 370.
Using reg 0 for reload 0
Spilling for insn 375.
Spilling for insn 381.
Using reg 0 for reload 2
Using reg 8 for reload 0
Using reg 9 for reload 1
Spilling for insn 388.
Spilling for insn 395.
Spilling for insn 398.
Using reg 0 for reload 0
Spilling for insn 401.
Using reg 4 for reload 0
Using reg 5 for reload 1
Spilling for insn 402.
Using reg 4 for reload 0
Spilling for insn 405.
Using reg 0 for reload 0
Using reg 1 for reload 1
Spilling for insn 787.
Spilling for insn 420.
Using reg 0 for reload 0
Spilling for insn 422.
Spilling for insn 426.
Using reg 5 for reload 0
Spilling for insn 427.
Using reg 5 for reload 0
Spilling for insn 429.
Spilling for insn 433.
Using reg 1 for reload 0
Spilling for insn 411.
Spilling for insn 458.
Using reg 0 for reload 0
Spilling for insn 475.
Spilling for insn 477.
Spilling for insn 479.
Spilling for insn 481.
Spilling for insn 483.
Spilling for insn 485.
Spilling for insn 487.
Spilling for insn 489.
Spilling for insn 491.
Spilling for insn 493.
Spilling for insn 495.
Spilling for insn 502.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 510.
Spilling for insn 512.
Spilling for insn 514.
Spilling for insn 516.
Spilling for insn 518.
Spilling for insn 520.
Spilling for insn 522.
Spilling for insn 524.
Spilling for insn 526.
Spilling for insn 528.
Spilling for insn 530.
Spilling for insn 542.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 550.
Spilling for insn 555.
Spilling for insn 557.
Spilling for insn 559.
Spilling for insn 561.
Spilling for insn 563.
Spilling for insn 565.
Spilling for insn 567.
Spilling for insn 569.
Spilling for insn 571.
Spilling for insn 573.
Spilling for insn 575.
Spilling for insn 582.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 792.
Spilling for insn 601.
Spilling for insn 797.
Spilling for insn 868.
Spilling for insn 618.
Spilling for insn 621.
Spilling for insn 625.
Using reg 3 for reload 0
Spilling for insn 626.
Using reg 1 for reload 0
Spilling for insn 631.
Using reg 0 for reload 0
Spilling for insn 633.
Spilling for insn 638.
Using reg 1 for reload 0
Spilling for insn 610.
Spilling for insn 656.
Spilling for insn 658.
Spilling for insn 659.
Spilling for insn 663.
Using reg 0 for reload 0
Spilling for insn 593.
Spilling for insn 685.
Using reg 1 for reload 0
Spilling for insn 686.
Spilling for insn 688.
Using reg 1 for reload 0
Spilling for insn 802.
Spilling for insn 702.
Spilling for insn 807.
Spilling for insn 863.
Spilling for insn 866.
Spilling for insn 712.
Spilling for insn 715.
Using reg 5 for reload 0
Spilling for insn 728.
Using reg 0 for reload 0
Spilling for insn 694.
Spilling for insn 751.
Using reg 0 for reload 0
Spilling for insn 760.
 Register 50 now in 2.

 Register 80 now in 2.

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 6.
Using reg 0 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 10.
Using reg 0 for reload 0
Spilling for insn 12.
Using reg 0 for reload 0
Spilling for insn 14.
Using reg 0 for reload 0
Spilling for insn 16.
Using reg 0 for reload 0
Spilling for insn 18.
Using reg 0 for reload 0
Spilling for insn 20.
Spilling for insn 22.
Using reg 8 for reload 0
Spilling for insn 30.
Spilling for insn 33.
Using reg 0 for reload 1
Using reg 0 for reload 0
Spilling for insn 36.
Spilling for insn 39.
Spilling for insn 41.
Spilling for insn 772.
Using reg 0 for reload 0
Spilling for insn 880.
Spilling for insn 777.
Spilling for insn 874.
Spilling for insn 877.
Spilling for insn 65.
Spilling for insn 68.
Using reg 5 for reload 0
Spilling for insn 81.
Using reg 0 for reload 0
Spilling for insn 47.
Spilling for insn 101.
Using reg 0 for reload 0
Spilling for insn 103.
Spilling for insn 110.
Using reg 0 for reload 0
Spilling for insn 117.
Spilling for insn 119.
Spilling for insn 121.
Spilling for insn 125.
Spilling for insn 128.
Using reg 0 for reload 0
Spilling for insn 132.
Spilling for insn 148.
Spilling for insn 155.
Spilling for insn 158.
Spilling for insn 165.
Spilling for insn 174.
Spilling for insn 178.
Spilling for insn 179.
Using reg 0 for reload 0
Spilling for insn 183.
Spilling for insn 190.
Spilling for insn 199.
Spilling for insn 203.
Spilling for insn 204.
Using reg 0 for reload 0
Spilling for insn 461.
Spilling for insn 464.
Spilling for insn 208.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 216.
Spilling for insn 219.
Spilling for insn 222.
Spilling for insn 225.
Spilling for insn 228.
Spilling for insn 782.
Spilling for insn 249.
Spilling for insn 258.
Spilling for insn 262.
Spilling for insn 263.
Using reg 0 for reload 0
Spilling for insn 267.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 275.
Spilling for insn 278.
Using reg 0 for reload 0
Spilling for insn 467.
Spilling for insn 282.
Using reg 0 for reload 0
Spilling for insn 290.
Spilling for insn 293.
Spilling for insn 296.
Spilling for insn 302.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 308.
Spilling for insn 236.
Spilling for insn 325.
Spilling for insn 470.
Spilling for insn 348.
Spilling for insn 357.
Spilling for insn 359.
Spilling for insn 361.
Using reg 0 for reload 0
Spilling for insn 363.
Using reg 0 for reload 2
Using reg 8 for reload 0
Using reg 9 for reload 1
Spilling for insn 370.
Using reg 0 for reload 0
Spilling for insn 375.
Spilling for insn 381.
Using reg 0 for reload 2
Using reg 8 for reload 0
Using reg 9 for reload 1
Spilling for insn 388.
Spilling for insn 395.
Spilling for insn 398.
Using reg 0 for reload 0
Spilling for insn 401.
Using reg 4 for reload 0
Using reg 5 for reload 1
Spilling for insn 402.
Using reg 4 for reload 0
Spilling for insn 405.
Using reg 0 for reload 0
Using reg 1 for reload 1
Spilling for insn 787.
Spilling for insn 420.
Using reg 0 for reload 0
Spilling for insn 422.
Spilling for insn 426.
Using reg 5 for reload 0
Spilling for insn 427.
Using reg 5 for reload 0
Spilling for insn 429.
Spilling for insn 433.
Using reg 1 for reload 0
Spilling for insn 411.
Spilling for insn 458.
Using reg 0 for reload 0
Spilling for insn 475.
Spilling for insn 477.
Spilling for insn 479.
Spilling for insn 481.
Spilling for insn 483.
Spilling for insn 485.
Spilling for insn 487.
Spilling for insn 489.
Spilling for insn 491.
Spilling for insn 493.
Spilling for insn 495.
Spilling for insn 502.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 510.
Spilling for insn 512.
Spilling for insn 514.
Spilling for insn 516.
Spilling for insn 518.
Spilling for insn 520.
Spilling for insn 522.
Spilling for insn 524.
Spilling for insn 526.
Spilling for insn 528.
Spilling for insn 530.
Spilling for insn 542.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 550.
Spilling for insn 555.
Spilling for insn 557.
Spilling for insn 559.
Spilling for insn 561.
Spilling for insn 563.
Spilling for insn 565.
Spilling for insn 567.
Spilling for insn 569.
Spilling for insn 571.
Spilling for insn 573.
Spilling for insn 575.
Spilling for insn 582.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 792.
Spilling for insn 601.
Spilling for insn 797.
Spilling for insn 868.
Spilling for insn 618.
Spilling for insn 621.
Spilling for insn 625.
Using reg 3 for reload 0
Spilling for insn 626.
Using reg 1 for reload 0
Spilling for insn 631.
Using reg 0 for reload 0
Spilling for insn 633.
Spilling for insn 638.
Using reg 1 for reload 0
Spilling for insn 610.
Spilling for insn 656.
Spilling for insn 658.
Spilling for insn 659.
Spilling for insn 663.
Using reg 0 for reload 0
Spilling for insn 593.
Spilling for insn 685.
Using reg 1 for reload 0
Spilling for insn 686.
Spilling for insn 688.
Using reg 1 for reload 0
Spilling for insn 802.
Spilling for insn 702.
Spilling for insn 807.
Spilling for insn 863.
Spilling for insn 866.
Spilling for insn 712.
Spilling for insn 715.
Using reg 5 for reload 0
Spilling for insn 728.
Using reg 0 for reload 0
Spilling for insn 694.
Spilling for insn 751.
Using reg 0 for reload 0
Spilling for insn 760.
;; Register dispositions:
50 in 2  52 in 5  55 in 2  56 in 1  57 in 4  62 in 8  
63 in 2  65 in 3  67 in 3  68 in 8  69 in 8  70 in 0  
71 in 0  72 in 0  73 in 1  75 in 0  79 in 1  80 in 2  
81 in 1  82 in 1  83 in 1  84 in 0  87 in 1  90 in 8  
91 in 8  92 in 8  93 in 8  95 in 8  96 in 8  97 in 8  
98 in 8  99 in 8  100 in 8  101 in 8  102 in 8  103 in 8  
106 in 8  108 in 9  110 in 10  112 in 9  113 in 0  114 in 0  
115 in 0  116 in 0  117 in 0  118 in 0  122 in 8  123 in 8  
124 in 9  125 in 9  126 in 1  127 in 1  128 in 0  129 in 0  
130 in 8  131 in 8  132 in 8  133 in 9  134 in 0  135 in 0  
137 in 8  138 in 0  140 in 0  141 in 0  142 in 0  145 in 0  
146 in 0  147 in 0  148 in 3  149 in 2  151 in 3  152 in 2  
153 in 9  

;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 10 16 17 18 20

(note 2 0 812 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 812 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(note 4 812 6 NOTE_INSN_DELETED 0)

(note 6 4 8 NOTE_INSN_DELETED 0)

(note 8 6 10 NOTE_INSN_DELETED 0)

(note 10 8 12 NOTE_INSN_DELETED 0)

(note 12 10 14 NOTE_INSN_DELETED 0)

(note 14 12 16 NOTE_INSN_DELETED 0)

(note 16 14 18 NOTE_INSN_DELETED 0)

(note 18 16 1165 NOTE_INSN_DELETED 0)

(insn 1165 18 1166 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 40 [0x28])) 0)) -1 (nil)
    (nil))

(insn 1166 1165 22 (set (reg:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 44 [0x2c])) 0)) -1 (nil)
    (nil))

(insn 22 1166 888 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 48 [0x30])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 888 22 23 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 23 888 26 NOTE_INSN_FUNCTION_BEG 0)

(note 26 23 30 0x4021dc80 NOTE_INSN_BLOCK_BEG 0)

(insn 30 26 891 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 891 30 33 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 33 891 894 (set (reg:SI 0 eax)
        (mem:SI (reg:SI 0 eax) 0)) 33 {*movsi_1} (insn_list 18 (nil))
    (nil))

(insn 894 33 36 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 36 894 1167 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 1167 36 1168 (set (reg:SI 0 eax)
        (reg:SI 2 ecx)) -1 (nil)
    (nil))

(insn 1168 1167 39 (set (reg:SI 1 edx)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 39 1168 1170 (parallel[ 
            (set (reg:SI 1 edx)
                (xor:SI (reg:SI 1 edx)
                    (const_int -2147483648 [0x80000000])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (insn_list 20 (nil))
    (expr_list:REG_EQUIV (mem/f:DF (symbol_ref:SI ("negtemp")) 0)
        (nil)))

(insn 1170 39 1171 (set (mem/f:SI (symbol_ref:SI ("negtemp")) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 1171 1170 44 (set (mem/f:SI (const:SI (plus:SI (symbol_ref:SI ("negtemp"))
                    (const_int 4 [0x4]))) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 44 1171 900 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 900 44 772 (set (reg:SI 1 edx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 772 900 773 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 edx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 30 (nil))
    (nil))

(jump_insn 773 772 881 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 92)
            (pc))) 288 {*jcc_1} (insn_list 772 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 57 58 59 60

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 57 58 59 60
(note 881 773 880 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 880 881 45 (set (reg/v:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC67")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 57 58 59 60 153

(note 45 880 51 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 57 58 59 60 153
(code_label 51 45 813 340 "" "" [1 uses])

(note 813 51 55 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 55 813 57 (set (reg/v:DF 8 st(0))
        (reg/v:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 57 55 777 (set (reg/v:SI 1 edx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 777 57 778 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 1 edx)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 57 (nil))
    (nil))

(jump_insn 778 777 882 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 288 {*jcc_1} (insn_list 777 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 153

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 153
(note 882 778 874 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 874 882 877 (set (reg/v:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 877 874 58 (set (reg/v:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("nverts")) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 151 152 153

(note 58 877 64 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 151 152 153
(code_label 64 58 814 344 "" "" [1 uses])

(note 814 64 903 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 903 814 65 (set (reg:SI 0 eax)
        (reg/v:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 65 903 67 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 67 65 906 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 65 (nil))
    (nil))

(insn 906 67 68 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 68 906 69 (set (reg/v:DF 8 st(0))
        (plus:DF (reg/v:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi)) 0))) 314 {*fop_df_comm} (insn_list 67 (nil))
    (nil))

(note 69 68 72 NOTE_INSN_LOOP_CONT 0)

(insn 72 69 781 (parallel[ 
            (set (reg/v:SI 1 edx)
                (plus:SI (reg/v:SI 1 edx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 781 72 60 NOTE_INSN_LOOP_VTOP 0)

(insn 60 781 61 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 1 edx)
            (reg/v:SI 2 ecx))) 2 {*cmpsi_1_insn} (insn_list 72 (nil))
    (nil))

(jump_insn 61 60 78 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 288 {*jcc_1} (insn_list 60 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 151 152 153

(note 78 61 79 NOTE_INSN_LOOP_END 0)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 57 58 59 60 62 153
(code_label 79 78 815 342 "" "" [1 uses])

(note 815 79 909 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 909 815 81 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 81 909 82 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 82 81 85 NOTE_INSN_LOOP_CONT 0)

(insn 85 82 776 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 776 85 47 NOTE_INSN_LOOP_VTOP 0)

(insn 47 776 48 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 85 (nil))
    (nil))

(jump_insn 48 47 91 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 288 {*jcc_1} (insn_list 47 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 57 58 59 60 153

(note 91 48 92 NOTE_INSN_LOOP_END 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(code_label 92 91 816 338 "" "" [1 uses])

(note 816 92 94 [bb 6] NOTE_INSN_BASIC_BLOCK 0)
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

(note 94 816 764 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(code_label 764 94 817 408 "" "" [1 uses])

(note 817 764 100 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(note 100 817 915 NOTE_INSN_DELETED 0)

(insn 915 100 912 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 912 915 101 (set (reg:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 101 912 918 (parallel[ 
            (set (reg:SI 1 edx)
                (minus:SI (reg:SI 1 edx)
                    (mem:SI (reg:SI 3 ebx) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 138 {*subsi_1} (nil)
    (nil))

(insn 918 101 103 (set (reg:SI 0 eax)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 103 918 104 (parallel[ 
            (set (reg:SI 0 eax)
                (minus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -52 [0xffffffcc])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 138 {*subsi_1} (insn_list 101 (nil))
    (nil))

(insn 104 103 105 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 eax)
            (const_int 99 [0x63]))) 2 {*cmpsi_1_insn} (insn_list 103 (nil))
    (nil))

(jump_insn 105 104 818 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 152)
            (pc))) 288 {*jcc_1} (insn_list 104 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60 73

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 73
(note 818 105 921 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 921 818 1162 (set (reg:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1162 921 1163 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 4 esi)
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 1163 1162 117 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (reg:SI 4 esi) 0)) -1 (nil)
    (nil))

(insn 117 1163 119 (set (mem/f:SI (symbol_ref:SI ("count")) 0)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 119 117 121 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 1 edx)) 27 {pushsi2} (nil)
    (nil))

(insn 121 119 122 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC68"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 122 121 125 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 125 122 127 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("count")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("count")) 0)
        (nil)))

(insn 127 125 924 (set (reg:SI 1 edx)
        (const_int 1374389535 [0x51eb851f])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (const_int 1374389535 [0x51eb851f])
        (nil)))

(insn 924 127 128 (set (reg:SI 0 eax)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(insn 128 924 130 (parallel[ 
            (set (reg:SI 1 edx)
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 0 eax))
                            (sign_extend:DI (reg:SI 1 edx)))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 0 eax))
            (clobber (reg:CC 17 flags))
        ] ) 155 {smulsi3_highpart} (insn_list 125 (insn_list 127 (nil)))
    (nil))

(insn 130 128 927 (parallel[ 
            (set (reg:SI 1 edx)
                (ashiftrt:SI (reg:SI 1 edx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 128 (nil))
    (nil))

(insn 927 130 132 (set (reg:SI 0 eax)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(insn 132 927 134 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 247 {ashrsi3_31} (nil)
    (nil))

(insn 134 132 138 (parallel[ 
            (set (reg:SI 1 edx)
                (minus:SI (reg:SI 1 edx)
                    (reg:SI 0 eax)))
            (clobber (reg:CC 17 flags))
        ] ) 138 {*subsi_1} (insn_list 130 (insn_list 132 (nil)))
    (expr_list:REG_EQUAL (div:SI (reg:SI 2 ecx)
            (const_int 100 [0x64]))
        (nil)))

(note 138 134 140 NOTE_INSN_DELETED 0)

(insn 140 138 142 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 1 edx)
                (const_int 4 [0x4]))
            (reg:SI 1 edx))) 113 {*lea_0} (insn_list 134 (nil))
    (nil))

(note 142 140 144 NOTE_INSN_DELETED 0)

(insn 144 142 146 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 1 edx)
                (const_int 4 [0x4]))
            (reg:SI 1 edx))) 113 {*lea_0} (insn_list 140 (nil))
    (nil))

(note 146 144 148 NOTE_INSN_DELETED 0)

(insn 148 146 930 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 144 (nil))
    (nil))

(insn 930 148 151 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 151 930 152 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(code_label 152 151 819 350 "" "" [1 uses])

(note 819 152 155 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 155 819 158 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 158 155 161 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (nil))

(insn 161 158 163 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 163 161 165 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 161 (nil))
    (nil))

(insn 165 163 166 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("idum"))) 27 {pushsi2} (insn_list 163 (nil))
    (nil))

(call_insn 166 165 168 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 8 [0x8]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 168 166 170 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 170 168 172 NOTE_INSN_DELETED 1075989872)

(insn 172 170 1151 (set (reg:DF 8 st(0))
        (float_extend:DF (reg:SF 8 st(0)))) 86 {*extendsfdf2_1} (insn_list 170 (nil))
    (nil))

(insn 1151 172 1152 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1152 1151 175 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 175 1152 177 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 177 175 178 NOTE_INSN_DELETED 1075989568)

(insn 178 177 933 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("negtemp")) 0))) 314 {*fop_df_comm} (insn_list 177 (nil))
    (nil))

(insn 933 178 179 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 179 933 936 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (reg:SI 1 edx) 0))) 314 {*fop_df_comm} (insn_list 178 (nil))
    (nil))

(insn 936 179 1153 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1153 936 1154 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) -1 (nil)
    (nil))

(insn 1154 1153 1155 (set (reg:SI 4 esi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)) -1 (nil)
    (nil))

(insn 1155 1154 1156 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 1156 1155 186 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 186 1156 188 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 188 186 190 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 186 (nil))
    (nil))

(insn 190 188 191 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("idum"))) 27 {pushsi2} (insn_list 188 (nil))
    (nil))

(call_insn 191 190 193 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 8 [0x8]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 193 191 195 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 195 193 197 NOTE_INSN_DELETED 1075989200)

(insn 197 195 1157 (set (reg:DF 8 st(0))
        (float_extend:DF (reg:SF 8 st(0)))) 86 {*extendsfdf2_1} (insn_list 195 (nil))
    (nil))

(insn 1157 197 1158 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1158 1157 200 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 200 1158 202 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 202 200 203 NOTE_INSN_DELETED 1075988912)

(insn 203 202 942 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("negtemp")) 0))) 314 {*fop_df_comm} (insn_list 202 (nil))
    (nil))

(insn 942 203 204 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 204 942 461 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 5 edi)
                    (const_int 8 [0x8])) 0))) 314 {*fop_df_comm} (insn_list 203 (nil))
    (expr_list:REG_EQUIV (mem/f:DF (plus:SI (reg:SI 20 frame)
                (const_int -8 [0xfffffff8])) 0)
        (nil)))

(insn 461 204 207 (set (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 204 (nil))
    (nil))

(insn 207 461 464 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 464 207 945 NOTE_INSN_DELETED 0)

(insn 945 464 1159 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1159 945 1160 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 1160 1159 1161 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 69 [0x45]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 1161 1160 820 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 230))) -1 (nil)
    (nil))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66 123

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60 65 123
(note 820 1161 216 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 216 820 219 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (insn_list:REG_WAS_0 155 (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn 219 216 222 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 222 219 1147 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1147 222 1148 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 1148 1147 1149 (set (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 1149 1148 1150 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) -1 (nil)
    (nil))

(insn 1150 1149 230 (set (reg:SI 4 esi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) -1 (nil)
    (nil))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66
(code_label 230 1150 821 351 "" "" [1 uses])

(note 821 230 233 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 233 821 782 (set (reg/v:SI 5 edi)
        (const_int 2 [0x2])) 33 {*movsi_1} (nil)
    (nil))

(insn 782 233 783 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 233 (nil))
    (nil))

(jump_insn 783 782 234 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 323)
            (pc))) 288 {*jcc_1} (insn_list 782 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66

(note 234 783 240 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66
(code_label 240 234 822 356 "" "" [1 uses])

(note 822 240 245 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 245 822 247 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 247 245 249 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 245 (nil))
    (nil))

(insn 249 247 250 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("idum"))) 27 {pushsi2} (insn_list 247 (nil))
    (nil))

(call_insn 250 249 252 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 8 [0x8]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 252 250 254 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 254 252 256 NOTE_INSN_DELETED 1075988352)

(insn 256 254 1138 (set (reg:DF 8 st(0))
        (float_extend:DF (reg:SF 8 st(0)))) 86 {*extendsfdf2_1} (insn_list 254 (nil))
    (nil))

(insn 1138 256 1139 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1139 1138 259 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 259 1139 261 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 261 259 262 NOTE_INSN_DELETED 1075988048)

(insn 262 261 948 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("negtemp")) 0))) 314 {*fop_df_comm} (insn_list 261 (nil))
    (nil))

(insn 948 262 263 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 263 948 266 (set (reg/v:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax)) 0))) 314 {*fop_df_comm} (insn_list 262 (nil))
    (nil))

(insn 266 263 1140 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1140 266 1141 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 1141 1140 954 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 954 1141 1142 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1142 954 1143 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1143 1142 1144 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1144 1143 1145 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1145 1144 1146 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 1146 1145 823 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 280))) -1 (nil)
    (nil))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 53 58 59 60 66 68
(note 823 1146 275 [bb 13] NOTE_INSN_BASIC_BLOCK 0)

(insn 275 823 957 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 957 275 1134 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1134 957 1135 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) -1 (nil)
    (nil))

(insn 1135 1134 1136 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)) -1 (nil)
    (nil))

(insn 1136 1135 1137 (set (reg:SI 3 ebx)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 1137 1136 280 (set (reg:SI 4 esi)
        (reg:SI 1 edx)) -1 (nil)
    (nil))
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68
(code_label 280 1137 824 357 "" "" [1 uses])

(note 824 280 467 [bb 14] NOTE_INSN_BASIC_BLOCK 0)

(insn 467 824 1131 (set (reg:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1131 467 1132 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1132 1131 1133 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 69 [0x45]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 1133 1132 825 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 300))) -1 (nil)
    (nil))
;; End of basic block 14, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68 124

;; Start of basic block 15, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 58 59 60 65 68 124
(note 825 1133 290 [bb 15] NOTE_INSN_BASIC_BLOCK 0)

(insn 290 825 293 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 293 290 296 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 296 293 298 (set (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 298 296 299 (set (pc)
        (label_ref 314)) 296 {jump} (nil)
    (nil))
;; End of basic block 15, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66

(barrier 299 298 300)

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68
(code_label 300 299 826 359 "" "" [1 uses])

(note 826 300 963 [bb 16] NOTE_INSN_BASIC_BLOCK 0)

(insn 963 826 1128 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1128 963 1129 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1129 1128 1130 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 69 [0x45]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 1130 1129 827 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 314))) -1 (nil)
    (nil))
;; End of basic block 16, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66 68

;; Start of basic block 17, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 68
(note 827 1130 308 [bb 17] NOTE_INSN_BASIC_BLOCK 0)

(insn 308 827 313 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 17, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66

(note 313 308 314 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 18, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66
(code_label 314 313 828 355 "" "" [2 uses])

(note 828 314 316 [bb 18] NOTE_INSN_BASIC_BLOCK 0)

(insn 316 828 786 (parallel[ 
            (set (reg/v:SI 5 edi)
                (plus:SI (reg/v:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 786 316 236 NOTE_INSN_LOOP_VTOP 0)

(insn 236 786 237 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 316 (nil))
    (nil))

(jump_insn 237 236 322 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 240)
            (pc))) 288 {*jcc_1} (insn_list 236 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 53 54 58 59 60 65 66

(note 322 237 323 NOTE_INSN_LOOP_END 0)

;; Start of basic block 19, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66
(code_label 323 322 829 354 "" "" [1 uses])

(note 829 323 1123 [bb 19] NOTE_INSN_BASIC_BLOCK 0)

(insn 1123 829 1124 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 1124 1123 969 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 969 1124 325 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 325 969 328 (set (reg:DF 8 st(0))
        (minus:DF (mem/f:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (nil)
    (nil))

(note 328 325 330 0x40211fe0 NOTE_INSN_BLOCK_BEG 0)

(insn/i 330 328 336 (set (reg:DF 8 st(0))
        (abs:DF (reg:DF 8 st(0)))) -1 (insn_list 325 (nil))
    (nil))

(note 336 330 337 0x40211fe0 NOTE_INSN_BLOCK_END 0)

(note 337 336 470 0x402140c0 NOTE_INSN_BLOCK_BEG 0)

(insn 470 337 339 (set (reg:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (nil)))

(insn/i 339 470 345 (set (reg:DF 9 st(1))
        (abs:DF (reg:DF 9 st(1)))) -1 (insn_list 470 (nil))
    (nil))

(note 345 339 346 0x402140c0 NOTE_INSN_BLOCK_END 0)

(note 346 345 972 0x402141a0 NOTE_INSN_BLOCK_BEG 0)

(note 972 346 975 NOTE_INSN_DELETED 0)

(insn 975 972 348 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn/i 348 975 354 (set (reg:DF 10 st(2))
        (abs:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(note 354 348 357 0x402141a0 NOTE_INSN_BLOCK_END 0)

(insn 357 354 978 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 330 (nil))
    (nil))

(note 978 357 358 NOTE_INSN_DELETED 0)

(insn 358 978 359 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 339 (insn_list 348 (nil)))
    (nil))

(insn 359 358 981 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 357 (insn_list 358 (nil)))
    (nil))

(insn 981 359 984 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 984 981 361 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 361 984 362 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem:SI (reg:SI 0 eax) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 362 361 830 (set (pc)
        (if_then_else (lt (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 366)
            (pc))) 288 {*jcc_1} (insn_list 361 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 19, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66

;; Start of basic block 20, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66
(note 830 362 987 [bb 20] NOTE_INSN_BASIC_BLOCK 0)

(insn 987 830 1119 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1119 987 1120 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 1120 1119 1121 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1121 1120 1122 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 1122 1121 366 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 450))) -1 (nil)
    (nil))
;; End of basic block 20, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 61 65 66

;; Start of basic block 21, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 59 60 61
(code_label 366 1122 831 369 "" "" [1 uses])

(note 831 366 990 [bb 21] NOTE_INSN_BASIC_BLOCK 0)

(insn 990 831 370 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 370 990 371 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (mem:SI (reg:SI 0 eax) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 371 370 832 (set (pc)
        (if_then_else (ge (reg:CCGOC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 379)
            (pc))) 288 {*jcc_1} (insn_list 370 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 21, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 59 60 61

;; Start of basic block 22, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 59 60 61
(note 832 371 373 [bb 22] NOTE_INSN_BASIC_BLOCK 0)

(insn 373 832 375 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 375 373 376 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC69"))) 27 {pushsi2} (insn_list 373 (nil))
    (nil))

(call_insn 376 375 378 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 378 376 379 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 22, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 59 60 61

;; Start of basic block 23, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 59 60 61
(code_label 379 378 833 370 "" "" [1 uses])

(note 833 379 993 [bb 23] NOTE_INSN_BASIC_BLOCK 0)

(insn 993 833 996 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 996 993 1115 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1115 996 1116 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1116 1115 1117 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1117 1116 1118 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 1118 1117 834 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 392))) -1 (nil)
    (nil))
;; End of basic block 23, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 59 60

;; Start of basic block 24, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 59 60
(note 834 1118 386 [bb 24] NOTE_INSN_BASIC_BLOCK 0)

(insn 386 834 388 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 388 386 389 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC70"))) 27 {pushsi2} (insn_list 386 (nil))
    (nil))

(call_insn 389 388 391 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 391 389 392 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 24, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 59 60

;; Start of basic block 25, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 59 60
(code_label 392 391 835 371 "" "" [1 uses])

(note 835 392 395 [bb 25] NOTE_INSN_BASIC_BLOCK 0)

(insn 395 835 999 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 999 395 1107 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1107 999 1108 (set (reg:SI 2 ecx)
        (mem:SI (reg:SI 0 eax) 0)) -1 (nil)
    (nil))

(insn 1108 1107 1002 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (reg:SI 0 eax)
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 1002 1108 1005 (set (reg:SI 4 esi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1005 1002 1109 (set (reg:SI 5 edi)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 1109 1005 1110 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) -1 (nil)
    (nil))

(insn 1110 1109 1111 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 1111 1110 1112 (set (mem:SI (reg:SI 5 edi) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 1112 1111 1113 (set (mem:SI (plus:SI (reg:SI 5 edi)
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 1113 1112 1114 (set (mem:SI (plus:SI (mult:SI (reg:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:SI 2 ecx)) -1 (nil)
    (nil))

(insn 1114 1113 408 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 408 1114 787 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 787 408 788 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 408 (nil))
    (nil))

(jump_insn 788 787 409 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 759)
            (pc))) 288 {*jcc_1} (insn_list 787 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 25, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 57 58 59 60

(note 409 788 415 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 26, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 57 58 59 60
(code_label 415 409 836 376 "" "" [1 uses])

(note 836 415 1008 [bb 26] NOTE_INSN_BASIC_BLOCK 0)

(insn 1008 836 1099 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1099 1008 1100 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) -1 (nil)
    (nil))

(insn 1100 1099 1011 (set (reg:SI 3 ebx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 1011 1100 422 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 422 1011 424 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 424 422 1014 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 422 (nil))
    (nil))

(insn 1014 424 1101 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1101 1014 1102 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 1102 1101 1103 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) -1 (nil)
    (nil))

(insn 1103 1102 1104 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 1104 1103 1017 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 1017 1104 429 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 429 1017 431 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 431 429 1105 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 429 (nil))
    (nil))

(insn 1105 431 1106 (set (mem:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:SI 2 ecx)) -1 (nil)
    (nil))

(insn 1106 1105 436 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi))
                (const_int 4 [0x4])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(note 436 1106 439 NOTE_INSN_LOOP_CONT 0)

(insn 439 436 791 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 791 439 411 NOTE_INSN_LOOP_VTOP 0)

(insn 411 791 412 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 439 (nil))
    (nil))

(jump_insn 412 411 837 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 415)
            (pc))) 288 {*jcc_1} (insn_list 411 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 57 58 59 60

;; Start of basic block 27, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(note 837 412 413 [bb 27] NOTE_INSN_BASIC_BLOCK 0)

(jump_insn 413 837 414 (set (pc)
        (label_ref/s 759)) 296 {jump} (nil)
    (nil))
;; End of basic block 27, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

(barrier 414 413 445)

(note 445 414 450 NOTE_INSN_LOOP_END 0)

;; Start of basic block 28, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 65 66
(code_label 450 445 838 368 "" "" [1 uses])

(note 838 450 455 [bb 28] NOTE_INSN_BASIC_BLOCK 0)

(note 455 838 456 NOTE_INSN_DELETED 0)

(note 456 455 1020 NOTE_INSN_DELETED 0)

(insn 1020 456 458 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 458 1020 473 (parallel[ 
            (set (mem:SI (reg:SI 0 eax) 0)
                (plus:SI (mem:SI (reg:SI 0 eax) 0)
                    (const_int -2 [0xfffffffe])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 473 458 1088 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1088 473 1089 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (const:SI (plus:SI (symbol_ref:SI ("negtemp"))
                    (const_int 4 [0x4]))) 0)) -1 (nil)
    (nil))

(insn 1089 1088 1090 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("negtemp")) 0)) -1 (nil)
    (nil))

(insn 1090 1089 1091 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int -1074790400 [0xbff00000])) -1 (nil)
    (nil))

(insn 1091 1090 860 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 860 1091 479 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -24 [0xffffffe8]))) 113 {*lea_0} (nil)
    (nil))

(insn 479 860 481 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 860 (nil))
    (nil))

(insn 481 479 483 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 483 481 485 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 32 [0x20])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 485 483 487 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 487 485 489 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 489 487 491 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 24 [0x18])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 491 489 493 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 493 491 495 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 495 493 496 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 496 495 498 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("amotsa")) 0)
            (const_int 64 [0x40]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 498 496 501 NOTE_INSN_DELETED 1075985920)

(insn 501 498 1092 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1092 501 1093 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 1093 1092 1026 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 1026 1093 1094 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1094 1026 1095 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1095 1094 1096 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1096 1095 1097 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1097 1096 1098 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 1098 1097 839 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 538))) -1 (nil)
    (nil))
;; End of basic block 28, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 66 69

;; Start of basic block 29, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 58 59 60
(note 839 1098 508 [bb 29] NOTE_INSN_BASIC_BLOCK 0)

(insn 508 839 1084 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1084 508 1085 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (const:SI (plus:SI (symbol_ref:SI ("negtemp"))
                    (const_int 4 [0x4]))) 0)) -1 (nil)
    (nil))

(insn 1085 1084 1086 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("negtemp")) 0)) -1 (nil)
    (nil))

(insn 1086 1085 1087 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1073741824 [0x40000000])) -1 (nil)
    (nil))

(insn 1087 1086 858 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 858 1087 514 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -24 [0xffffffe8]))) 113 {*lea_0} (nil)
    (nil))

(insn 514 858 516 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 858 (nil))
    (nil))

(insn 516 514 518 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 518 516 520 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 32 [0x20])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 520 518 522 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 522 520 524 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 524 522 526 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 24 [0x18])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 526 524 528 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 528 526 530 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 530 528 531 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 531 530 535 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("amotsa")) 0)
            (const_int 64 [0x40]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 535 531 536 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 536 535 537 (set (pc)
        (label_ref 759)) 296 {jump} (nil)
    (nil))
;; End of basic block 29, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

(barrier 537 536 538)

;; Start of basic block 30, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 54 58 59 60 66 69
(code_label 538 537 840 379 "" "" [1 uses])

(note 840 538 1029 [bb 30] NOTE_INSN_BASIC_BLOCK 0)

(insn 1029 840 1081 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1081 1029 1082 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1082 1081 1083 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 5 [0x5]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 1083 1082 841 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 745))) -1 (nil)
    (nil))
;; End of basic block 30, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 53 54 58 59 60

;; Start of basic block 31, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 53 54 58 59 60
(note 841 1083 1070 [bb 31] NOTE_INSN_BASIC_BLOCK 0)

(insn 1070 841 1071 (set (reg:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) -1 (nil)
    (nil))

(insn 1071 1070 553 (set (reg:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) -1 (nil)
    (nil))

(insn 553 1071 1072 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1072 553 1073 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (const:SI (plus:SI (symbol_ref:SI ("negtemp"))
                    (const_int 4 [0x4]))) 0)) -1 (nil)
    (nil))

(insn 1073 1072 1074 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("negtemp")) 0)) -1 (nil)
    (nil))

(insn 1074 1073 1075 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1071644672 [0x3fe00000])) -1 (nil)
    (nil))

(insn 1075 1074 856 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 856 1075 559 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -24 [0xffffffe8]))) 113 {*lea_0} (nil)
    (nil))

(insn 559 856 561 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 856 (nil))
    (nil))

(insn 561 559 563 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 563 561 565 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 32 [0x20])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 565 563 567 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 567 565 569 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 569 567 571 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 24 [0x18])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 571 569 573 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 573 571 575 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 575 573 576 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 576 575 578 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("amotsa")) 0)
            (const_int 64 [0x40]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 578 576 581 NOTE_INSN_DELETED 1075985136)

(insn 581 578 1076 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1076 581 1077 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 1077 1076 1035 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 1035 1077 1078 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1078 1035 1079 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1079 1078 1080 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 5 [0x5]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 1080 1079 842 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 759))) -1 (nil)
    (nil))
;; End of basic block 31, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 54 58 59 60

;; Start of basic block 32, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 54 58 59 60
(note 842 1080 590 [bb 32] NOTE_INSN_BASIC_BLOCK 0)

(insn 590 842 792 (set (reg/v:SI 5 edi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 792 590 793 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 590 (nil))
    (nil))

(jump_insn 793 792 591 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 680)
            (pc))) 288 {*jcc_1} (insn_list 792 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 32, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 58 59 60

(note 591 793 597 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 33, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 58 59 60
(code_label 597 591 843 389 "" "" [1 uses])

(note 843 597 601 [bb 33] NOTE_INSN_BASIC_BLOCK 0)

(insn 601 843 602 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 5 edi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 2 {*cmpsi_1_insn} (nil)
    (nil))

(jump_insn 602 601 844 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 671)
            (pc))) 288 {*jcc_1} (insn_list 601 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 33, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 58 59 60

;; Start of basic block 34, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 58 59 60
(note 844 602 607 [bb 34] NOTE_INSN_BASIC_BLOCK 0)

(insn 607 844 797 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 797 607 798 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 607 (nil))
    (nil))

(jump_insn 798 797 883 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 651)
            (pc))) 288 {*jcc_1} (insn_list 797 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 34, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60

;; Start of basic block 35, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60
(note 883 798 868 [bb 35] NOTE_INSN_BASIC_BLOCK 0)

(insn 868 883 608 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC71")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC71")) 0) 0 [0x0] 0 [0x0] 1073643520 [0x3ffe8000])
        (nil)))
;; End of basic block 35, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 133

(note 608 868 614 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 36, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 133
(code_label 614 608 845 394 "" "" [1 uses])

(note 845 614 1038 [bb 36] NOTE_INSN_BASIC_BLOCK 0)

(insn 1038 845 618 (set (reg:SI 1 edx)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 618 1038 620 (parallel[ 
            (set (reg:SI 1 edx)
                (mult:SI (reg:SI 1 edx)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 620 618 1041 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 618 (nil))
    (nil))

(insn 1041 620 621 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 621 1041 623 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 623 621 1044 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 621 (nil))
    (nil))

(insn 1044 623 625 (set (reg:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 625 1044 626 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (insn_list 620 (nil))
    (nil))

(insn 626 625 629 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 3 ebx)) 0))) 314 {*fop_df_comm} (insn_list 623 (insn_list 625 (nil)))
    (nil))

(insn 629 626 1047 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 626 (nil))
    (nil))

(insn 1047 629 631 (set (reg:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 631 1047 1050 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 4 esi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 629 (nil))
    (nil))

(insn 1050 631 633 (set (reg:SI 0 eax)
        (reg/v:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 633 1050 635 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 635 633 638 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 633 (nil))
    (nil))

(insn 638 635 641 (set (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 3 ebx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 635 (nil))
    (nil))

(note 641 638 644 NOTE_INSN_LOOP_CONT 0)

(insn 644 641 801 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 801 644 610 NOTE_INSN_LOOP_VTOP 0)

(insn 610 801 611 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 644 (nil))
    (nil))

(jump_insn 611 610 650 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 614)
            (pc))) 288 {*jcc_1} (insn_list 610 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 55 58 59 60 133

(note 650 611 651 NOTE_INSN_LOOP_END 0)

;; Start of basic block 37, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 58 59 60
(code_label 651 650 846 392 "" "" [1 uses])

(note 846 651 654 [bb 37] NOTE_INSN_BASIC_BLOCK 0)

(insn 654 846 656 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 656 654 658 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 654 (nil))
    (nil))

(insn 658 656 659 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 659 658 661 (set (reg:DF 8 st(0))
        (call (mem:QI (mem/f:SI (plus:SI (reg:SI 6 ebp)
                        (const_int 32 [0x20])) 0) 0)
            (const_int 16 [0x10]))) 370 {*call_value_1} (nil)
    (nil)
    (nil))

(note 661 659 1053 NOTE_INSN_DELETED 1075984176)

(insn 1053 661 663 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 663 1053 666 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 5 edi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 661 (nil))
    (nil))

(insn 666 663 670 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 37, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 58 59 60

(note 670 666 671 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 38, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 52 54 58 59 60
(code_label 671 670 847 388 "" "" [1 uses])

(note 847 671 673 [bb 38] NOTE_INSN_BASIC_BLOCK 0)

(insn 673 847 796 (parallel[ 
            (set (reg/v:SI 5 edi)
                (plus:SI (reg/v:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 796 673 593 NOTE_INSN_LOOP_VTOP 0)

(insn 593 796 594 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 5 edi)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 673 (nil))
    (nil))

(jump_insn 594 593 679 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 597)
            (pc))) 288 {*jcc_1} (insn_list 593 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 38, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 52 54 58 59 60

(note 679 594 680 NOTE_INSN_LOOP_END 0)

;; Start of basic block 39, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(code_label 680 679 848 387 "" "" [1 uses])

(note 848 680 683 [bb 39] NOTE_INSN_BASIC_BLOCK 0)

(note 683 848 1056 NOTE_INSN_DELETED 0)

(insn 1056 683 685 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 685 1056 686 (set (reg:SI 0 eax)
        (mem:SI (reg:SI 1 edx) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem:SI (reg:SI 1 edx) 0)
        (nil)))

(insn 686 685 688 (parallel[ 
            (set (reg:SI 0 eax)
                (minus:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 138 {*subsi_1} (insn_list 685 (nil))
    (expr_list:REG_EQUIV (mem:SI (reg:SI 1 edx) 0)
        (nil)))

(insn 688 686 691 (set (mem:SI (reg:SI 1 edx) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 686 (nil))
    (nil))

(insn 691 688 802 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 802 691 803 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 691 (nil))
    (nil))

(jump_insn 803 802 692 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 759)
            (pc))) 288 {*jcc_1} (insn_list 802 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 39, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 57 58 59 60

(note 692 803 698 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 40, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 57 58 59 60
(code_label 698 692 849 400 "" "" [1 uses])

(note 849 698 702 [bb 40] NOTE_INSN_BASIC_BLOCK 0)

(insn 702 849 704 (set (reg/v:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC67")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC67")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 704 702 807 (set (reg/v:SI 1 edx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 807 704 808 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 1 edx)
            (mem/f:SI (symbol_ref:SI ("nverts")) 0))) 2 {*cmpsi_1_insn} (insn_list 704 (nil))
    (nil))

(jump_insn 808 807 884 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 726)
            (pc))) 288 {*jcc_1} (insn_list 807 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 40, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62

;; Start of basic block 41, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62
(note 884 808 863 [bb 41] NOTE_INSN_BASIC_BLOCK 0)

(insn 863 884 866 (set (reg/v:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 866 863 705 (set (reg/v:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("nverts")) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 41, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 148 149

(note 705 866 711 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 42, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 148 149
(code_label 711 705 850 404 "" "" [1 uses])

(note 850 711 1059 [bb 42] NOTE_INSN_BASIC_BLOCK 0)

(insn 1059 850 712 (set (reg:SI 0 eax)
        (reg/v:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 712 1059 714 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 714 712 1062 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 712 (nil))
    (nil))

(insn 1062 714 715 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 715 1062 716 (set (reg/v:DF 8 st(0))
        (plus:DF (reg/v:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi)) 0))) 314 {*fop_df_comm} (insn_list 714 (nil))
    (nil))

(note 716 715 719 NOTE_INSN_LOOP_CONT 0)

(insn 719 716 811 (parallel[ 
            (set (reg/v:SI 1 edx)
                (plus:SI (reg/v:SI 1 edx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 811 719 707 NOTE_INSN_LOOP_VTOP 0)

(insn 707 811 708 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 1 edx)
            (reg/v:SI 2 ecx))) 2 {*cmpsi_1_insn} (insn_list 719 (nil))
    (nil))

(jump_insn 708 707 725 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 711)
            (pc))) 288 {*jcc_1} (insn_list 707 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 56 57 58 59 60 62 148 149

(note 725 708 726 NOTE_INSN_LOOP_END 0)

;; Start of basic block 43, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 57 58 59 60 62
(code_label 726 725 851 402 "" "" [1 uses])

(note 851 726 1065 [bb 43] NOTE_INSN_BASIC_BLOCK 0)

(insn 1065 851 728 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 728 1065 729 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 729 728 732 NOTE_INSN_LOOP_CONT 0)

(insn 732 729 806 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 806 732 694 NOTE_INSN_LOOP_VTOP 0)

(insn 694 806 695 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 732 (nil))
    (nil))

(jump_insn 695 694 852 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 698)
            (pc))) 288 {*jcc_1} (insn_list 694 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 43, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 57 58 59 60

;; Start of basic block 44, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(note 852 695 696 [bb 44] NOTE_INSN_BASIC_BLOCK 0)

(jump_insn 696 852 697 (set (pc)
        (label_ref/s 759)) 296 {jump} (nil)
    (nil))
;; End of basic block 44, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

(barrier 697 696 738)

(note 738 697 745 NOTE_INSN_LOOP_END 0)

;; Start of basic block 45, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(code_label 745 738 853 382 "" "" [1 uses])

(note 853 745 748 [bb 45] NOTE_INSN_BASIC_BLOCK 0)

(note 748 853 749 NOTE_INSN_DELETED 0)

(note 749 748 1068 NOTE_INSN_DELETED 0)

(insn 1068 749 751 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 751 1068 758 (parallel[ 
            (set (mem:SI (reg:SI 1 edx) 0)
                (plus:SI (mem:SI (reg:SI 1 edx) 0)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 45, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

(note 758 751 759 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 46, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 51 58 59 60
(code_label 759 758 854 349 "" "" [6 uses])

(note 854 759 760 [bb 46] NOTE_INSN_BASIC_BLOCK 0)

(insn 760 854 761 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -44 [0xffffffd4])) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 761 760 765 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 764)
            (pc))) 288 {*jcc_1} (insn_list 760 (nil))
    (nil))
;; End of basic block 46, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 51 58 59 60

(note 765 761 768 NOTE_INSN_LOOP_END 0)

(note 768 765 885 0x4021dc80 NOTE_INSN_BLOCK_END 0)

(note 885 768 0 NOTE_INSN_DELETED 0)


;; Function amotsa

;; 13 regs to allocate: 53 54 (2) 56 (2) 57 (2) 55 (2) 45 49 44 42 52 (2) 46 47 50
;; 42 conflicts: 42 43 44 45 46 47 49 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 0 1 2 7 8 9
;; 43 conflicts: 42 43 44 45 49 50 56 57 0 7
;; 44 conflicts: 42 43 44 45 46 47 49 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 0 1 2 7 8 9
;; 45 conflicts: 42 43 44 45 46 47 49 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 0 1 2 7 8 9
;; 46 conflicts: 42 44 45 46 47 49 50 51 52 53 54 55 57 60 61 62 63 64 65 66 0 1 7 8 9
;; 47 conflicts: 42 44 45 46 47 49 50 51 52 53 54 55 57 60 61 62 63 64 65 66 0 1 7 8 9
;; 49 conflicts: 42 43 44 45 46 47 49 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 0 1 2 7 8 9
;; 50 conflicts: 42 43 44 45 46 47 49 50 51 52 53 54 55 56 57 60 61 62 63 64 65 66 67 68 69 70 71 0 1 7 8 9
;; 51 conflicts: 42 44 45 46 47 49 50 51 52 54 7 8
;; 52 conflicts: 42 44 45 46 47 49 50 51 52 53 54 55 57 60 61 62 63 64 65 66 67 68 69 0 1 7 8 9
;; 53 conflicts: 42 44 45 46 47 49 50 52 53 54 55 56 57 60 61 62 63 64 66 72 73 74 75 76 77 78 79 0 1 2 7 8 9
;; 54 conflicts: 42 44 45 46 47 49 50 51 52 53 54 55 60 61 62 63 64 0 7 8 9
;; 55 conflicts: 42 44 45 46 47 49 50 52 53 54 55 60 61 62 63 64 0 7 8 9
;; 56 conflicts: 42 43 44 45 49 50 53 56 57 71 72 73 74 75 76 77 78 79 0 1 2 7 8
;; 57 conflicts: 42 43 44 45 46 47 49 50 52 53 56 57 65 66 67 68 69 70 71 0 1 7 8
;; 60 conflicts: 42 44 45 46 47 49 50 52 53 54 55 60 61 62 63 0 7 8 9
;; 61 conflicts: 42 44 45 46 47 49 50 52 53 54 55 60 61 0 7 9
;; 62 conflicts: 42 44 45 46 47 49 50 52 53 54 55 60 62 0 7 9
;; 63 conflicts: 42 44 45 46 47 49 50 52 53 54 55 60 63 7 8 9
;; 64 conflicts: 42 44 45 46 47 49 50 52 53 54 55 64 7 9
;; 65 conflicts: 42 44 45 46 47 49 50 52 57 65 7 8
;; 66 conflicts: 42 44 45 46 47 49 50 52 53 57 66 0 1 7
;; 67 conflicts: 42 44 45 49 50 52 57 67 7 8
;; 68 conflicts: 42 44 45 49 50 52 57 68 7 8
;; 69 conflicts: 42 44 45 49 50 52 57 69 7 8
;; 70 conflicts: 42 44 45 49 50 57 70 7 8
;; 71 conflicts: 42 44 45 49 50 56 57 71 7 8
;; 72 conflicts: 42 44 45 49 53 56 72 0 7
;; 73 conflicts: 42 44 45 49 53 56 73 75 0 7 8
;; 74 conflicts: 42 44 45 49 53 56 74 7 8
;; 75 conflicts: 42 44 45 49 53 56 73 75 0 7 8
;; 76 conflicts: 42 44 45 49 53 56 76 7 8
;; 77 conflicts: 42 44 45 49 53 56 77 2 7
;; 78 conflicts: 42 44 45 49 53 56 78 79 0 1 2 7
;; 79 conflicts: 42 44 45 49 53 56 78 79 0 1 2 7

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 10.
Using reg 0 for reload 0
Spilling for insn 12.
Using reg 0 for reload 0
Spilling for insn 14.
Using reg 0 for reload 0
Spilling for insn 18.
Using reg 0 for reload 0
Spilling for insn 20.
Using reg 0 for reload 0
Spilling for insn 22.
Spilling for insn 24.
Using reg 9 for reload 0
Spilling for insn 33.
Spilling for insn 37.
Spilling for insn 216.
Spilling for insn 51.
Using reg 0 for reload 0
Spilling for insn 52.
Spilling for insn 55.
Using reg 1 for reload 0
Spilling for insn 58.
Using reg 0 for reload 0
Spilling for insn 43.
Spilling for insn 76.
Spilling for insn 78.
Spilling for insn 79.
Spilling for insn 81.
Using reg 0 for reload 0
Spilling for insn 86.
Using reg 0 for reload 0
Spilling for insn 87.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 221.
Spilling for insn 104.
Using reg 2 for reload 0
Spilling for insn 105.
Using reg 2 for reload 0
Spilling for insn 98.
Spilling for insn 119.
Using reg 0 for reload 0
Spilling for insn 128.
Spilling for insn 137.
Spilling for insn 141.
Spilling for insn 142.
Spilling for insn 147.
Using reg 0 for reload 0
Spilling for insn 148.
Using reg 0 for reload 0
Spilling for insn 156.
Using reg 1 for reload 0
Spilling for insn 159.
Using reg 0 for reload 0
Spilling for insn 226.
Spilling for insn 173.
Spilling for insn 177.
Using reg 1 for reload 0
Spilling for insn 178.
Using reg 1 for reload 0
Spilling for insn 179.
Using reg 0 for reload 0
Spilling for insn 181.
Using reg 0 for reload 0
Spilling for insn 183.
Spilling for insn 187.
Using reg 4 for reload 0
Spilling for insn 188.
Using reg 4 for reload 0
Spilling for insn 165.
Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 10.
Using reg 0 for reload 0
Spilling for insn 12.
Using reg 0 for reload 0
Spilling for insn 14.
Using reg 0 for reload 0
Spilling for insn 18.
Using reg 0 for reload 0
Spilling for insn 20.
Using reg 0 for reload 0
Spilling for insn 22.
Spilling for insn 24.
Using reg 9 for reload 0
Spilling for insn 33.
Spilling for insn 37.
Spilling for insn 216.
Spilling for insn 51.
Using reg 0 for reload 0
Spilling for insn 52.
Spilling for insn 55.
Using reg 1 for reload 0
Spilling for insn 58.
Using reg 0 for reload 0
Spilling for insn 43.
Spilling for insn 76.
Spilling for insn 78.
Spilling for insn 79.
Spilling for insn 81.
Using reg 0 for reload 0
Spilling for insn 86.
Using reg 0 for reload 0
Spilling for insn 87.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 221.
Spilling for insn 104.
Using reg 2 for reload 0
Spilling for insn 105.
Using reg 2 for reload 0
Spilling for insn 98.
Spilling for insn 119.
Using reg 0 for reload 0
Spilling for insn 128.
Spilling for insn 137.
Spilling for insn 141.
Spilling for insn 142.
Spilling for insn 147.
Using reg 0 for reload 0
Spilling for insn 148.
Using reg 0 for reload 0
Spilling for insn 156.
Using reg 1 for reload 0
Spilling for insn 159.
Using reg 0 for reload 0
Spilling for insn 226.
Spilling for insn 173.
Spilling for insn 177.
Using reg 1 for reload 0
Spilling for insn 178.
Using reg 1 for reload 0
Spilling for insn 179.
Using reg 0 for reload 0
Spilling for insn 181.
Using reg 0 for reload 0
Spilling for insn 183.
Spilling for insn 187.
Using reg 4 for reload 0
Spilling for insn 188.
Using reg 4 for reload 0
Spilling for insn 165.
;; Register dispositions:
43 in 0  51 in 8  53 in 3  54 in 10  55 in 11  56 in 9  
57 in 4  60 in 9  61 in 0  62 in 0  63 in 8  64 in 9  
65 in 8  66 in 0  67 in 8  68 in 8  69 in 8  70 in 8  
71 in 8  72 in 0  73 in 0  74 in 8  75 in 8  76 in 8  
77 in 2  78 in 2  79 in 0  

;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 10 11 16 17 18 20

(note 2 0 231 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 231 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(note 4 231 6 NOTE_INSN_DELETED 0)

(note 6 4 8 NOTE_INSN_DELETED 0)

(note 8 6 10 NOTE_INSN_DELETED 0)

(note 10 8 12 NOTE_INSN_DELETED 0)

(note 12 10 14 NOTE_INSN_DELETED 0)

(note 14 12 16 NOTE_INSN_DELETED 0)

(note 16 14 18 NOTE_INSN_DELETED 0)

(note 18 16 20 NOTE_INSN_DELETED 0)

(note 20 18 22 NOTE_INSN_DELETED 0)

(insn 22 20 24 (set (reg/v:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 44 [0x2c])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 24 22 245 (set (reg:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 52 [0x34])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 245 24 25 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(note 25 245 28 NOTE_INSN_FUNCTION_BEG 0)

(note 28 25 32 0x402400c0 NOTE_INSN_BLOCK_BEG 0)

(note 32 28 248 NOTE_INSN_DELETED 0)

(insn 248 32 33 (set (reg/v:DF 10 st(2))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC73")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])) -1 (nil)
    (nil))

(insn 33 248 34 (set (reg/v:DF 10 st(2))
        (minus:DF (reg/v:DF 10 st(2))
            (reg/v:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 22 (nil))
    (nil))

(note 34 33 35 NOTE_INSN_DELETED 0)

(insn 35 34 251 (set (reg/v:DF 10 st(2))
        (div:DF (reg/v:DF 10 st(2))
            (float:DF (mem/f:SI (symbol_ref:SI ("ndim")) 0)))) 321 {*fop_df_3} (insn_list 33 (nil))
    (nil))

(insn 251 35 37 (set (reg/v:DF 11 st(3))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 37 251 40 (set (reg/v:DF 11 st(3))
        (minus:DF (reg/v:DF 11 st(3))
            (reg/v:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 35 (nil))
    (nil))

(insn 40 37 216 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 216 40 217 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 40 (nil))
    (nil))

(jump_insn 217 216 41 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 71)
            (pc))) 288 {*jcc_1} (insn_list 216 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 52 53 54 55

(note 41 217 47 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 44 45 46 47 48 49 50 52 53 54 55
(code_label 47 41 232 416 "" "" [1 uses])

(note 232 47 257 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 257 232 254 (set (reg:DF 9 st(1))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 254 257 51 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 51 254 260 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax)) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 260 51 52 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 52 260 54 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 54 52 266 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 52 (nil))
    (nil))

(insn 266 54 263 (set (reg:DF 8 st(0))
        (reg/v:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 263 266 55 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 55 263 56 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 314 {*fop_df_comm} (insn_list 54 (nil))
    (nil))

(insn 56 55 269 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 51 (insn_list 55 (nil)))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 269 56 58 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 58 269 61 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 56 (nil))
    (nil))

(note 61 58 64 NOTE_INSN_LOOP_CONT 0)

(insn 64 61 220 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 220 64 43 NOTE_INSN_LOOP_VTOP 0)

(insn 43 220 44 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 64 (nil))
    (nil))

(jump_insn 44 43 70 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 288 {*jcc_1} (insn_list 43 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 52 53 54 55

(note 70 44 71 NOTE_INSN_LOOP_END 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 44 45 46 47 48 49 50 52
(code_label 71 70 233 414 "" "" [1 uses])

(note 233 71 74 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 74 233 76 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 76 74 78 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 74 (nil))
    (nil))

(insn 78 76 79 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 79 78 272 (set (reg:DF 8 st(0))
        (call (mem:QI (mem/f:SI (plus:SI (reg:SI 6 ebp)
                        (const_int 32 [0x20])) 0) 0)
            (const_int 16 [0x10]))) 370 {*call_value_1} (nil)
    (nil)
    (nil))

(insn 272 79 350 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 350 272 351 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) -1 (nil)
    (nil))

(insn 351 350 352 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) -1 (nil)
    (nil))

(insn 352 351 353 (set (reg:SI 4 esi)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 353 352 84 (set (reg:SI 5 edi)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 84 353 278 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 278 84 86 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 86 278 281 (set (reg:DF 8 st(0))
        (mem:DF (reg:SI 1 edx) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (reg:SI 1 edx) 0)
        (nil)))

(note 281 86 284 NOTE_INSN_DELETED 0)

(insn 284 281 354 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 354 284 355 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 355 354 356 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 356 355 357 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 357 356 358 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 358 357 234 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 121))) -1 (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 49 50 52 57

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 44 45 46 47 49 50 52 57
(note 234 358 95 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 95 234 221 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 221 95 222 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 95 (nil))
    (nil))

(jump_insn 222 221 96 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 116)
            (pc))) 288 {*jcc_1} (insn_list 221 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 49 50 52 53 57

(note 96 222 102 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 44 45 46 47 49 50 52 53 57
(code_label 102 96 235 423 "" "" [1 uses])

(note 235 102 287 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 287 235 346 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 346 287 347 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)) -1 (nil)
    (nil))

(insn 347 346 290 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 290 347 348 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 24 [0x18])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 348 290 349 (set (mem:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 349 348 106 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 106 349 109 NOTE_INSN_LOOP_CONT 0)

(insn 109 106 225 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 225 109 98 NOTE_INSN_LOOP_VTOP 0)

(insn 98 225 99 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 109 (nil))
    (nil))

(jump_insn 99 98 115 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) 288 {*jcc_1} (insn_list 98 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 49 50 52 53 57

(note 115 99 116 NOTE_INSN_LOOP_END 0)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 42 44 45 47 49 50 52 57
(code_label 116 115 236 421 "" "" [1 uses])

(note 236 116 293 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 293 236 344 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 344 293 345 (set (mem:SI (reg:SI 0 eax) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 345 344 121 (set (mem:SI (plus:SI (reg:SI 0 eax)
                (const_int 4 [0x4])) 0)
        (reg:SI 5 edi)) -1 (nil)
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 49 50 52 57

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 42 44 45 49 50 52 57
(code_label 121 345 237 418 "" "" [1 uses])

(note 237 121 124 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 124 237 126 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 126 124 128 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 124 (nil))
    (nil))

(insn 128 126 129 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("idum"))) 27 {pushsi2} (insn_list 126 (nil))
    (nil))

(call_insn 129 128 131 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 8 [0x8]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 131 129 133 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 133 131 135 NOTE_INSN_DELETED 1076120608)

(insn 135 133 336 (set (reg:DF 8 st(0))
        (float_extend:DF (reg:SF 8 st(0)))) 86 {*extendsfdf2_1} (insn_list 133 (nil))
    (nil))

(insn 336 135 337 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 337 336 138 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 138 337 140 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 140 138 141 NOTE_INSN_DELETED 1076120304)

(insn 141 140 338 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 140 (nil))
    (nil))

(insn 338 141 339 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 339 338 299 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)
        (reg:SI 5 edi)) -1 (nil)
    (nil))

(insn 299 339 142 (set (reg/v:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 142 299 145 (set (reg/v:DF 9 st(1))
        (minus:DF (reg/v:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 141 (nil))
    (nil))

(insn 145 142 302 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 302 145 147 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 40 [0x28])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 147 302 340 (set (reg:DF 8 st(0))
        (mem:DF (reg:SI 1 edx) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (reg:SI 1 edx) 0)
        (nil)))

(insn 340 147 341 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 341 340 342 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 342 341 343 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 343 342 238 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 203))) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 49 50 56 57

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 42 44 45 49 50 56 57
(note 238 343 241 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 241 238 305 (set (reg/v:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)
        (nil)))

(insn 305 241 334 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 334 305 335 (set (mem:SI (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg/v:SI 0 eax)) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 335 334 308 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 edx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 0 eax))
                (const_int 4 [0x4])) 0)
        (reg:SI 5 edi)) -1 (nil)
    (nil))

(insn 308 335 159 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 40 [0x28])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 159 308 162 (set (mem:DF (reg:SI 2 ecx) 0)
        (reg/v:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 162 159 226 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 226 162 227 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 162 (nil))
    (nil))

(jump_insn 227 226 163 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 203)
            (pc))) 288 {*jcc_1} (insn_list 226 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 44 45 49 53 56

(note 163 227 169 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 42 44 45 49 53 56
(code_label 169 163 239 430 "" "" [1 uses])

(note 239 169 311 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 311 239 173 (set (reg:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 173 311 175 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 175 173 314 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 173 (nil))
    (nil))

(insn 314 175 177 (set (reg:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 177 314 317 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 4 esi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 4 esi)) 0)
        (nil)))

(insn 317 177 178 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 178 317 320 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 319 {*fop_df_1} (insn_list 175 (insn_list 177 (nil)))
    (nil))

(insn 320 178 179 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 179 320 181 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 2 ecx)) 0))) 314 {*fop_df_comm} (insn_list 178 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (nil)))

(insn 181 179 323 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 2 ecx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 179 (nil))
    (nil))

(insn 323 181 183 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 183 323 185 (parallel[ 
            (set (reg:SI 2 ecx)
                (mult:SI (reg:SI 2 ecx)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 185 183 326 (parallel[ 
            (set (reg:SI 2 ecx)
                (plus:SI (reg:SI 2 ecx)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 183 (nil))
    (nil))

(insn 326 185 330 (set (reg:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 330 326 331 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 4 esi)) 0)) -1 (nil)
    (nil))

(insn 331 330 329 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 4 esi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 329 331 332 (set (reg:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 332 329 333 (set (mem:SI (plus:SI (mult:SI (reg:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 4 esi)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 333 332 191 (set (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 4 esi))
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 191 333 194 NOTE_INSN_LOOP_CONT 0)

(insn 194 191 230 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 230 194 165 NOTE_INSN_LOOP_VTOP 0)

(insn 165 230 166 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 194 (nil))
    (nil))

(jump_insn 166 165 200 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 169)
            (pc))) 288 {*jcc_1} (insn_list 165 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 44 45 49 53 56

(note 200 166 203 NOTE_INSN_LOOP_END 0)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 56
(code_label 203 200 240 425 "" "" [2 uses])

(note 240 203 206 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 206 240 210 (set (reg/i:DF 8 st(0))
        (reg/v:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(note 210 206 215 0x402400c0 NOTE_INSN_BLOCK_END 0)

(insn 215 210 242 (use (reg/i:DF 8 st(0))) -1 (insn_list 206 (nil))
    (nil))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 8 [st] 20 [frame]

(note 242 215 0 NOTE_INSN_DELETED 0)


;; Function NewTemp

;; 1 regs to allocate: 43 (2)
;; 42 conflicts: 42 43 45 7 8 9
;; 43 conflicts: 42 43 45 46 47 48 49 7 8 9
;; 45 conflicts: 42 43 45 7 8 9
;; 46 conflicts: 43 46 7 8
;; 47 conflicts: 43 47 7 8
;; 48 conflicts: 43 48 7 8
;; 49 conflicts: 43 49 7 8

Spilling for insn 4.
Spilling for insn 6.
Spilling for insn 15.
Spilling for insn 16.
Using reg 0 for reload 0
Spilling for insn 18.
Spilling for insn 19.
Using reg 0 for reload 0
Spilling for insn 25.
Spilling for insn 31.
Spilling for insn 32.
Using reg 0 for reload 0
Spilling for insn 38.
Spilling for insn 44.
Spilling for insn 45.
Spilling for insn 50.
Spilling for insn 4.
Spilling for insn 6.
Spilling for insn 15.
Spilling for insn 16.
Using reg 0 for reload 0
Spilling for insn 18.
Spilling for insn 19.
Using reg 0 for reload 0
Spilling for insn 25.
Spilling for insn 31.
Spilling for insn 32.
Using reg 0 for reload 0
Spilling for insn 38.
Spilling for insn 44.
Spilling for insn 45.
Spilling for insn 50.
;; Register dispositions:
42 in 9  43 in 10  45 in 8  46 in 8  47 in 8  48 in 8  
49 in 8  

;; Hard regs used:  0 6 8 9 10 16 17 18 20

(note 2 0 62 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 62 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 62 6 (set (reg/v:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 6 4 9 (set (reg/v:DF 10 st(2))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(note 9 6 15 NOTE_INSN_FUNCTION_BEG 0)

(insn 15 9 82 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC75")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC75")) 0) -671088640 [0xd8000000] 171798691 [0xa3d70a3] 1073259479 [0x3ff8a3d7])
        (nil)))

(insn 82 15 83 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 83 82 84 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 84 83 85 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 85 84 86 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 86 85 63 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 43

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 43
(note 63 86 18 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 18 63 77 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC76")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC76")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 77 18 78 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 10 st(2))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 78 77 79 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 79 78 80 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 80 79 81 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 81 80 22 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 28))) -1 (nil)
    (nil))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 43

;; Start of basic block 2, registers live: 6 [bp] 7 [sp]
(code_label 22 81 64 435 "" "" [1 uses])

(note 64 22 25 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 25 64 26 (set (reg/v:DF 10 st(2))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC77")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC77")) 0) 0 [0x0] 0 [0x0] -1073774592 [0xbfff8000])
        (nil)))

(jump_insn 26 25 27 (set (pc)
        (label_ref 48)) 296 {jump} (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 43

(barrier 27 26 28)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 43
(code_label 28 27 65 434 "" "" [1 uses])

(note 65 28 31 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 31 65 72 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC78")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC78")) 0) -805306368 [0xd0000000] -858993460 [0xcccccccc] 1073466572 [0x3ffbcccc])
        (nil)))

(insn 72 31 73 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg/v:DF 10 st(2))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 73 72 74 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 74 73 75 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 75 74 66 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 41))) -1 (nil)
    (nil))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 43

;; Start of basic block 4, registers live: 6 [bp] 7 [sp]
(note 66 75 38 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 38 66 39 (set (reg/v:DF 10 st(2))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC76")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC76")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(jump_insn 39 38 40 (set (pc)
        (label_ref 48)) 296 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 43

(barrier 40 39 41)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 43
(code_label 41 40 67 437 "" "" [1 uses])

(note 67 41 44 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 44 67 45 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC79")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC79")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])
        (nil)))

(insn 45 44 46 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("FACTOR")) 0))) 319 {*fop_df_1} (insn_list 44 (nil))
    (nil))

(insn 46 45 48 (set (reg/v:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 45 (nil))
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 43

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 43
(code_label 48 46 68 436 "" "" [2 uses])

(note 68 48 50 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 50 68 53 (set (reg/v:DF 10 st(2))
        (minus:DF (reg/v:DF 10 st(2))
            (mem/f:DF (symbol_ref:SI ("FACTOR")) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 53 50 61 (set (reg/i:DF 8 st(0))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (insn_list 50 (nil))
    (nil))

(insn 61 53 69 (use (reg/i:DF 8 st(0))) -1 (insn_list 53 (nil))
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 8 [st] 20 [frame]

(note 69 61 0 NOTE_INSN_DELETED 0)


;; Function chisq

;; 31 regs to allocate: 244 (2) 252 (2) 258 (2) 279 (2) 286 (2) 63 232 (2) 57 (2) 55 (2) 415 430 400 408 231 (2) 238 (2) 251 (2) 280 (2) 56 (2) 44 45 59 (2) 61 (2) 58 (2) 124 62 (2) 60 (2) 74 (2) 71 (2) 50 (2) 49 43
;; 43 conflicts: 43 44 45 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 67 68 69 71 72 73 74 75 80 83 84 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 138 141 142 146 147 148 149 150 151 153 154 155 157 158 159 160 161 162 164 165 166 168 169 170 171 172 173 175 176 177 179 180 181 182 183 184 186 187 188 190 191 192 193 194 195 197 198 199 201 202 203 204 205 206 208 209 210 212 213 214 215 217 218 219 220 224 225 231 232 233 237 238 239 243 244 245 251 252 253 257 258 259 260 261 262 264 265 266 267 271 272 275 279 280 281 285 286 287 290 294 295 296 298 300 301 302 303 304 306 308 309 310 311 312 314 315 316 317 318 319 324 325 327 329 331 332 334 336 337 338 339 340 341 346 347 349 351 353 354 356 358 360 361 362 363 364 366 368 369 370 371 372 374 376 377 378 379 380 382 384 385 386 387 388 390 392 393 394 395 396 398 400 404 406 408 412 414 415 424 427 428 429 430 450 452 453 0 1 2 3 4 5 7 8 9 10 11
;; 44 conflicts: 43 44 45 49 50 51 52 53 54 55 58 59 60 61 62 63 64 67 68 69 71 72 73 74 75 80 83 84 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 138 141 142 153 154 155 164 165 166 175 176 177 186 187 188 197 198 199 208 209 210 0 1 2 3 5 7 8 9 10 11
;; 45 conflicts
;; 49 conflicts
;; 50 conflicts
;; 51 conflicts: 43 44 45 50 51 52 53 55 58 59 60 61 62 71 74 115 119 120 124 134 135 0 1 2 7 8 9 10 11
;; 52 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 71 74 124 135 7 8 9 10 11
;; 53 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 71 74 124 135 136 7 8 9 10 11
;; 54 conflicts: 43 44 45 50 52 53 54 55 58 59 60 61 62 71 74 124 136 7 8 10 11
;; 55 conflicts: 43 44 45 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 67 68 69 71 72 73 74 75 80 83 84 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 210 213 215 217 218 219 220 224 225 231 232 233 237 238 239 243 244 245 251 252 253 257 258 261 265 267 271 272 275 279 280 281 285 286 287 290 294 295 312 315 324 325 327 329 331 332 334 337 346 347 349 351 353 354 396 398 400 404 406 408 412 414 415 424 427 428 429 430 450 452 453 0 1 2 3 4 5 7 8 9 10 11
;; 56 conflicts: 43 45 50 55 56 57 412 415 424 427 428 429 430 450 452 453 0 1 7 8 9
;; 57 conflicts: 43 45 50 55 56 57 412 415 424 427 428 429 430 1 7 8 9
;; 58 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 68 71 74 75 80 83 84 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 0 1 2 3 7 8 9 10 11
;; 59 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 68 71 74 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 0 1 2 3 7 8 9 10 11
;; 60 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 71 74 98 103 112 113 115 117 118 119 120 123 124 125 134 135 136 0 1 2 3 7 8 9 10 11
;; 61 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 71 74 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 0 1 2 3 7 8 9 10 11
;; 62 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 71 74 115 117 118 119 120 123 124 125 134 135 136 0 1 2 7 8 9 10 11
;; 63 conflicts: 43 44 50 55 63 7
;; 64 conflicts: 43 44 50 55 64 67 68 71 74 0 3 7
;; 67 conflicts: 43 44 50 55 64 67 71 74 0 3 7
;; 68 conflicts: 43 44 50 55 58 59 64 68 69 71 72 73 74 75 80 83 84 86 0 3 7 8
;; 69 conflicts: 43 44 50 55 68 69 71 74 3 7 8
;; 71 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 64 67 68 69 71 72 73 74 75 80 83 84 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 0 1 2 3 7 8 9 10 11
;; 72 conflicts: 43 44 50 55 68 71 72 74 3 7 8
;; 73 conflicts: 43 44 50 55 68 71 73 74 3 7 8
;; 74 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 64 67 68 69 71 72 73 74 75 80 83 84 86 89 90 91 94 95 96 97 98 99 100 101 103 112 113 115 117 118 119 120 123 124 125 134 135 136 0 1 2 3 7 8 9 10 11
;; 75 conflicts: 43 44 50 55 58 68 71 74 75 0 3 7
;; 80 conflicts: 43 44 50 55 58 68 71 74 80 3 7 8
;; 83 conflicts: 43 44 50 55 58 68 71 74 83 3 7 8
;; 84 conflicts: 43 44 50 55 58 68 71 74 84 3 7 8
;; 86 conflicts: 43 44 50 55 58 59 68 71 74 86 0 3 7
;; 89 conflicts: 43 44 50 55 58 59 71 74 89 7 8
;; 90 conflicts: 43 44 50 55 58 59 71 74 90 7 8
;; 91 conflicts: 43 44 50 55 58 59 71 74 91 7 8
;; 94 conflicts: 43 44 50 55 58 59 61 71 74 94 95 7 8 9
;; 95 conflicts: 43 44 50 55 58 59 61 71 74 94 95 7 8 9
;; 96 conflicts: 43 44 50 55 58 59 61 71 74 96 97 98 0 3 7
;; 97 conflicts: 43 44 50 55 58 59 61 71 74 96 97 0 3 7
;; 98 conflicts: 43 44 50 55 58 59 60 61 71 74 96 98 99 100 101 103 112 113 0 3 7 8
;; 99 conflicts: 43 44 50 55 58 59 61 71 74 98 99 3 7 8
;; 100 conflicts: 43 44 50 55 58 59 61 71 74 98 100 3 7 8
;; 101 conflicts: 43 44 50 55 58 59 61 71 74 98 101 3 7 8
;; 103 conflicts: 43 44 50 55 58 59 60 61 71 74 98 103 112 113 0 3 7 8
;; 112 conflicts: 43 44 50 55 58 59 60 61 71 74 98 103 112 0 3 7 8
;; 113 conflicts: 43 44 50 55 58 59 60 61 71 74 98 103 113 0 3 7 8
;; 115 conflicts: 43 44 45 50 51 55 58 59 60 61 62 71 74 115 117 118 119 120 124 125 0 1 2 7 10
;; 117 conflicts: 43 44 45 50 55 58 59 60 61 62 71 74 115 117 124 0 2 7
;; 118 conflicts: 43 44 45 50 55 58 59 60 61 62 71 74 115 118 124 0 2 7
;; 119 conflicts: 43 44 45 50 51 55 58 59 60 61 62 71 74 115 119 120 124 125 0 1 2 7 10
;; 120 conflicts: 43 44 45 50 51 55 58 59 60 61 62 71 74 115 119 120 124 125 134 0 1 2 7 8 10
;; 123 conflicts: 43 44 45 50 55 58 59 60 61 62 71 74 123 0 7
;; 124 conflicts: 43 44 45 50 51 52 53 54 55 58 59 60 61 62 71 74 115 117 118 119 120 124 125 134 135 136 0 1 2 7 8 9 10 11
;; 125 conflicts: 43 44 45 50 55 58 59 60 61 62 71 74 115 119 120 124 125 0 1 2 7 10
;; 134 conflicts: 43 44 45 50 51 55 58 59 60 61 62 71 74 120 124 134 1 7 8 10
;; 135 conflicts: 43 44 45 50 51 52 53 55 58 59 60 61 62 71 74 124 135 7 8 9 10 11
;; 136 conflicts: 43 44 45 50 53 54 55 58 59 60 61 62 71 74 124 136 7 8 10 11
;; 138 conflicts: 43 44 45 49 50 138 141 142 146 147 148 0 1 2 7 8
;; 141 conflicts: 43 44 45 49 50 138 141 1 2 7
;; 142 conflicts: 43 44 45 49 50 138 142 146 147 0 1 2 7
;; 146 conflicts: 43 45 49 50 138 142 146 0 1 2 7
;; 147 conflicts: 43 45 49 50 138 142 147 148 0 1 2 7 8
;; 148 conflicts: 43 45 49 50 138 147 148 0 2 7 8
;; 148 preferences: 9
;; 149 conflicts: 43 45 49 50 149 150 151 0 1 7
;; 150 conflicts: 43 45 49 50 149 150 0 1 7
;; 151 conflicts: 43 45 49 50 149 151 0 1 7
;; 153 conflicts: 43 44 45 49 50 153 154 155 157 158 159 0 1 2 7 8
;; 154 conflicts: 43 44 45 49 50 153 154 1 2 7
;; 155 conflicts: 43 44 45 49 50 153 155 157 158 0 1 2 7
;; 157 conflicts: 43 45 49 50 153 155 157 0 1 2 7
;; 158 conflicts: 43 45 49 50 153 155 158 159 0 1 2 7 8
;; 159 conflicts: 43 45 49 50 153 158 159 0 2 7 8
;; 159 preferences: 9
;; 160 conflicts: 43 45 49 50 160 161 162 0 1 7
;; 161 conflicts: 43 45 49 50 160 161 0 1 7
;; 162 conflicts: 43 45 49 50 160 162 0 1 7
;; 164 conflicts: 43 44 45 49 50 164 165 166 168 169 170 0 1 2 7 8
;; 165 conflicts: 43 44 45 49 50 164 165 1 2 7
;; 166 conflicts: 43 44 45 49 50 164 166 168 169 0 1 2 7
;; 168 conflicts: 43 45 49 50 164 166 168 0 1 2 7
;; 169 conflicts: 43 45 49 50 164 166 169 170 0 1 2 7 8
;; 170 conflicts: 43 45 49 50 164 169 170 0 2 7 8
;; 170 preferences: 9
;; 171 conflicts: 43 45 49 50 171 172 173 0 1 7
;; 172 conflicts: 43 45 49 50 171 172 0 1 7
;; 173 conflicts: 43 45 49 50 171 173 0 1 7
;; 175 conflicts: 43 44 45 49 50 175 176 177 179 180 181 0 1 2 7 8
;; 176 conflicts: 43 44 45 49 50 175 176 1 2 7
;; 177 conflicts: 43 44 45 49 50 175 177 179 180 0 1 2 7
;; 179 conflicts: 43 45 49 50 175 177 179 0 1 2 7
;; 180 conflicts: 43 45 49 50 175 177 180 181 0 1 2 7 8
;; 181 conflicts: 43 45 49 50 175 180 181 0 2 7 8
;; 181 preferences: 9
;; 182 conflicts: 43 45 49 50 182 183 184 0 1 7
;; 183 conflicts: 43 45 49 50 182 183 0 1 7
;; 184 conflicts: 43 45 49 50 182 184 0 1 7
;; 186 conflicts: 43 44 45 49 50 186 187 188 190 191 192 0 1 2 7 8
;; 187 conflicts: 43 44 45 49 50 186 187 1 2 7
;; 188 conflicts: 43 44 45 49 50 186 188 190 191 0 1 2 7
;; 190 conflicts: 43 45 49 50 186 188 190 0 1 2 7
;; 191 conflicts: 43 45 49 50 186 188 191 192 0 1 2 7 8
;; 192 conflicts: 43 45 49 50 186 191 192 0 2 7 8
;; 192 preferences: 9
;; 193 conflicts: 43 45 49 50 193 194 195 0 1 7
;; 194 conflicts: 43 45 49 50 193 194 0 1 7
;; 195 conflicts: 43 45 49 50 193 195 0 1 7
;; 197 conflicts: 43 44 45 49 50 197 198 199 201 202 203 0 1 2 7 8
;; 198 conflicts: 43 44 45 49 50 197 198 1 2 7
;; 199 conflicts: 43 44 45 49 50 197 199 201 202 0 1 2 7
;; 201 conflicts: 43 45 49 50 197 199 201 0 1 2 7
;; 202 conflicts: 43 45 49 50 197 199 202 203 0 1 2 7 8
;; 203 conflicts: 43 45 49 50 197 202 203 0 2 7 8
;; 203 preferences: 9
;; 204 conflicts: 43 45 49 50 204 205 206 0 1 7
;; 205 conflicts: 43 45 49 50 204 205 0 1 7
;; 206 conflicts: 43 45 49 50 204 206 0 1 7
;; 208 conflicts: 43 44 45 49 50 208 209 210 212 213 214 0 4 5 7 8
;; 209 conflicts: 43 44 45 49 50 208 209 0 5 7
;; 210 conflicts: 43 44 45 49 50 55 208 210 212 213 214 215 217 218 219 220 224 225 231 232 233 237 238 239 243 244 245 0 3 4 5 7 8
;; 212 conflicts: 43 45 49 50 208 210 212 0 4 5 7
;; 213 conflicts: 43 45 49 50 55 208 210 213 214 215 217 218 219 220 224 225 231 232 233 237 238 239 243 244 245 252 0 3 4 5 7 8
;; 214 conflicts: 43 45 49 50 208 210 213 214 0 4 5 7 8
;; 214 preferences: 9
;; 215 conflicts: 43 45 49 50 55 210 213 215 217 218 0 3 4 5 7
;; 217 conflicts: 43 45 49 50 55 210 213 215 217 0 3 4 5 7
;; 218 conflicts: 43 45 49 50 55 210 213 215 218 219 220 224 225 231 232 233 237 238 239 243 244 245 251 252 253 0 3 4 5 7 8
;; 219 conflicts: 43 45 49 50 55 210 213 218 219 3 4 5 7 8
;; 220 conflicts: 43 45 49 50 55 210 213 218 220 0 3 4 5 7
;; 224 conflicts: 43 45 49 50 55 210 213 218 224 3 4 5 7 8
;; 225 conflicts: 43 45 49 50 55 210 213 218 225 232 0 3 4 5 7
;; 231 conflicts: 43 45 49 50 55 210 213 218 231 233 237 0 3 4 5 7 8
;; 232 conflicts: 43 45 49 50 55 210 213 218 225 232 0 3 4 5 7
;; 233 conflicts: 43 45 49 50 55 210 213 218 231 233 0 3 4 5 7
;; 237 conflicts: 43 45 49 50 55 210 213 218 231 237 3 4 5 7 8
;; 238 conflicts: 43 45 49 50 55 210 213 218 238 239 243 0 3 4 5 7 8
;; 239 conflicts: 43 45 49 50 55 210 213 218 238 239 0 3 4 5 7
;; 243 conflicts: 43 45 49 50 55 210 213 218 238 243 3 4 5 7 8
;; 244 conflicts: 43 45 49 50 55 210 213 218 244 3 4 5 7
;; 245 conflicts: 43 45 49 50 55 210 213 218 245 252 0 3 4 5 7
;; 251 conflicts: 43 45 49 50 55 218 251 253 257 0 3 7 8
;; 252 conflicts: 43 45 49 50 55 213 218 245 252 0 3 4 7
;; 253 conflicts: 43 45 49 50 55 218 251 253 0 3 7
;; 257 conflicts: 43 45 49 50 55 251 257 7 8
;; 258 conflicts: 43 45 49 50 55 258 7
;; 259 conflicts: 43 45 49 50 259 260 261 262 264 265 266 0 3 4 5 7 8
;; 260 conflicts: 43 45 49 50 259 260 4 5 7
;; 261 conflicts: 43 45 49 50 55 259 261 262 264 265 266 267 271 272 275 279 280 281 285 286 287 290 294 0 3 4 5 7 8
;; 262 conflicts: 43 45 49 50 259 261 262 264 265 0 3 4 5 7
;; 264 conflicts: 43 45 49 50 259 261 262 264 0 3 4 5 7
;; 265 conflicts: 43 45 49 50 55 259 261 262 265 266 267 271 272 275 279 280 281 285 286 287 290 0 3 4 5 7 8
;; 266 conflicts: 43 45 49 50 259 261 265 266 3 4 5 7 8
;; 267 conflicts: 43 45 49 50 55 261 265 267 0 3 5 7
;; 271 conflicts: 43 45 49 50 55 261 265 271 3 5 7 8
;; 272 conflicts: 43 45 49 50 55 261 265 272 275 279 0 3 4 5 7 8
;; 275 conflicts: 43 45 49 50 55 261 265 272 275 0 3 4 5 7
;; 279 conflicts: 43 45 49 50 55 261 265 272 279 3 4 5 7
;; 279 preferences: 8
;; 280 conflicts: 43 45 49 50 55 261 265 280 281 285 0 3 5 7 8
;; 281 conflicts: 43 45 49 50 55 261 265 280 281 0 3 5 7
;; 285 conflicts: 43 45 49 50 55 261 265 280 285 3 5 7 8
;; 286 conflicts: 43 45 49 50 55 261 265 286 3 5 7
;; 286 preferences: 8
;; 287 conflicts: 43 45 49 50 55 261 265 287 290 294 0 3 4 5 7 8
;; 290 conflicts: 43 45 49 50 55 261 265 287 290 0 3 4 5 7
;; 294 conflicts: 43 45 49 50 55 261 287 294 4 5 7 8
;; 295 conflicts: 43 45 49 50 55 295 7 8
;; 296 conflicts: 43 45 49 50 296 298 0 1 7
;; 298 conflicts: 43 45 49 50 296 298 0 1 7
;; 300 conflicts: 43 45 49 50 300 301 0 1 7
;; 301 conflicts: 43 45 49 50 300 301 302 303 0 1 7
;; 302 conflicts: 43 45 49 50 301 302 0 1 7
;; 303 conflicts: 43 45 49 50 301 303 0 1 7
;; 304 conflicts: 43 45 49 50 304 306 0 1 7
;; 306 conflicts: 43 45 49 50 304 306 0 1 7
;; 308 conflicts: 43 45 49 50 308 309 0 1 7
;; 309 conflicts: 43 45 49 50 308 309 310 311 0 1 7
;; 310 conflicts: 43 45 49 50 309 310 0 1 7
;; 311 conflicts: 43 45 49 50 309 311 0 1 7
;; 312 conflicts: 43 45 49 50 55 312 314 315 316 317 318 319 0 1 2 3 7
;; 314 conflicts: 43 45 49 50 312 314 1 3 7
;; 315 conflicts: 43 45 49 50 55 312 315 316 317 318 319 0 1 2 3 7
;; 316 conflicts: 43 45 49 50 312 315 316 317 0 1 2 3 7
;; 317 conflicts: 43 45 49 50 312 315 316 317 318 319 0 1 2 3 7
;; 318 conflicts: 43 45 49 50 312 315 317 318 0 1 2 3 7
;; 319 conflicts: 43 45 49 50 312 315 317 319 0 1 2 3 7
;; 324 conflicts: 43 45 49 50 55 324 325 7 8 9
;; 325 conflicts: 43 45 49 50 55 324 325 7 8 9
;; 327 conflicts: 43 45 49 50 55 327 329 0 1 7
;; 329 conflicts: 43 45 49 50 55 327 329 0 1 7
;; 331 conflicts: 43 45 49 50 55 331 332 7 8 9
;; 332 conflicts: 43 45 49 50 55 331 332 7 8 9
;; 334 conflicts: 43 45 49 50 55 334 336 337 338 339 340 341 0 1 2 3 7
;; 336 conflicts: 43 45 49 50 334 336 1 3 7
;; 337 conflicts: 43 45 49 50 55 334 337 338 339 340 341 0 1 2 3 7
;; 338 conflicts: 43 45 49 50 334 337 338 339 0 1 2 3 7
;; 339 conflicts: 43 45 49 50 334 337 338 339 340 341 0 1 2 3 7
;; 340 conflicts: 43 45 49 50 334 337 339 340 0 1 2 3 7
;; 341 conflicts: 43 45 49 50 334 337 339 341 0 1 2 3 7
;; 346 conflicts: 43 45 49 50 55 346 347 7 8 9
;; 347 conflicts: 43 45 49 50 55 346 347 7 8 9
;; 349 conflicts: 43 45 49 50 55 349 351 0 1 7
;; 351 conflicts: 43 45 49 50 55 349 351 0 1 7
;; 353 conflicts: 43 45 49 50 55 353 354 7 8 9
;; 354 conflicts: 43 45 49 50 55 353 354 7 8 9
;; 356 conflicts: 43 45 49 50 356 358 0 1 7
;; 358 conflicts: 43 45 49 50 356 358 0 1 7
;; 360 conflicts: 43 45 49 50 360 361 0 1 7
;; 361 conflicts: 43 45 49 50 360 361 362 363 0 1 7
;; 362 conflicts: 43 45 49 50 361 362 0 1 7
;; 363 conflicts: 43 45 49 50 361 363 0 1 7
;; 364 conflicts: 43 45 49 50 364 366 0 1 7
;; 366 conflicts: 43 45 49 50 364 366 0 1 7
;; 368 conflicts: 43 45 49 50 368 369 0 1 7
;; 369 conflicts: 43 45 49 50 368 369 370 371 0 1 7
;; 370 conflicts: 43 45 49 50 369 370 0 1 7
;; 371 conflicts: 43 45 49 50 369 371 0 1 7
;; 372 conflicts: 43 45 49 50 372 374 0 1 7
;; 374 conflicts: 43 45 49 50 372 374 0 1 7
;; 376 conflicts: 43 45 49 50 376 377 0 1 7
;; 377 conflicts: 43 45 49 50 376 377 378 379 0 1 7
;; 378 conflicts: 43 45 49 50 377 378 0 1 7
;; 379 conflicts: 43 45 49 50 377 379 0 1 7
;; 380 conflicts: 43 45 49 50 380 382 0 1 7
;; 382 conflicts: 43 45 49 50 380 382 0 1 7
;; 384 conflicts: 43 45 49 50 384 385 0 1 7
;; 385 conflicts: 43 45 49 50 384 385 386 387 0 1 7
;; 386 conflicts: 43 45 49 50 385 386 0 1 7
;; 387 conflicts: 43 45 49 50 385 387 0 1 7
;; 388 conflicts: 43 45 49 50 388 390 0 1 7
;; 390 conflicts: 43 45 49 50 388 390 0 1 7
;; 392 conflicts: 43 45 49 50 392 393 0 1 7
;; 393 conflicts: 43 45 49 50 392 393 394 395 0 1 7
;; 394 conflicts: 43 45 49 50 393 394 0 1 7
;; 395 conflicts: 43 45 49 50 393 395 0 1 7
;; 396 conflicts: 43 45 49 50 55 396 398 0 1 7
;; 398 conflicts: 43 45 49 50 55 396 398 0 1 7
;; 400 conflicts: 43 45 49 50 55 400 7
;; 404 conflicts: 43 45 49 50 55 404 406 0 1 7
;; 406 conflicts: 43 45 49 50 55 404 406 0 1 7
;; 408 conflicts: 43 45 49 50 55 408 7
;; 412 conflicts: 43 45 50 55 56 57 412 414 415 424 0 1 7 8
;; 414 conflicts: 43 45 50 55 412 414 0 1 7
;; 415 conflicts: 43 45 50 55 56 57 412 415 424 427 428 429 430 1 7 8 9
;; 415 preferences: 0
;; 424 conflicts: 43 45 50 55 56 57 412 415 424 1 7 8
;; 427 conflicts: 43 45 50 55 56 57 415 427 428 7 8 9
;; 428 conflicts: 43 45 50 55 56 57 415 427 428 7 8 9
;; 429 conflicts: 43 45 50 55 56 57 415 429 7 8
;; 430 conflicts: 43 45 50 55 56 57 415 430 7
;; 450 conflicts: 43 45 50 55 56 450 452 453 0 1 7
;; 452 conflicts: 43 45 50 55 56 450 452 0 1 7
;; 453 conflicts: 43 45 50 55 56 450 453 0 1 7
;; 466 conflicts: 50 466 0 7
;; 468 conflicts: 50 468 0 7

Spilling for insn 6.
Using reg 0 for reload 0
Spilling for insn 14.
Using reg 8 for reload 0
Spilling for insn 16.
Spilling for insn 24.
Spilling for insn 26.
Spilling for insn 32.
Spilling for insn 34.
Spilling for insn 1718.
Spilling for insn 57.
Spilling for insn 60.
Spilling for insn 63.
Spilling for insn 66.
Spilling for insn 69.
Spilling for insn 72.
Spilling for insn 48.
Spilling for insn 93.
Spilling for insn 1723.
Spilling for insn 126.
Spilling for insn 127.
Spilling for insn 130.
Spilling for insn 132.
Spilling for insn 135.
Spilling for insn 153.
Spilling for insn 154.
Spilling for insn 157.
Spilling for insn 159.
Spilling for insn 162.
Spilling for insn 177.
Spilling for insn 178.
Spilling for insn 181.
Spilling for insn 183.
Spilling for insn 186.
Spilling for insn 192.
Spilling for insn 200.
Spilling for insn 201.
Using reg 0 for reload 0
Spilling for insn 206.
Using reg 8 for reload 0
Spilling for insn 222.
Spilling for insn 223.
Spilling for insn 226.
Spilling for insn 228.
Spilling for insn 231.
Spilling for insn 264.
Spilling for insn 265.
Spilling for insn 268.
Spilling for insn 271.
Spilling for insn 1728.
Using reg 0 for reload 0
Spilling for insn 1800.
Spilling for insn 285.
Spilling for insn 289.
Spilling for insn 291.
Spilling for insn 295.
Spilling for insn 305.
Spilling for insn 306.
Spilling for insn 329.
Spilling for insn 330.
Spilling for insn 332.
Spilling for insn 333.
Spilling for insn 336.
Spilling for insn 337.
Spilling for insn 341.
Spilling for insn 343.
Spilling for insn 345.
Spilling for insn 347.
Spilling for insn 349.
Spilling for insn 351.
Spilling for insn 353.
Spilling for insn 355.
Spilling for insn 357.
Spilling for insn 366.
Spilling for insn 276.
Using reg 0 for reload 0
Spilling for insn 102.
Spilling for insn 389.
Spilling for insn 1733.
Using reg 0 for reload 0
Spilling for insn 401.
Spilling for insn 1456.
Spilling for insn 1460.
Spilling for insn 1462.
Spilling for insn 1467.
Spilling for insn 1474.
Spilling for insn 409.
Spilling for insn 417.
Spilling for insn 420.
Spilling for insn 426.
Using reg 0 for reload 0
Spilling for insn 440.
Spilling for insn 441.
Spilling for insn 448.
Spilling for insn 454.
Using reg 2 for reload 0
Spilling for insn 458.
Using reg 8 for reload 0
Spilling for insn 465.
Spilling for insn 473.
Spilling for insn 476.
Spilling for insn 482.
Using reg 0 for reload 0
Spilling for insn 496.
Spilling for insn 497.
Spilling for insn 504.
Spilling for insn 510.
Using reg 2 for reload 0
Spilling for insn 514.
Using reg 8 for reload 0
Spilling for insn 521.
Spilling for insn 529.
Spilling for insn 532.
Spilling for insn 538.
Using reg 0 for reload 0
Spilling for insn 552.
Spilling for insn 553.
Spilling for insn 560.
Spilling for insn 566.
Using reg 2 for reload 0
Spilling for insn 570.
Using reg 8 for reload 0
Spilling for insn 577.
Spilling for insn 585.
Spilling for insn 588.
Spilling for insn 594.
Using reg 0 for reload 0
Spilling for insn 608.
Spilling for insn 609.
Spilling for insn 616.
Spilling for insn 622.
Using reg 2 for reload 0
Spilling for insn 626.
Using reg 8 for reload 0
Spilling for insn 633.
Spilling for insn 641.
Spilling for insn 644.
Spilling for insn 650.
Using reg 0 for reload 0
Spilling for insn 664.
Spilling for insn 665.
Spilling for insn 672.
Spilling for insn 678.
Using reg 2 for reload 0
Spilling for insn 682.
Using reg 8 for reload 0
Spilling for insn 689.
Spilling for insn 697.
Spilling for insn 700.
Spilling for insn 706.
Using reg 0 for reload 0
Spilling for insn 720.
Spilling for insn 721.
Spilling for insn 728.
Spilling for insn 734.
Using reg 2 for reload 0
Spilling for insn 738.
Using reg 8 for reload 0
Spilling for insn 745.
Spilling for insn 753.
Spilling for insn 762.
Using reg 1 for reload 0
Spilling for insn 776.
Spilling for insn 777.
Spilling for insn 785.
Spilling for insn 787.
Spilling for insn 791.
Spilling for insn 795.
Spilling for insn 809.
Spilling for insn 813.
Spilling for insn 835.
Spilling for insn 836.
Spilling for insn 850.
Spilling for insn 854.
Spilling for insn 868.
Spilling for insn 872.
Spilling for insn 873.
Spilling for insn 895.
Spilling for insn 896.
Spilling for insn 910.
Spilling for insn 914.
Spilling for insn 915.
Spilling for insn 924.
Spilling for insn 930.
Using reg 0 for reload 0
Spilling for insn 940.
Spilling for insn 942.
Spilling for insn 946.
Spilling for insn 950.
Spilling for insn 964.
Spilling for insn 968.
Spilling for insn 970.
Spilling for insn 992.
Spilling for insn 996.
Spilling for insn 1010.
Spilling for insn 1014.
Spilling for insn 1015.
Spilling for insn 1017.
Spilling for insn 1039.
Spilling for insn 1043.
Spilling for insn 1044.
Spilling for insn 1420.
Spilling for insn 1424.
Spilling for insn 1426.
Spilling for insn 1431.
Spilling for insn 1438.
Spilling for insn 1060.
Spilling for insn 1064.
Spilling for insn 1066.
Spilling for insn 1072.
Spilling for insn 1082.
Using reg 8 for reload 0
Spilling for insn 1089.
Spilling for insn 1093.
Spilling for insn 1095.
Spilling for insn 1101.
Spilling for insn 1111.
Using reg 8 for reload 0
Spilling for insn 1118.
Spilling for insn 1122.
Spilling for insn 1124.
Spilling for insn 1130.
Spilling for insn 1140.
Using reg 8 for reload 0
Spilling for insn 1152.
Spilling for insn 1154.
Spilling for insn 1155.
Using reg 0 for reload 0
Spilling for insn 1161.
Using reg 8 for reload 0
Spilling for insn 1165.
Spilling for insn 1169.
Spilling for insn 1171.
Spilling for insn 1174.
Spilling for insn 1176.
Spilling for insn 1177.
Using reg 0 for reload 0
Spilling for insn 1183.
Using reg 8 for reload 0
Spilling for insn 1191.
Spilling for insn 1195.
Spilling for insn 1197.
Spilling for insn 1203.
Spilling for insn 1213.
Using reg 8 for reload 0
Spilling for insn 1225.
Spilling for insn 1227.
Spilling for insn 1228.
Using reg 0 for reload 0
Spilling for insn 1234.
Using reg 8 for reload 0
Spilling for insn 1238.
Spilling for insn 1242.
Spilling for insn 1244.
Spilling for insn 1247.
Spilling for insn 1249.
Spilling for insn 1250.
Using reg 0 for reload 0
Spilling for insn 1256.
Using reg 8 for reload 0
Spilling for insn 1264.
Spilling for insn 1268.
Spilling for insn 1270.
Spilling for insn 1276.
Spilling for insn 1286.
Using reg 8 for reload 0
Spilling for insn 1293.
Spilling for insn 1297.
Spilling for insn 1299.
Spilling for insn 1305.
Spilling for insn 1315.
Using reg 8 for reload 0
Spilling for insn 1322.
Spilling for insn 1326.
Spilling for insn 1328.
Spilling for insn 1334.
Spilling for insn 1344.
Using reg 8 for reload 0
Spilling for insn 1351.
Spilling for insn 1355.
Spilling for insn 1357.
Spilling for insn 1363.
Spilling for insn 1373.
Using reg 8 for reload 0
Spilling for insn 1380.
Spilling for insn 1384.
Spilling for insn 1386.
Spilling for insn 1392.
Spilling for insn 1402.
Using reg 8 for reload 0
Spilling for insn 1411.
Spilling for insn 1450.
Spilling for insn 1481.
Spilling for insn 1488.
Spilling for insn 1492.
Spilling for insn 1494.
Spilling for insn 1498.
Spilling for insn 1511.
Spilling for insn 1523.
Spilling for insn 1525.
Spilling for insn 1530.
Spilling for insn 1532.
Spilling for insn 1534.
Spilling for insn 1540.
Spilling for insn 1549.
Spilling for insn 1555.
Spilling for insn 1567.
Spilling for insn 1569.
Spilling for insn 1571.
Spilling for insn 1583.
Spilling for insn 1595.
Spilling for insn 1607.
Spilling for insn 1609.
Spilling for insn 1611.
Spilling for insn 1622.
Spilling for insn 1624.
Spilling for insn 1628.
Spilling for insn 1630.
Spilling for insn 1634.
Spilling for insn 1636.
Spilling for insn 1638.
Spilling for insn 1650.
Spilling for insn 1662.
Spilling for insn 1674.
Spilling for insn 1676.
Spilling for insn 1678.
Spilling for insn 1690.
Spilling for insn 392.
Using reg 0 for reload 0
Spilling for insn 1703.
Spilling for insn 1705.
Using reg 8 for reload 0
Spilling for insn 1708.
;; Register dispositions:
44 in 4  51 in 10  52 in 8  53 in 11  54 in 10  56 in 11  
57 in 10  63 in 0  64 in 0  67 in 3  68 in 3  69 in 8  
72 in 8  73 in 8  75 in 0  80 in 8  83 in 8  84 in 8  
86 in 0  89 in 8  90 in 8  91 in 8  94 in 9  95 in 8  
96 in 0  97 in 3  98 in 3  99 in 8  100 in 8  101 in 8  
103 in 0  112 in 8  113 in 8  115 in 2  117 in 0  118 in 0  
119 in 0  120 in 1  123 in 0  124 in 3  125 in 10  134 in 8  
135 in 9  136 in 8  138 in 2  141 in 1  142 in 1  146 in 0  
147 in 0  148 in 8  149 in 1  150 in 0  151 in 0  153 in 2  
154 in 1  155 in 1  157 in 0  158 in 0  159 in 8  160 in 1  
161 in 0  162 in 0  164 in 2  165 in 1  166 in 1  168 in 0  
169 in 0  170 in 8  171 in 1  172 in 0  173 in 0  175 in 2  
176 in 1  177 in 1  179 in 0  180 in 0  181 in 8  182 in 1  
183 in 0  184 in 0  186 in 2  187 in 1  188 in 1  190 in 0  
191 in 0  192 in 8  193 in 1  194 in 0  195 in 0  197 in 2  
198 in 1  199 in 1  201 in 0  202 in 0  203 in 8  204 in 1  
205 in 0  206 in 0  208 in 0  209 in 5  210 in 5  212 in 4  
213 in 4  214 in 8  215 in 0  217 in 3  218 in 3  219 in 8  
220 in 0  224 in 8  225 in 0  232 in 8  233 in 0  237 in 8  
239 in 0  243 in 8  244 in 8  245 in 0  252 in 8  253 in 0  
257 in 8  258 in 8  259 in 4  260 in 5  261 in 5  262 in 0  
264 in 3  265 in 3  266 in 8  267 in 0  271 in 8  272 in 4  
275 in 0  279 in 8  281 in 0  285 in 8  286 in 8  287 in 4  
290 in 0  294 in 8  295 in 8  296 in 1  298 in 0  300 in 0  
301 in 1  302 in 0  303 in 0  304 in 1  306 in 0  308 in 0  
309 in 1  310 in 0  311 in 0  312 in 3  314 in 1  315 in 1  
316 in 0  317 in 2  318 in 0  319 in 0  324 in 9  325 in 8  
327 in 1  329 in 0  331 in 9  332 in 8  334 in 3  336 in 1  
337 in 1  338 in 0  339 in 2  340 in 0  341 in 0  346 in 9  
347 in 8  349 in 1  351 in 0  353 in 9  354 in 8  356 in 1  
358 in 0  360 in 0  361 in 1  362 in 0  363 in 0  364 in 1  
366 in 0  368 in 0  369 in 1  370 in 0  371 in 0  372 in 1  
374 in 0  376 in 0  377 in 1  378 in 0  379 in 0  380 in 1  
382 in 0  384 in 0  385 in 1  386 in 0  387 in 0  388 in 1  
390 in 0  392 in 0  393 in 1  394 in 0  395 in 0  396 in 1  
398 in 0  400 in 0  404 in 1  406 in 0  408 in 0  412 in 1  
414 in 0  415 in 0  424 in 8  427 in 8  428 in 9  429 in 8  
430 in 1  450 in 1  452 in 0  453 in 0  466 in 0  468 in 0  


;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 10 11 16 17 18 20

(note 2 0 1738 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp] 55
(note 1738 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(note 4 1738 6 NOTE_INSN_DELETED 0)

(note 6 4 7 NOTE_INSN_DELETED 0)

(note 7 6 10 NOTE_INSN_FUNCTION_BEG 0)

(note 10 7 14 0x40280ca0 NOTE_INSN_BLOCK_BEG 0)

(insn 14 10 1810 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC81")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (nil))

(insn 1810 14 16 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 16 1810 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg:SI 6 ebp)
                    (const_int 12 [0xc])) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (insn_list 6 (nil))
    (nil))

(jump_insn 17 16 1739 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 39)
            (pc))) 288 {*jcc_1} (insn_list 16 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 50 55

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 50 55
(note 1739 17 22 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 22 1739 24 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 24 22 26 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC82"))) 27 {pushsi2} (insn_list 22 (nil))
    (nil))

(insn 26 24 27 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 27 26 30 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 30 27 32 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 32 30 34 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC83"))) 27 {pushsi2} (insn_list 30 (nil))
    (nil))

(insn 34 32 35 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 35 34 38 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 38 35 39 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 50 55

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 50 55
(code_label 39 38 1740 442 "" "" [1 uses])

(note 1740 39 42 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 42 1740 45 (set (reg/v:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 45 42 1718 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 1718 45 1719 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 45 (nil))
    (nil))

(jump_insn 1719 1718 46 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 288 {*jcc_1} (insn_list 1718 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 50 55 63

(note 46 1719 52 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44 50 55 63
(code_label 52 46 1741 446 "" "" [1 uses])

(note 1741 52 2190 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 2190 1741 2191 (set (mem/s:SI (reg/v:SI 0 eax) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2191 2190 2192 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 4 [0x4])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2192 2191 2193 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 8 [0x8])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2193 2192 2194 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 12 [0xc])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2194 2193 2195 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 16 [0x10])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2195 2194 2196 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 20 [0x14])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2196 2195 2197 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 24 [0x18])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2197 2196 2198 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 28 [0x1c])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2198 2197 2199 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 32 [0x20])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2199 2198 2200 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 36 [0x24])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2200 2199 2201 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 40 [0x28])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2201 2200 75 (set (mem/s:SI (plus:SI (reg/v:SI 0 eax)
                (const_int 44 [0x2c])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 75 2201 78 (parallel[ 
            (set (reg/v:SI 0 eax)
                (plus:SI (reg/v:SI 0 eax)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 78 75 81 NOTE_INSN_LOOP_CONT 0)

(insn 81 78 1722 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1722 81 48 NOTE_INSN_LOOP_VTOP 0)

(insn 48 1722 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 81 (nil))
    (nil))

(jump_insn 49 48 87 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 52)
            (pc))) 288 {*jcc_1} (insn_list 48 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 50 55 63

(note 87 49 88 NOTE_INSN_LOOP_END 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43 50 55
(code_label 88 87 1742 444 "" "" [1 uses])

(note 1742 88 91 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 91 1742 93 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 93 91 94 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 27 {pushsi2} (insn_list 91 (nil))
    (nil))

(call_insn 94 93 97 (call (mem:QI (symbol_ref:SI ("update_soln")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 97 94 99 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 99 97 1723 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1723 99 1724 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("nfaults")) 0))) 2 {*cmpsi_1_insn} (insn_list 97 (nil))
    (nil))

(jump_insn 1724 1723 1805 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 386)
            (pc))) 288 {*jcc_1} (insn_list 1723 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50 55

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 43 44 50 55
(note 1805 1724 1802 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(note 1802 1805 1804 NOTE_INSN_DELETED 0)

(note 1804 1802 100 NOTE_INSN_DELETED 0)
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50 55 71 74

(note 100 1804 106 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 43 44 50 55 71 74
(code_label 106 100 1743 451 "" "" [1 uses])

(note 1743 106 111 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 111 1743 113 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 113 111 117 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 117 113 119 NOTE_INSN_DELETED 0)

(insn 119 117 121 (set (reg:SI 3 ebx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 121 119 123 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 119 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(note 123 121 1813 NOTE_INSN_DELETED 0)

(insn 1813 123 126 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 126 1813 127 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC84")) 0))) 319 {*fop_df_1} (insn_list 121 (insn_list 113 (nil)))
    (nil))

(insn 127 126 130 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 314 {*fop_df_comm} (insn_list 126 (nil))
    (nil))

(insn 130 127 2178 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0))) 319 {*fop_df_1} (insn_list 127 (nil))
    (nil))

(insn 2178 130 2179 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2179 2178 133 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 133 2179 135 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("sin")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 135 133 138 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 133 (nil))
    (nil))

(insn 138 135 140 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 140 138 150 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 150 140 1816 NOTE_INSN_DELETED 0)

(insn 1816 150 153 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 153 1816 154 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC84")) 0))) 319 {*fop_df_1} (insn_list 140 (nil))
    (nil))

(insn 154 153 157 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 314 {*fop_df_comm} (insn_list 153 (nil))
    (nil))

(insn 157 154 2180 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0))) 319 {*fop_df_1} (insn_list 154 (nil))
    (nil))

(insn 2180 157 2181 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2181 2180 160 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 160 2181 162 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 162 160 165 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 160 (nil))
    (nil))

(insn 165 162 167 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 167 165 177 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 177 167 178 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 48 [0x30])) 0)) 63 {*movdf_integer} (insn_list 167 (nil))
    (nil))

(insn 178 177 181 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 314 {*fop_df_comm} (insn_list 177 (nil))
    (nil))

(insn 181 178 2182 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0))) 319 {*fop_df_1} (insn_list 178 (nil))
    (nil))

(insn 2182 181 2183 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2183 2182 184 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 184 2183 186 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 186 184 188 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 184 (nil))
    (nil))

(note 188 186 191 0x40258600 NOTE_INSN_BLOCK_BEG 0)

(insn 191 188 1819 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1819 191 192 (set (reg:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn/i 192 1819 198 (set (reg:DF 9 st(1))
        (abs:DF (reg:DF 9 st(1)))) -1 (insn_list 186 (nil))
    (nil))

(note 198 192 200 0x40258600 NOTE_INSN_BLOCK_END 0)

(insn 200 198 2185 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC86")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC86")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))

(insn 2185 200 2186 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2186 2185 2187 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2187 2186 2188 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2188 2187 2189 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 2189 2188 1744 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 207))) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50 55 58 59 61 71 74

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 43 44 50 55 58 59 71 74
(note 1744 2189 206 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 206 1744 1822 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC81")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC81")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1822 206 207 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50 55 58 59 61 71 74

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 43 44 50 55 58 59 61 71 74
(code_label 207 1822 1745 452 "" "" [1 uses])

(note 1745 207 210 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 210 1745 212 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 212 210 216 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 216 212 218 NOTE_INSN_DELETED 0)

(insn 218 216 220 (set (reg:SI 3 ebx)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 220 218 222 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 218 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))

(insn 222 220 223 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 48 [0x30])) 0)) 63 {*movdf_integer} (insn_list 212 (insn_list 220 (nil)))
    (nil))

(insn 223 222 225 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 314 {*fop_df_comm} (insn_list 222 (nil))
    (nil))

(note 225 223 226 NOTE_INSN_DELETED 0)

(insn 226 225 2175 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0))) 319 {*fop_df_1} (insn_list 223 (nil))
    (nil))

(insn 2175 226 2176 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2176 2175 229 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 229 2176 231 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("sin")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 231 229 234 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 229 (nil))
    (nil))

(insn 234 231 264 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 264 234 265 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (insn_list 234 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 265 264 267 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                        (reg:SI 0 eax))
                    (const_int 8 [0x8])) 0))) 314 {*fop_df_comm} (insn_list 264 (nil))
    (nil))

(note 267 265 268 NOTE_INSN_DELETED 0)

(insn 268 267 1825 (set (reg:DF 8 st(0))
        (div:DF (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                        (reg:SI 0 eax))
                    (const_int 8 [0x8])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 265 (nil))
    (nil))

(insn 1825 268 271 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 271 1825 273 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 273 271 1828 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1828 273 1728 (set (reg:SI 0 eax)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 1728 1828 1729 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 eax)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 271 (nil))
    (nil))

(jump_insn 1729 1728 1806 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 377)
            (pc))) 288 {*jcc_1} (insn_list 1728 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 50 55 58 59 60 61 62 71 74

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 43 44 45 50 55 58 59 60 61 62 71 74
(note 1806 1729 1798 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(note 1798 1806 1799 NOTE_INSN_DELETED 0)

(insn 1799 1798 1831 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (nil)
    (nil))

(insn 1831 1799 1800 (set (reg:SI 3 ebx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 1800 1831 274 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1799 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 96 [0x60]))
        (nil)))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 50 55 58 59 60 61 62 71 74 124

(note 274 1800 280 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 43 44 45 50 55 58 59 60 61 62 71 74 124
(code_label 280 274 1746 458 "" "" [1 uses])

(note 1746 280 285 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 285 1746 1834 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1834 285 289 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 289 1834 291 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 291 289 293 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 289 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 293 291 295 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 291 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 295 293 305 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 305 295 306 (set (reg:DF 10 st(2))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx))
                (const_int 12 [0xc])) 0)) 63 {*movdf_integer} (insn_list 285 (insn_list 293 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx))
                (const_int 12 [0xc])) 0)
        (nil)))

(insn 306 305 329 (set (reg/v:DF 10 st(2))
        (minus:DF (reg:DF 10 st(2))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                        (reg:SI 1 edx))
                    (const_int 24 [0x18])) 0))) 319 {*fop_df_1} (insn_list 295 (insn_list 305 (nil)))
    (nil))

(insn 329 306 330 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx))
                (const_int 20 [0x14])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 330 329 1837 (set (reg/v:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 3 ebx)
                        (reg:SI 1 edx))
                    (const_int 16 [0x10])) 0))) 319 {*fop_df_1} (insn_list 329 (nil))
    (nil))

(insn 1837 330 332 (set (reg/v:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 332 1837 1840 (set (reg/v:DF 11 st(3))
        (mult:DF (reg/v:DF 11 st(3))
            (reg/v:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 306 (nil))
    (nil))

(insn 1840 332 333 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 333 1840 334 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 330 (nil))
    (nil))

(insn 334 333 336 (set (reg/v:DF 11 st(3))
        (minus:DF (reg/v:DF 11 st(3))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 332 (insn_list 333 (nil)))
    (nil))

(insn 336 334 337 (set (reg/v:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 337 336 338 (set (reg:DF 8 st(0))
        (mult:DF (reg/v:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 338 337 2161 (set (reg/v:DF 10 st(2))
        (plus:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 336 (insn_list 337 (nil)))
    (nil))

(insn 2161 338 2162 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)) -1 (nil)
    (nil))

(insn 2162 2161 2163 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) -1 (nil)
    (nil))

(insn 2163 2162 2164 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) -1 (nil)
    (nil))

(insn 2164 2163 2165 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) -1 (nil)
    (nil))

(insn 2165 2164 2166 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -60 [0xffffffc4])) 0)) -1 (nil)
    (nil))

(insn 2166 2165 2167 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) -1 (nil)
    (nil))

(insn 2167 2166 2168 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -52 [0xffffffcc])) 0)) -1 (nil)
    (nil))

(insn 2168 2167 2169 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) -1 (nil)
    (nil))

(insn 2169 2168 2170 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -44 [0xffffffd4])) 0)) -1 (nil)
    (nil))

(insn 2170 2169 2171 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) -1 (nil)
    (nil))

(insn 2171 2170 2172 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2172 2171 2173 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 10 st(2))) -1 (nil)
    (nil))

(insn 2173 2172 2174 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2174 2173 355 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 11 st(3))) -1 (nil)
    (nil))

(insn 355 2174 357 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 357 355 358 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 4 esi)) 27 {pushsi2} (nil)
    (nil))

(call_insn 358 357 362 (call (mem:QI (symbol_ref:SI ("fault")) 0)
        (const_int 64 [0x40])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 362 358 363 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 363 362 366 NOTE_INSN_LOOP_CONT 0)

(insn 366 363 1841 (parallel[ 
            (set (mem:SI (plus:SI (reg:SI 6 ebp)
                        (const_int -20 [0xffffffec])) 0)
                (plus:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1841 366 1732 NOTE_INSN_DELETED 0)

(note 1732 1841 1844 NOTE_INSN_LOOP_VTOP 0)

(insn 1844 1732 276 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 276 1844 277 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 edx)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 366 (nil))
    (nil))

(jump_insn 277 276 372 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 280)
            (pc))) 288 {*jcc_1} (insn_list 276 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 50 55 58 59 60 61 62 71 74 124

(note 372 277 376 NOTE_INSN_LOOP_END 0)

(note 376 372 377 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 43 44 50 55 71 74
(code_label 377 376 1747 450 "" "" [1 uses])

(note 1747 377 379 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 379 1747 1727 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1727 379 102 NOTE_INSN_LOOP_VTOP 0)

(insn 102 1727 103 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("nfaults")) 0))) 2 {*cmpsi_1_insn} (insn_list 379 (nil))
    (nil))

(jump_insn 103 102 385 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 106)
            (pc))) 288 {*jcc_1} (insn_list 102 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50 55 71 74

(note 385 103 386 NOTE_INSN_LOOP_END 0)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 43 50 55
(code_label 386 385 1748 449 "" "" [1 uses])

(note 1748 386 389 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 389 1748 1847 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 1847 389 1733 (set (reg:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 1733 1847 1734 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 2 ecx)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 389 (nil))
    (nil))

(jump_insn 1734 1733 390 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1697)
            (pc))) 288 {*jcc_1} (insn_list 1733 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55

(note 390 1734 396 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 43 45 50 55
(code_label 396 390 1749 464 "" "" [1 uses])

(note 1749 396 401 [bb 13] NOTE_INSN_BASIC_BLOCK 0)

(insn 401 1749 1456 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 1456 401 1850 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1850 1456 1460 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1460 1850 1462 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1462 1460 1464 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1460 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1464 1462 1466 NOTE_INSN_DELETED 0)

(note 1466 1464 1853 NOTE_INSN_DELETED 0)

(insn 1853 1466 1467 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 4 [0x4]))
                (reg:SI 1 edx)) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1467 1853 1468 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1456 (insn_list 1462 (nil)))
    (nil))

(insn 1468 1467 1469 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 7 [0x7]))) 2 {*cmpsi_1_insn} (insn_list 1467 (nil))
    (nil))

(jump_insn 1469 1468 1750 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1447)
            (pc))) 288 {*jcc_1} (insn_list 1468 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55 408

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 43 45 49 50 55 408
(note 1750 1469 1471 [bb 14] NOTE_INSN_BASIC_BLOCK 0)

(note 1471 1750 1473 NOTE_INSN_DELETED 0)

(note 1473 1471 1474 NOTE_INSN_DELETED 0)

(jump_insn 1474 1473 1475 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 1476)) 0))
            (use (label_ref 1476))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 1476 (nil)))
;; End of basic block 14, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1475 1474 1476)

;; Insn is not within a basic block
(code_label 1476 1475 1477 509 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 1477 1476 1478 (addr_vec:SI[ 
            (label_ref:SI 407)
            (label_ref:SI 463)
            (label_ref:SI 519)
            (label_ref:SI 575)
            (label_ref:SI 631)
            (label_ref:SI 687)
            (label_ref:SI 743)
            (label_ref:SI 1051)
        ] ) -1 (nil)
    (nil))

(barrier 1478 1477 404)

(note 404 1478 407 ("simplexfd.c") 845 0)

;; Start of basic block 15, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 407 404 1751 466 "" "" [1 uses])

(note 1751 407 409 [bb 15] NOTE_INSN_BASIC_BLOCK 0)

(insn 409 1751 410 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 410 409 1752 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 445)
            (pc))) 288 {*jcc_1} (insn_list 409 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 15, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1752 410 417 [bb 16] NOTE_INSN_BASIC_BLOCK 0)

(insn 417 1752 420 (set (reg/v:SI 4 esi)
        (mem/s:SI (symbol_ref:SI ("rel_ref")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 420 417 424 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 424 420 1856 NOTE_INSN_DELETED 0)

(insn 1856 424 426 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 426 1856 428 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (nil)
    (nil))

(insn 428 426 434 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 426 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 434 428 436 NOTE_INSN_DELETED 0)

(insn 436 434 438 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 417 (nil))
    (nil))

(insn 438 436 440 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 436 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 440 438 441 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 2 ecx)) 0)) 63 {*movdf_integer} (insn_list 420 (insn_list 428 (nil)))
    (nil))

(insn 441 440 1859 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx)) 0))) 319 {*fop_df_1} (insn_list 438 (insn_list 440 (nil)))
    (nil))

(insn 1859 441 443 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 443 1859 444 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 16, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 444 443 445)

;; Start of basic block 17, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 445 444 1753 467 "" "" [1 uses])

(note 1753 445 448 [bb 17] NOTE_INSN_BASIC_BLOCK 0)

(insn 448 1753 452 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 452 448 1862 NOTE_INSN_DELETED 0)

(insn 1862 452 454 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 454 1862 456 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 456 454 458 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 454 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 458 456 1865 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (insn_list 448 (insn_list 456 (nil)))
    (nil))

(insn 1865 458 461 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 461 1865 462 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 17, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 462 461 463)

;; Start of basic block 18, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 463 462 1754 469 "" "" [1 uses])

(note 1754 463 465 [bb 18] NOTE_INSN_BASIC_BLOCK 0)

(insn 465 1754 466 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 466 465 1755 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 501)
            (pc))) 288 {*jcc_1} (insn_list 465 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 18, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 19, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1755 466 473 [bb 19] NOTE_INSN_BASIC_BLOCK 0)

(insn 473 1755 476 (set (reg/v:SI 4 esi)
        (mem/s:SI (const:SI (plus:SI (symbol_ref:SI ("rel_ref"))
                    (const_int 4 [0x4]))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 476 473 480 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 480 476 1868 NOTE_INSN_DELETED 0)

(insn 1868 480 482 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 482 1868 484 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (nil)
    (nil))

(insn 484 482 490 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 482 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 490 484 492 NOTE_INSN_DELETED 0)

(insn 492 490 494 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 473 (nil))
    (nil))

(insn 494 492 496 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 492 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 496 494 497 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 2 ecx))
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (insn_list 476 (insn_list 484 (nil)))
    (nil))

(insn 497 496 1871 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 2 ecx))
                    (const_int 8 [0x8])) 0))) 319 {*fop_df_1} (insn_list 494 (insn_list 496 (nil)))
    (nil))

(insn 1871 497 499 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 499 1871 500 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 19, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 500 499 501)

;; Start of basic block 20, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 501 500 1756 470 "" "" [1 uses])

(note 1756 501 504 [bb 20] NOTE_INSN_BASIC_BLOCK 0)

(insn 504 1756 508 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 508 504 1874 NOTE_INSN_DELETED 0)

(insn 1874 508 510 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 510 1874 512 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 512 510 514 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 510 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 514 512 1877 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (insn_list 504 (insn_list 512 (nil)))
    (nil))

(insn 1877 514 517 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 517 1877 518 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 20, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 518 517 519)

;; Start of basic block 21, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 519 518 1757 472 "" "" [1 uses])

(note 1757 519 521 [bb 21] NOTE_INSN_BASIC_BLOCK 0)

(insn 521 1757 522 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 522 521 1758 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 557)
            (pc))) 288 {*jcc_1} (insn_list 521 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 21, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 22, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1758 522 529 [bb 22] NOTE_INSN_BASIC_BLOCK 0)

(insn 529 1758 532 (set (reg/v:SI 4 esi)
        (mem/s:SI (const:SI (plus:SI (symbol_ref:SI ("rel_ref"))
                    (const_int 8 [0x8]))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 532 529 536 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 536 532 1880 NOTE_INSN_DELETED 0)

(insn 1880 536 538 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 538 1880 540 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (nil)
    (nil))

(insn 540 538 546 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 538 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 546 540 548 NOTE_INSN_DELETED 0)

(insn 548 546 550 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 529 (nil))
    (nil))

(insn 550 548 552 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 548 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 552 550 553 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 2 ecx))
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (insn_list 532 (insn_list 540 (nil)))
    (nil))

(insn 553 552 1883 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 2 ecx))
                    (const_int 16 [0x10])) 0))) 319 {*fop_df_1} (insn_list 550 (insn_list 552 (nil)))
    (nil))

(insn 1883 553 555 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 555 1883 556 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 22, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 556 555 557)

;; Start of basic block 23, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 557 556 1759 473 "" "" [1 uses])

(note 1759 557 560 [bb 23] NOTE_INSN_BASIC_BLOCK 0)

(insn 560 1759 564 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 564 560 1886 NOTE_INSN_DELETED 0)

(insn 1886 564 566 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 566 1886 568 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 568 566 570 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 566 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 570 568 1889 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (insn_list 560 (insn_list 568 (nil)))
    (nil))

(insn 1889 570 573 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 573 1889 574 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 23, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 574 573 575)

;; Start of basic block 24, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 575 574 1760 475 "" "" [1 uses])

(note 1760 575 577 [bb 24] NOTE_INSN_BASIC_BLOCK 0)

(insn 577 1760 578 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 578 577 1761 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 613)
            (pc))) 288 {*jcc_1} (insn_list 577 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 24, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 25, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1761 578 585 [bb 25] NOTE_INSN_BASIC_BLOCK 0)

(insn 585 1761 588 (set (reg/v:SI 4 esi)
        (mem/s:SI (const:SI (plus:SI (symbol_ref:SI ("rel_ref"))
                    (const_int 12 [0xc]))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 588 585 592 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 592 588 1892 NOTE_INSN_DELETED 0)

(insn 1892 592 594 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 594 1892 596 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (nil)
    (nil))

(insn 596 594 602 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 594 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 602 596 604 NOTE_INSN_DELETED 0)

(insn 604 602 606 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 585 (nil))
    (nil))

(insn 606 604 608 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 604 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 608 606 609 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 2 ecx))
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (insn_list 588 (insn_list 596 (nil)))
    (nil))

(insn 609 608 1895 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 2 ecx))
                    (const_int 24 [0x18])) 0))) 319 {*fop_df_1} (insn_list 606 (insn_list 608 (nil)))
    (nil))

(insn 1895 609 611 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 611 1895 612 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 25, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 612 611 613)

;; Start of basic block 26, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 613 612 1762 476 "" "" [1 uses])

(note 1762 613 616 [bb 26] NOTE_INSN_BASIC_BLOCK 0)

(insn 616 1762 620 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 620 616 1898 NOTE_INSN_DELETED 0)

(insn 1898 620 622 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 622 1898 624 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 624 622 626 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 622 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 626 624 1901 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (insn_list 616 (insn_list 624 (nil)))
    (nil))

(insn 1901 626 629 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 629 1901 630 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 26, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 630 629 631)

;; Start of basic block 27, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 631 630 1763 478 "" "" [1 uses])

(note 1763 631 633 [bb 27] NOTE_INSN_BASIC_BLOCK 0)

(insn 633 1763 634 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 634 633 1764 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 669)
            (pc))) 288 {*jcc_1} (insn_list 633 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 27, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 28, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1764 634 641 [bb 28] NOTE_INSN_BASIC_BLOCK 0)

(insn 641 1764 644 (set (reg/v:SI 4 esi)
        (mem/s:SI (const:SI (plus:SI (symbol_ref:SI ("rel_ref"))
                    (const_int 16 [0x10]))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 644 641 648 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 648 644 1904 NOTE_INSN_DELETED 0)

(insn 1904 648 650 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 650 1904 652 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (nil)
    (nil))

(insn 652 650 658 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 650 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 658 652 660 NOTE_INSN_DELETED 0)

(insn 660 658 662 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 641 (nil))
    (nil))

(insn 662 660 664 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 660 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 664 662 665 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 2 ecx))
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (insn_list 644 (insn_list 652 (nil)))
    (nil))

(insn 665 664 1907 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 2 ecx))
                    (const_int 32 [0x20])) 0))) 319 {*fop_df_1} (insn_list 662 (insn_list 664 (nil)))
    (nil))

(insn 1907 665 667 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 667 1907 668 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 28, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 668 667 669)

;; Start of basic block 29, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 669 668 1765 479 "" "" [1 uses])

(note 1765 669 672 [bb 29] NOTE_INSN_BASIC_BLOCK 0)

(insn 672 1765 676 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 676 672 1910 NOTE_INSN_DELETED 0)

(insn 1910 676 678 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 678 1910 680 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 680 678 682 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 678 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 682 680 1913 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (insn_list 672 (insn_list 680 (nil)))
    (nil))

(insn 1913 682 685 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 685 1913 686 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 29, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 686 685 687)

;; Start of basic block 30, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 687 686 1766 481 "" "" [1 uses])

(note 1766 687 689 [bb 30] NOTE_INSN_BASIC_BLOCK 0)

(insn 689 1766 690 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 690 689 1767 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 725)
            (pc))) 288 {*jcc_1} (insn_list 689 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 30, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 31, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1767 690 697 [bb 31] NOTE_INSN_BASIC_BLOCK 0)

(insn 697 1767 700 (set (reg/v:SI 4 esi)
        (mem/s:SI (const:SI (plus:SI (symbol_ref:SI ("rel_ref"))
                    (const_int 20 [0x14]))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 700 697 704 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 704 700 1916 NOTE_INSN_DELETED 0)

(insn 1916 704 706 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 706 1916 708 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (nil)
    (nil))

(insn 708 706 714 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 706 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 714 708 716 NOTE_INSN_DELETED 0)

(insn 716 714 718 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 697 (nil))
    (nil))

(insn 718 716 720 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 716 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 720 718 721 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 2 ecx))
                (const_int 40 [0x28])) 0)) 63 {*movdf_integer} (insn_list 700 (insn_list 708 (nil)))
    (nil))

(insn 721 720 1919 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 2 ecx))
                    (const_int 40 [0x28])) 0))) 319 {*fop_df_1} (insn_list 718 (insn_list 720 (nil)))
    (nil))

(insn 1919 721 723 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 723 1919 724 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 31, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 724 723 725)

;; Start of basic block 32, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 725 724 1768 482 "" "" [1 uses])

(note 1768 725 728 [bb 32] NOTE_INSN_BASIC_BLOCK 0)

(insn 728 1768 732 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 732 728 1922 NOTE_INSN_DELETED 0)

(insn 1922 732 734 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 734 1922 736 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 736 734 738 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 734 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 738 736 1925 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 40 [0x28])) 0)) 63 {*movdf_integer} (insn_list 728 (insn_list 736 (nil)))
    (nil))

(insn 1925 738 741 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 741 1925 742 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 32, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 742 741 743)

;; Start of basic block 33, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 743 742 1769 484 "" "" [1 uses])

(note 1769 743 745 [bb 33] NOTE_INSN_BASIC_BLOCK 0)

(insn 745 1769 746 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("rel_flag")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 746 745 1770 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 921)
            (pc))) 288 {*jcc_1} (insn_list 745 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 33, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

;; Start of basic block 34, registers live: 6 [bp] 7 [sp] 43 45 49 50
(note 1770 746 753 [bb 34] NOTE_INSN_BASIC_BLOCK 0)

(insn 753 1770 756 (set (reg/v:SI 4 esi)
        (mem/s:SI (const:SI (plus:SI (symbol_ref:SI ("rel_ref"))
                    (const_int 24 [0x18]))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 756 753 760 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 760 756 1928 NOTE_INSN_DELETED 0)

(insn 1928 760 762 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 762 1928 764 (set (reg:SI 5 edi)
        (plus:SI (mult:SI (reg:SI 1 edx)
                (const_int 2 [0x2]))
            (reg:SI 1 edx))) 113 {*lea_0} (nil)
    (nil))

(insn 764 762 770 (parallel[ 
            (set (reg:SI 5 edi)
                (ashift:SI (reg:SI 5 edi)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 762 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(note 770 764 772 NOTE_INSN_DELETED 0)

(insn 772 770 774 (set (reg:SI 4 esi)
        (plus:SI (mult:SI (reg/v:SI 4 esi)
                (const_int 2 [0x2]))
            (reg/v:SI 4 esi))) 113 {*lea_0} (insn_list 753 (nil))
    (nil))

(insn 774 772 776 (parallel[ 
            (set (reg:SI 4 esi)
                (ashift:SI (reg:SI 4 esi)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 772 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 48 [0x30]))
        (nil)))

(insn 776 774 777 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 5 edi)
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (insn_list 756 (insn_list 764 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 5 edi)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 777 776 1931 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 4 esi)
                    (reg:SI 0 eax)) 0))) 319 {*fop_df_1} (insn_list 774 (insn_list 776 (nil)))
    (nil))

(insn 1931 777 779 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 779 1931 781 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 781 779 1934 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1934 781 785 (set (reg:SI 3 ebx)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 785 1934 787 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 787 785 789 (parallel[ 
            (set (reg:SI 3 ebx)
                (plus:SI (reg:SI 3 ebx)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 785 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 789 787 2151 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 787 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 2151 789 2152 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)) -1 (nil)
    (nil))

(insn 2152 2151 792 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)) -1 (nil)
    (nil))

(call_insn 792 2152 794 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 794 792 795 NOTE_INSN_DELETED 1076403408)

(insn 795 794 1937 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 777 (insn_list 794 (nil)))
    (nil))

(insn 1937 795 797 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 797 1937 799 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 799 797 2153 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2153 799 2154 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 2154 2153 810 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(call_insn 810 2154 812 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 812 810 813 NOTE_INSN_DELETED 1076403088)

(insn 813 812 1940 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 795 (insn_list 812 (nil)))
    (nil))

(insn 1940 813 815 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 815 1940 835 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 835 815 836 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 5 edi)
                    (reg:SI 0 eax))
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (insn_list 815 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 5 edi)
                    (reg:SI 0 eax))
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 836 835 1943 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 4 esi)
                        (reg:SI 0 eax))
                    (const_int 8 [0x8])) 0))) 319 {*fop_df_1} (insn_list 835 (nil))
    (nil))

(insn 1943 836 838 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 838 1943 840 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 840 838 2155 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2155 840 2156 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)) -1 (nil)
    (nil))

(insn 2156 2155 851 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)) -1 (nil)
    (nil))

(call_insn 851 2156 853 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("sin")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 853 851 854 NOTE_INSN_DELETED 1076402688)

(insn 854 853 1946 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 836 (insn_list 853 (nil)))
    (nil))

(insn 1946 854 856 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 856 1946 858 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 858 856 2157 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2157 858 2158 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 2158 2157 869 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(call_insn 869 2158 871 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 871 869 872 NOTE_INSN_DELETED 1076402352)

(insn 872 871 873 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -96 [0xffffffa0])) 0))) 314 {*fop_df_comm} (insn_list 854 (insn_list 871 (nil)))
    (nil))

(insn 873 872 1949 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 813 (insn_list 872 (nil)))
    (nil))

(insn 1949 873 875 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 875 1949 895 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 895 875 896 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 5 edi)
                    (reg:SI 0 eax))
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (insn_list 875 (nil))
    (nil))

(insn 896 895 1952 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 4 esi)
                        (reg:SI 0 eax))
                    (const_int 16 [0x10])) 0))) 319 {*fop_df_1} (insn_list 895 (nil))
    (nil))

(insn 1952 896 898 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 898 1952 900 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 900 898 2159 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2159 900 2160 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 2160 2159 911 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(call_insn 911 2160 913 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("sin")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 913 911 914 NOTE_INSN_DELETED 1076401856)

(insn 914 913 915 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -104 [0xffffff98])) 0))) 314 {*fop_df_comm} (insn_list 896 (insn_list 913 (nil)))
    (nil))

(insn 915 914 1955 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 873 (insn_list 914 (nil)))
    (nil))

(insn 1955 915 918 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 918 1955 919 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 919 918 920 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 34, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 920 919 921)

;; Start of basic block 35, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 921 920 1771 485 "" "" [1 uses])

(note 1771 921 924 [bb 35] NOTE_INSN_BASIC_BLOCK 0)

(insn 924 1771 928 (set (reg:SI 4 esi)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (nil))

(note 928 924 1958 NOTE_INSN_DELETED 0)

(insn 1958 928 930 (set (reg:SI 2 ecx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 930 1958 932 (set (reg:SI 5 edi)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 932 930 934 (parallel[ 
            (set (reg:SI 5 edi)
                (ashift:SI (reg:SI 5 edi)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 930 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 934 932 936 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 936 934 1961 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1961 936 940 (set (reg:SI 3 ebx)
        (reg:SI 2 ecx)) 33 {*movsi_1} (nil)
    (nil))

(insn 940 1961 942 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 942 940 944 (parallel[ 
            (set (reg:SI 3 ebx)
                (plus:SI (reg:SI 3 ebx)
                    (reg:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 940 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 944 942 2141 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 942 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 2141 944 2142 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)) -1 (nil)
    (nil))

(insn 2142 2141 947 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)) -1 (nil)
    (nil))

(call_insn 947 2142 949 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 949 947 950 NOTE_INSN_DELETED 1076401232)

(insn 950 949 1964 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 5 edi)
                    (reg:SI 4 esi)) 0))) 314 {*fop_df_comm} (insn_list 924 (insn_list 932 (insn_list 949 (nil))))
    (nil))

(insn 1964 950 952 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 952 1964 954 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 954 952 2143 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2143 954 2144 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 2144 2143 965 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(call_insn 965 2144 967 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 967 965 968 NOTE_INSN_DELETED 1076400896)

(insn 968 967 1967 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 950 (insn_list 967 (nil)))
    (nil))

(insn 1967 968 970 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 970 1967 980 (set (reg:SI 4 esi)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 980 970 982 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 982 980 2145 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2145 982 2146 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)) -1 (nil)
    (nil))

(insn 2146 2145 993 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)) -1 (nil)
    (nil))

(call_insn 993 2146 995 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("sin")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 995 993 996 NOTE_INSN_DELETED 1076400560)

(insn 996 995 1970 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 5 edi)
                        (reg:SI 4 esi))
                    (const_int 8 [0x8])) 0))) 314 {*fop_df_comm} (insn_list 970 (insn_list 995 (nil)))
    (nil))

(insn 1970 996 998 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 998 1970 1000 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1000 998 2147 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2147 1000 2148 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 2148 2147 1011 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(call_insn 1011 2148 1013 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("cos")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1013 1011 1014 NOTE_INSN_DELETED 1076400224)

(insn 1014 1013 1015 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -112 [0xffffff90])) 0))) 314 {*fop_df_comm} (insn_list 996 (insn_list 1013 (nil)))
    (nil))

(insn 1015 1014 1973 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 968 (insn_list 1014 (nil)))
    (nil))

(insn 1973 1015 1017 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1017 1973 1027 (set (reg:SI 4 esi)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1027 1017 1029 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1029 1027 2149 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2149 1029 2150 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 2150 2149 1040 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(call_insn 1040 2150 1042 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("sin")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 1042 1040 1043 NOTE_INSN_DELETED 1076399824)

(insn 1043 1042 1044 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 5 edi)
                        (reg:SI 4 esi))
                    (const_int 16 [0x10])) 0))) 314 {*fop_df_comm} (insn_list 1017 (insn_list 1042 (nil)))
    (nil))

(insn 1044 1043 1976 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 1015 (insn_list 1043 (nil)))
    (nil))

(insn 1976 1044 1046 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1046 1976 1049 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 1049 1046 1050 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 35, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1050 1049 1051)

;; Start of basic block 36, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(code_label 1051 1050 1772 487 "" "" [1 uses])

(note 1772 1051 1420 [bb 36] NOTE_INSN_BASIC_BLOCK 0)

(insn 1420 1772 1979 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1979 1420 1424 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1424 1979 1426 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1426 1424 1428 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1424 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1428 1426 1430 NOTE_INSN_DELETED 0)

(note 1430 1428 1982 NOTE_INSN_DELETED 0)

(insn 1982 1430 1431 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1431 1982 1432 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1420 (insn_list 1426 (nil)))
    (nil))

(insn 1432 1431 1433 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 1431 (nil))
    (nil))

(jump_insn 1433 1432 1773 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1406)
            (pc))) 288 {*jcc_1} (insn_list 1432 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55 400

;; Start of basic block 37, registers live: 6 [bp] 7 [sp] 43 45 49 50 400
(note 1773 1433 1435 [bb 37] NOTE_INSN_BASIC_BLOCK 0)

(note 1435 1773 1437 NOTE_INSN_DELETED 0)

(note 1437 1435 1438 NOTE_INSN_DELETED 0)

(jump_insn 1438 1437 1439 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 1440)) 0))
            (use (label_ref 1440))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 1440 (nil)))
;; End of basic block 37, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50

(barrier 1439 1438 1440)

;; Insn is not within a basic block
(code_label 1440 1439 1441 507 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 1441 1440 1442 (addr_vec:SI[ 
            (label_ref:SI 1057)
            (label_ref:SI 1086)
            (label_ref:SI 1115)
            (label_ref:SI 1188)
            (label_ref:SI 1261)
            (label_ref:SI 1290)
            (label_ref:SI 1319)
            (label_ref:SI 1348)
            (label_ref:SI 1377)
        ] ) -1 (nil)
    (nil))

(barrier 1442 1441 1054)

(note 1054 1442 1057 ("simplexfd.c") 922 0)

;; Start of basic block 38, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1057 1054 1774 489 "" "" [1 uses])

(note 1774 1057 1060 [bb 38] NOTE_INSN_BASIC_BLOCK 0)

(insn 1060 1774 1985 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1985 1060 1064 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1064 1985 1066 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1066 1064 1068 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1064 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1068 1066 1070 NOTE_INSN_DELETED 0)

(insn 1070 1068 1072 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1066 (insn_list 1060 (nil)))
    (nil))

(insn 1072 1070 1076 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1076 1072 1078 NOTE_INSN_DELETED 0)

(insn 1078 1076 1080 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1070 (nil))
    (nil))

(insn 1080 1078 1082 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1078 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1082 1080 1988 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (insn_list 1072 (insn_list 1080 (nil)))
    (nil))

(insn 1988 1082 1084 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1084 1988 1085 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 38, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1085 1084 1086)

;; Start of basic block 39, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1086 1085 1775 490 "" "" [1 uses])

(note 1775 1086 1089 [bb 39] NOTE_INSN_BASIC_BLOCK 0)

(insn 1089 1775 1991 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1991 1089 1093 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1093 1991 1095 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1095 1093 1097 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1093 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1097 1095 1099 NOTE_INSN_DELETED 0)

(insn 1099 1097 1101 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1095 (insn_list 1089 (nil)))
    (nil))

(insn 1101 1099 1105 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1105 1101 1107 NOTE_INSN_DELETED 0)

(insn 1107 1105 1109 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1099 (nil))
    (nil))

(insn 1109 1107 1111 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1107 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1111 1109 1994 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (insn_list 1101 (insn_list 1109 (nil)))
    (nil))

(insn 1994 1111 1113 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1113 1994 1114 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 39, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1114 1113 1115)

;; Start of basic block 40, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1115 1114 1776 491 "" "" [1 uses])

(note 1776 1115 1118 [bb 40] NOTE_INSN_BASIC_BLOCK 0)

(insn 1118 1776 1997 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 1997 1118 1122 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1122 1997 1124 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1124 1122 1126 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1122 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 1126 1124 1128 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1124 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 1128 1126 1130 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1118 (insn_list 1126 (nil)))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (nil)))

(insn 1130 1128 1134 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1134 1130 1136 NOTE_INSN_DELETED 0)

(insn 1136 1134 1138 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1128 (nil))
    (nil))

(insn 1138 1136 1140 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1136 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1140 1138 2000 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx))
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (insn_list 1130 (insn_list 1138 (nil)))
    (nil))

(insn 2000 1140 2003 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2003 2000 1152 (set (reg:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1152 2003 1154 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 3 ebx))
                    (const_int 28 [0x1c])) 0))) 319 {*fop_df_1} (insn_list 1140 (nil))
    (nil))

(insn 1154 1152 2138 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0) 0 [0x0] 0 [0x0] 1074181120 [0x4006b400])
        (nil)))

(insn 2138 1154 2139 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2139 2138 2140 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 69 [0x45]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 2140 2139 1777 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1162))) -1 (nil)
    (nil))
;; End of basic block 40, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 41, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(note 1777 2140 1160 [bb 41] NOTE_INSN_BASIC_BLOCK 0)

(note 1160 1777 2006 NOTE_INSN_DELETED 0)

(insn 2006 1160 1161 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1161 2006 2009 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC87")) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 2009 1161 1162 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 41, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 42, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(code_label 1162 2009 1778 492 "" "" [1 uses])

(note 1778 1162 1165 [bb 42] NOTE_INSN_BASIC_BLOCK 0)

(insn 1165 1778 2012 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2012 1165 1169 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1169 2012 1171 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1171 1169 1173 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1169 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1173 1171 2015 NOTE_INSN_DELETED 0)

(insn 2015 1173 1174 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1174 2015 1176 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (reg:SI 1 edx))
                    (const_int 28 [0x1c])) 0))) 319 {*fop_df_1} (insn_list 1171 (insn_list 1165 (nil)))
    (nil))

(insn 1176 1174 2134 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC88")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC88")) 0) 0 [0x0] 0 [0x0] -1073302528 [0xc006b400])
        (nil)))

(insn 2134 1176 2135 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2135 2134 2136 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2136 2135 2137 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 2137 2136 1779 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1479))) -1 (nil)
    (nil))
;; End of basic block 42, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 43, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(note 1779 2137 1182 [bb 43] NOTE_INSN_BASIC_BLOCK 0)

(note 1182 1779 2018 NOTE_INSN_DELETED 0)

(insn 2018 1182 1183 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1183 2018 2021 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC87")) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2021 1183 1186 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1186 2021 1187 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 43, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1187 1186 1188)

;; Start of basic block 44, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1188 1187 1780 496 "" "" [1 uses])

(note 1780 1188 1191 [bb 44] NOTE_INSN_BASIC_BLOCK 0)

(insn 1191 1780 2024 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2024 1191 1195 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1195 2024 1197 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1197 1195 1199 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1195 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 1199 1197 1201 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1197 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 1201 1199 1203 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1191 (insn_list 1199 (nil)))
    (expr_list:REG_EQUIV (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (nil)))

(insn 1203 1201 1207 (set (reg:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1207 1203 1209 NOTE_INSN_DELETED 0)

(insn 1209 1207 1211 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1201 (nil))
    (nil))

(insn 1211 1209 1213 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1209 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1213 1211 2027 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 2 ecx))
                (const_int 48 [0x30])) 0)) 63 {*movdf_integer} (insn_list 1203 (insn_list 1211 (nil)))
    (nil))

(insn 2027 1213 2030 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2030 2027 1225 (set (reg:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1225 2030 1227 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 3 ebx))
                    (const_int 28 [0x1c])) 0))) 319 {*fop_df_1} (insn_list 1213 (nil))
    (nil))

(insn 1227 1225 2131 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC85")) 0) 0 [0x0] 0 [0x0] 1074181120 [0x4006b400])
        (nil)))

(insn 2131 1227 2132 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2132 2131 2133 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 69 [0x45]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 2133 2132 1781 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1235))) -1 (nil)
    (nil))
;; End of basic block 44, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 45, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(note 1781 2133 1233 [bb 45] NOTE_INSN_BASIC_BLOCK 0)

(note 1233 1781 2033 NOTE_INSN_DELETED 0)

(insn 2033 1233 1234 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1234 2033 2036 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC87")) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 2036 1234 1235 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 45, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 46, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(code_label 1235 2036 1782 497 "" "" [1 uses])

(note 1782 1235 1238 [bb 46] NOTE_INSN_BASIC_BLOCK 0)

(insn 1238 1782 2039 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2039 1238 1242 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1242 2039 1244 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1244 1242 1246 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1242 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1246 1244 2042 NOTE_INSN_DELETED 0)

(insn 2042 1246 1247 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1247 2042 1249 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (reg:SI 1 edx))
                    (const_int 28 [0x1c])) 0))) 319 {*fop_df_1} (insn_list 1244 (insn_list 1238 (nil)))
    (nil))

(insn 1249 1247 2127 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC88")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC88")) 0) 0 [0x0] 0 [0x0] -1073302528 [0xc006b400])
        (nil)))

(insn 2127 1249 2128 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2128 2127 2129 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2129 2128 2130 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(jump_insn 2130 2129 1783 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 1479))) -1 (nil)
    (nil))
;; End of basic block 46, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 47, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(note 1783 2130 1255 [bb 47] NOTE_INSN_BASIC_BLOCK 0)

(note 1255 1783 2045 NOTE_INSN_DELETED 0)

(insn 2045 1255 1256 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1256 2045 2048 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC87")) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2048 1256 1259 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1259 2048 1260 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 47, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1260 1259 1261)

;; Start of basic block 48, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1261 1260 1784 501 "" "" [1 uses])

(note 1784 1261 1264 [bb 48] NOTE_INSN_BASIC_BLOCK 0)

(insn 1264 1784 2051 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2051 1264 1268 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1268 2051 1270 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1270 1268 1272 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1268 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1272 1270 1274 NOTE_INSN_DELETED 0)

(insn 1274 1272 1276 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1270 (insn_list 1264 (nil)))
    (nil))

(insn 1276 1274 1280 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1280 1276 1282 NOTE_INSN_DELETED 0)

(insn 1282 1280 1284 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1274 (nil))
    (nil))

(insn 1284 1282 1286 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1282 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1286 1284 2054 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 40 [0x28])) 0)) 63 {*movdf_integer} (insn_list 1276 (insn_list 1284 (nil)))
    (nil))

(insn 2054 1286 1288 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1288 2054 1289 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 48, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1289 1288 1290)

;; Start of basic block 49, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1290 1289 1785 502 "" "" [1 uses])

(note 1785 1290 1293 [bb 49] NOTE_INSN_BASIC_BLOCK 0)

(insn 1293 1785 2057 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2057 1293 1297 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1297 2057 1299 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1299 1297 1301 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1297 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1301 1299 1303 NOTE_INSN_DELETED 0)

(insn 1303 1301 1305 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1299 (insn_list 1293 (nil)))
    (nil))

(insn 1305 1303 1309 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1309 1305 1311 NOTE_INSN_DELETED 0)

(insn 1311 1309 1313 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1303 (nil))
    (nil))

(insn 1313 1311 1315 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1311 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1315 1313 2060 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 64 [0x40])) 0)) 63 {*movdf_integer} (insn_list 1305 (insn_list 1313 (nil)))
    (nil))

(insn 2060 1315 1317 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1317 2060 1318 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 49, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1318 1317 1319)

;; Start of basic block 50, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1319 1318 1786 503 "" "" [1 uses])

(note 1786 1319 1322 [bb 50] NOTE_INSN_BASIC_BLOCK 0)

(insn 1322 1786 2063 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2063 1322 1326 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1326 2063 1328 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1328 1326 1330 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1326 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1330 1328 1332 NOTE_INSN_DELETED 0)

(insn 1332 1330 1334 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1328 (insn_list 1322 (nil)))
    (nil))

(insn 1334 1332 1338 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1338 1334 1340 NOTE_INSN_DELETED 0)

(insn 1340 1338 1342 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1332 (nil))
    (nil))

(insn 1342 1340 1344 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1340 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1344 1342 2066 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 56 [0x38])) 0)) 63 {*movdf_integer} (insn_list 1334 (insn_list 1342 (nil)))
    (nil))

(insn 2066 1344 1346 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1346 2066 1347 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 50, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1347 1346 1348)

;; Start of basic block 51, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1348 1347 1787 504 "" "" [1 uses])

(note 1787 1348 1351 [bb 51] NOTE_INSN_BASIC_BLOCK 0)

(insn 1351 1787 2069 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2069 1351 1355 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1355 2069 1357 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1357 1355 1359 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1355 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1359 1357 1361 NOTE_INSN_DELETED 0)

(insn 1361 1359 1363 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1357 (insn_list 1351 (nil)))
    (nil))

(insn 1363 1361 1367 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1367 1363 1369 NOTE_INSN_DELETED 0)

(insn 1369 1367 1371 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1361 (nil))
    (nil))

(insn 1371 1369 1373 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1369 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1373 1371 2072 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 72 [0x48])) 0)) 63 {*movdf_integer} (insn_list 1363 (insn_list 1371 (nil)))
    (nil))

(insn 2072 1373 1375 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1375 2072 1376 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 51, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1376 1375 1377)

;; Start of basic block 52, registers live: 6 [bp] 7 [sp] 43 45 49 50
(code_label 1377 1376 1788 505 "" "" [1 uses])

(note 1788 1377 1380 [bb 52] NOTE_INSN_BASIC_BLOCK 0)

(insn 1380 1788 2075 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2075 1380 1384 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1384 2075 1386 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1386 1384 1388 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1384 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(note 1388 1386 1390 NOTE_INSN_DELETED 0)

(insn 1390 1388 1392 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 4 [0x4]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (insn_list 1386 (insn_list 1380 (nil)))
    (nil))

(insn 1392 1390 1396 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 1396 1392 1398 NOTE_INSN_DELETED 0)

(insn 1398 1396 1400 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 2 [0x2]))
            (reg:SI 0 eax))) 113 {*lea_0} (insn_list 1390 (nil))
    (nil))

(insn 1400 1398 1402 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1398 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 96 [0x60]))
        (nil)))

(insn 1402 1400 2078 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 80 [0x50])) 0)) 63 {*movdf_integer} (insn_list 1392 (insn_list 1400 (nil)))
    (nil))

(insn 2078 1402 1404 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 1404 2078 1405 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 52, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1405 1404 1406)

;; Start of basic block 53, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(code_label 1406 1405 1789 506 "" "" [1 uses])

(note 1789 1406 1409 [bb 53] NOTE_INSN_BASIC_BLOCK 0)

(insn 1409 1789 1411 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1411 1409 1412 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC89"))) 27 {pushsi2} (insn_list 1409 (nil))
    (nil))

(call_insn 1412 1411 1415 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1415 1412 1416 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 1416 1415 1417 (set (pc)
        (label_ref 1479)) 296 {jump} (nil)
    (nil))
;; End of basic block 53, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

(barrier 1417 1416 1447)

;; Start of basic block 54, registers live: 6 [bp] 7 [sp] 43 45 50 55
(code_label 1447 1417 1790 508 "" "" [1 uses])

(note 1790 1447 1450 [bb 54] NOTE_INSN_BASIC_BLOCK 0)

(insn 1450 1790 1479 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 54, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 49 50 55

;; Start of basic block 55, registers live: 6 [bp] 7 [sp] 43 45 49 50 55
(code_label 1479 1450 1791 465 "" "" [26 uses])

(note 1791 1479 1481 [bb 55] NOTE_INSN_BASIC_BLOCK 0)

(insn 1481 1791 1482 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 1482 1481 1792 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1688)
            (pc))) 288 {*jcc_1} (insn_list 1481 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 55, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55

;; Start of basic block 56, registers live: 6 [bp] 7 [sp] 43 45 50 55
(note 1792 1482 1488 [bb 56] NOTE_INSN_BASIC_BLOCK 0)

(insn 1488 1792 2081 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2081 1488 1492 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1492 2081 1494 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1494 1492 1496 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1492 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 1496 1494 1498 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1494 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 1498 1496 1511 (set (reg/v:DF 11 st(3))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 28 [0x1c])) 0)) 63 {*movdf_integer} (insn_list 1488 (insn_list 1496 (nil)))
    (nil))

(insn 1511 1498 2084 (set (reg/v:DF 10 st(2))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 36 [0x24])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2084 1511 1523 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1523 2084 1525 (set (reg:DF 8 st(0))
        (minus:DF (reg/v:DF 11 st(3))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1498 (nil))
    (nil))

(insn 1525 1523 1529 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 44 [0x2c])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1523 (nil))
    (nil))

(insn 1529 1525 2087 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2087 1529 1530 (set (reg:DF 9 st(1))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1530 2087 1531 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1511 (nil))
    (nil))

(insn 1531 1530 1532 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 1529 (insn_list 1530 (nil)))
    (nil))

(insn 1532 1531 2090 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1531 (nil))
    (nil))

(insn 2090 1532 1534 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1534 2090 1535 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (plus:SI (reg:SI 6 ebp)
                    (const_int 12 [0xc])) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 1535 1534 1793 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1688)
            (pc))) 288 {*jcc_1} (insn_list 1534 (nil))
    (expr_list:REG_BR_PROB (const_int 3999 [0xf9f])
        (nil)))
;; End of basic block 56, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55 56 57 415

;; Start of basic block 57, registers live: 6 [bp] 7 [sp] 43 45 50 55 56 57 415
(note 1793 1535 1540 [bb 57] NOTE_INSN_BASIC_BLOCK 0)

(insn 1540 1793 1549 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1549 1540 1550 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/s:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)) 0)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 1540 (nil))
    (nil))

(jump_insn 1550 1549 1794 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1617)
            (pc))) 288 {*jcc_1} (insn_list 1549 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 57, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55 56 57 415 430

;; Start of basic block 58, registers live: 6 [bp] 7 [sp] 43 45 50 55 56 57 415 430
(note 1794 1550 1553 [bb 58] NOTE_INSN_BASIC_BLOCK 0)

(insn 1553 1794 2119 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2119 1553 2120 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2120 2119 2121 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 10 st(2))) -1 (nil)
    (nil))

(insn 2121 2120 2122 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 48 [0x30])) 0)) -1 (nil)
    (nil))

(insn 2122 2121 2123 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 44 [0x2c])) 0)) -1 (nil)
    (nil))

(insn 2123 2122 2124 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 2124 2123 2125 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2125 2124 2126 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2126 2125 1583 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 11 st(3))) -1 (nil)
    (nil))

(insn 1583 2126 1595 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 8 [0x8])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1595 1583 1607 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1607 1595 1609 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1609 1607 1611 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC90"))) 27 {pushsi2} (nil)
    (nil))

(insn 1611 1609 1612 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 1612 1611 1614 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 64 [0x40]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1614 1612 1615 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 1615 1614 1616 (set (pc)
        (label_ref 1688)) 296 {jump} (nil)
    (nil))
;; End of basic block 58, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55

(barrier 1616 1615 1617)

;; Start of basic block 59, registers live: 6 [bp] 7 [sp] 43 45 50 55 56 57
(code_label 1617 1616 1795 512 "" "" [1 uses])

(note 1795 1617 1620 [bb 59] NOTE_INSN_BASIC_BLOCK 0)

(insn 1620 1795 2107 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2107 1620 2108 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2108 2107 1624 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 10 st(2))) -1 (nil)
    (nil))

(insn 1624 2108 2093 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 2093 1624 1628 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 1628 2093 1630 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 16 [0x10]))
        (nil)))

(insn 1630 1628 1632 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 1628 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 17 [0x11]))
        (nil)))

(insn 1632 1630 2109 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 1630 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -20 [0xffffffec])) 0)
            (const_int 68 [0x44]))
        (nil)))

(insn 2109 1632 2110 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 48 [0x30])) 0)) -1 (nil)
    (nil))

(insn 2110 2109 2111 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 44 [0x2c])) 0)) -1 (nil)
    (nil))

(insn 2111 2110 2112 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 2112 2111 2113 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2113 2112 2114 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2114 2113 2115 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 11 st(3))) -1 (nil)
    (nil))

(insn 2115 2114 2116 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)) -1 (nil)
    (nil))

(insn 2116 2115 2117 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 20 [0x14])) 0)) -1 (nil)
    (nil))

(insn 2117 2116 2118 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)) -1 (nil)
    (nil))

(insn 2118 2117 1674 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 12 [0xc])) 0)) -1 (nil)
    (nil))

(insn 1674 2118 1676 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 27 {pushsi2} (nil)
    (nil))

(insn 1676 1674 1678 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC91"))) 27 {pushsi2} (nil)
    (nil))

(insn 1678 1676 1679 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 1679 1678 1681 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 64 [0x40]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 1681 1679 1687 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 59, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55

(note 1687 1681 1688 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 60, registers live: 6 [bp] 7 [sp] 43 45 50 55
(code_label 1688 1687 1796 463 "" "" [3 uses])

(note 1796 1688 1690 [bb 60] NOTE_INSN_BASIC_BLOCK 0)

(insn 1690 1796 2094 (parallel[ 
            (set (mem:SI (plus:SI (reg:SI 6 ebp)
                        (const_int -20 [0xffffffec])) 0)
                (plus:SI (mem:SI (plus:SI (reg:SI 6 ebp)
                            (const_int -20 [0xffffffec])) 0)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 2094 1690 1737 NOTE_INSN_DELETED 0)

(note 1737 2094 2097 NOTE_INSN_LOOP_VTOP 0)

(insn 2097 1737 392 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 392 2097 393 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 eax)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 1690 (nil))
    (nil))

(jump_insn 393 392 1696 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 396)
            (pc))) 288 {*jcc_1} (insn_list 392 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 60, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 45 50 55

(note 1696 393 1697 NOTE_INSN_LOOP_END 0)

;; Start of basic block 61, registers live: 6 [bp] 7 [sp] 50
(code_label 1697 1696 1797 462 "" "" [1 uses])

(note 1797 1697 1700 [bb 61] NOTE_INSN_BASIC_BLOCK 0)

(note 1700 1797 1702 NOTE_INSN_DELETED 0)

(insn 1702 1700 1703 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndata_actual")) 0)
        (nil)))

(insn 1703 1702 1704 (parallel[ 
            (set (reg:SI 0 eax)
                (minus:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 138 {*subsi_1} (insn_list 1702 (nil))
    (nil))

(note 1704 1703 2100 NOTE_INSN_DELETED 0)

(insn 2100 1704 2104 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2104 2100 2105 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2105 2104 2106 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (float:DF (mem:SI (reg:SI 7 esp) 0)))) -1 (nil)
    (nil))

(insn 2106 2105 2103 (parallel[ 
            (set (reg:SI 0 eax)
                (mem:SI (reg:SI 7 esp) 0))
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
        ] ) -1 (nil)
    (nil))

(insn 2103 2106 1708 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1708 2103 1712 (use (reg/i:DF 8 st(0))) -1 (insn_list 1705 (nil))
    (nil))

(note 1712 1708 1717 0x40280ca0 NOTE_INSN_BLOCK_END 0)

(insn 1717 1712 1807 (use (reg/i:DF 8 st(0))) -1 (insn_list 1708 (nil))
    (nil))
;; End of basic block 61, registers live:
 6 [bp] 7 [sp] 8 [st] 20 [frame]

(note 1807 1717 0 NOTE_INSN_DELETED 0)


;; Function update_soln

;; 4 regs to allocate: 44 106 43 42
;; 42 conflicts: 42 43 44 46 47 51 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 71 72 74 75 76 77 78 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 0 1 7 8 9
;; 43 conflicts: 42 43 44 46 47 51 54 55 56 57 58 59 60 61 62 63 65 66 67 68 69 71 72 74 75 76 77 78 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 0 1 7 8 9
;; 44 conflicts: 42 43 44 46 47 51 58 63 65 66 72 74 75 81 82 86 87 91 92 96 101 106 0 1 7 8 9
;; 46 conflicts: 42 43 44 46 47 0 1 7
;; 47 conflicts: 42 43 44 46 47 0 1 7
;; 51 conflicts: 42 43 44 51 54 55 56 57 0 1 7 8
;; 54 conflicts: 42 43 51 54 0 1 7
;; 55 conflicts: 42 43 51 55 56 57 0 1 7 8
;; 56 conflicts: 42 43 51 55 56 0 1 7 8
;; 57 conflicts: 42 43 51 55 57 0 1 7 8
;; 58 conflicts: 42 43 44 58 59 60 61 62 0 1 7 8
;; 59 conflicts: 42 43 58 59 0 1 7
;; 60 conflicts: 42 43 58 60 61 62 0 1 7 8
;; 61 conflicts: 42 43 58 60 61 0 1 7 8
;; 62 conflicts: 42 43 58 60 62 0 1 7 8
;; 63 conflicts: 42 43 44 63 7 8 9
;; 65 conflicts: 42 43 44 65 66 67 68 0 1 7 8 9
;; 66 conflicts: 42 43 44 65 66 67 68 69 71 0 1 7 8
;; 67 conflicts: 42 43 65 66 67 0 1 7 8
;; 68 conflicts: 42 43 65 66 68 69 71 0 1 7 8
;; 69 conflicts: 42 43 66 68 69 0 1 7 8
;; 71 conflicts: 42 43 66 68 71 0 1 7 8
;; 72 conflicts: 42 43 44 72 7 8 9
;; 74 conflicts: 42 43 44 74 75 76 77 0 1 7 8 9
;; 75 conflicts: 42 43 44 74 75 76 77 78 80 0 1 7 8
;; 76 conflicts: 42 43 74 75 76 0 1 7 8
;; 77 conflicts: 42 43 74 75 77 78 80 0 1 7 8
;; 78 conflicts: 42 43 75 77 78 0 1 7 8
;; 80 conflicts: 42 43 75 77 80 0 1 7 8
;; 81 conflicts: 42 43 44 81 82 83 84 0 1 7 8
;; 82 conflicts: 42 43 44 81 82 83 84 85 0 1 7 8
;; 83 conflicts: 42 43 81 82 83 0 1 7 8
;; 84 conflicts: 42 43 81 82 84 85 0 1 7 8
;; 85 conflicts: 42 43 82 84 85 0 1 7 8
;; 86 conflicts: 42 43 44 86 87 88 89 0 1 7 8
;; 87 conflicts: 42 43 44 86 87 88 89 90 0 1 7 8
;; 88 conflicts: 42 43 86 87 88 0 1 7 8
;; 89 conflicts: 42 43 86 87 89 90 0 1 7 8
;; 90 conflicts: 42 43 87 89 90 0 1 7 8
;; 91 conflicts: 42 43 44 91 92 93 94 0 1 7 8
;; 92 conflicts: 42 43 44 91 92 93 94 95 0 1 7 8
;; 93 conflicts: 42 43 91 92 93 0 1 7 8
;; 94 conflicts: 42 43 91 92 94 95 0 1 7 8
;; 95 conflicts: 42 43 92 94 95 0 1 7 8
;; 96 conflicts: 42 43 44 96 97 98 99 100 0 1 7 8
;; 97 conflicts: 42 43 96 97 0 1 7
;; 98 conflicts: 42 43 96 98 99 100 0 1 7 8
;; 99 conflicts: 42 43 96 98 99 0 1 7 8
;; 100 conflicts: 42 43 96 98 100 0 1 7 8
;; 101 conflicts: 42 43 44 101 102 103 104 105 0 1 7 8
;; 102 conflicts: 42 43 101 102 0 1 7
;; 103 conflicts: 42 43 101 103 104 105 0 1 7 8
;; 104 conflicts: 42 43 101 103 104 0 1 7 8
;; 105 conflicts: 42 43 101 103 105 0 1 7 8
;; 106 conflicts: 42 43 44 106 7

Spilling for insn 4.
Spilling for insn 304.
Spilling for insn 27.
Spilling for insn 273.
Spilling for insn 280.
Spilling for insn 44.
Spilling for insn 54.
Spilling for insn 55.
Spilling for insn 57.
Spilling for insn 64.
Spilling for insn 74.
Spilling for insn 75.
Spilling for insn 77.
Spilling for insn 84.
Spilling for insn 97.
Spilling for insn 108.
Spilling for insn 109.
Spilling for insn 111.
Spilling for insn 118.
Spilling for insn 131.
Spilling for insn 142.
Spilling for insn 143.
Spilling for insn 145.
Spilling for insn 154.
Spilling for insn 159.
Spilling for insn 168.
Spilling for insn 170.
Spilling for insn 181.
Spilling for insn 186.
Spilling for insn 195.
Spilling for insn 197.
Spilling for insn 208.
Spilling for insn 213.
Spilling for insn 222.
Spilling for insn 224.
Spilling for insn 233.
Spilling for insn 243.
Spilling for insn 244.
Spilling for insn 246.
Spilling for insn 253.
Spilling for insn 263.
Spilling for insn 264.
Spilling for insn 266.
Spilling for insn 15.
;; Register dispositions:
42 in 5  43 in 4  44 in 3  46 in 1  47 in 0  51 in 1  
54 in 0  55 in 0  56 in 8  57 in 8  58 in 1  59 in 0  
60 in 0  61 in 8  62 in 8  63 in 8  65 in 8  66 in 1  
67 in 0  68 in 0  69 in 8  71 in 8  72 in 8  74 in 8  
75 in 1  76 in 0  77 in 0  78 in 8  80 in 8  81 in 8  
82 in 1  83 in 0  84 in 0  85 in 8  86 in 8  87 in 1  
88 in 0  89 in 0  90 in 8  91 in 8  92 in 1  93 in 0  
94 in 0  95 in 8  96 in 1  97 in 0  98 in 0  99 in 8  
100 in 8  101 in 1  102 in 0  103 in 0  104 in 8  105 in 8  
106 in 0  

;; Hard regs used:  0 1 3 4 5 6 7 8 9 16 17 18 19 20

(note 2 0 309 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 309 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 309 5 (set (reg/v:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)
        (nil)))

(note 5 4 8 NOTE_INSN_FUNCTION_BEG 0)

(note 8 5 12 0x402b69a0 NOTE_INSN_BLOCK_BEG 0)

(insn 12 8 304 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 304 12 305 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 12 (nil))
    (nil))

(jump_insn 305 304 13 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 298)
            (pc))) 288 {*jcc_1} (insn_list 304 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 13 305 19 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43
(code_label 19 13 310 526 "" "" [1 uses])

(note 310 19 23 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 23 310 25 (set (reg:SI 1 edx)
        (mult:SI (reg/v:SI 4 esi)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 25 23 27 (set (reg:SI 0 eax)
        (symbol_ref:SI ("lookup"))) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (symbol_ref:SI ("lookup"))
        (nil)))

(insn 27 25 31 (set (reg/v:SI 3 ebx)
        (mem/s:SI (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 33 {*movsi_1} (insn_list 23 (insn_list 25 (nil)))
    (nil))

(note 31 27 35 NOTE_INSN_DELETED 0)

(note 35 31 326 NOTE_INSN_DELETED 0)

(insn 326 35 273 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 273 326 274 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 274 273 275 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 273 (nil))
    (nil))

(jump_insn 275 274 311 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 289)
            (pc))) 288 {*jcc_1} (insn_list 274 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 106

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44 106
(note 311 275 277 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(note 277 311 279 NOTE_INSN_DELETED 0)

(note 279 277 280 NOTE_INSN_DELETED 0)

(jump_insn 280 279 281 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 282)) 0))
            (use (label_ref 282))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 282 (nil)))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 281 280 282)

;; Insn is not within a basic block
(code_label 282 281 283 539 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 283 282 284 (addr_vec:SI[ 
            (label_ref:SI 41)
            (label_ref:SI 61)
            (label_ref:SI 81)
            (label_ref:SI 115)
            (label_ref:SI 149)
            (label_ref:SI 176)
            (label_ref:SI 203)
            (label_ref:SI 230)
            (label_ref:SI 250)
        ] ) -1 (nil)
    (nil))

(barrier 284 283 38)

(note 38 284 41 ("simplexfd.c") 1003 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 41 38 312 528 "" "" [1 uses])

(note 312 41 44 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 44 312 48 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 48 44 50 NOTE_INSN_DELETED 0)

(insn 50 48 52 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 52 50 54 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 50 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 54 52 55 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(insn 55 54 57 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 54 (nil))
    (nil))

(insn 57 55 59 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 44 (insn_list 52 (insn_list 55 (nil))))
    (nil))

(jump_insn 59 57 60 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 60 59 61)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 61 60 313 529 "" "" [1 uses])

(note 313 61 64 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 64 313 68 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 68 64 70 NOTE_INSN_DELETED 0)

(insn 70 68 72 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 72 70 74 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 70 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 74 72 75 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(insn 75 74 77 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 74 (nil))
    (nil))

(insn 77 75 79 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 64 (insn_list 72 (insn_list 75 (nil))))
    (nil))

(jump_insn 79 77 80 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 80 79 81)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 81 80 314 530 "" "" [1 uses])

(note 314 81 84 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 84 314 85 (set (reg/v:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(note 85 84 87 0x402b1a00 NOTE_INSN_BLOCK_BEG 0)

(note/i 87 85 88 0x402b1a20 NOTE_INSN_BLOCK_BEG 0)

(insn/i 88 87 92 (parallel[ 
            (set (reg/v:DF 8 st(0))
                (asm_operands/v ("fld1; fpatan") ("=t") 0[ 
                        (reg/v:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 467))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (reg:QI 9 st(1)))
        ] ) -1 (insn_list 84 (nil))
    (nil))

(note/i 92 88 95 0x402b1a20 NOTE_INSN_BLOCK_END 0)

(note 95 92 97 0x402b1a00 NOTE_INSN_BLOCK_END 0)

(insn 97 95 101 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 101 97 103 NOTE_INSN_DELETED 0)

(insn 103 101 105 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 105 103 107 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 103 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(note 107 105 108 NOTE_INSN_DELETED 0)

(insn 108 107 109 (set (reg:DF 8 st(0))
        (mult:DF (reg/v:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC93")) 0))) 314 {*fop_df_comm} (insn_list 88 (nil))
    (nil))

(insn 109 108 111 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 319 {*fop_df_1} (insn_list 108 (nil))
    (nil))

(insn 111 109 113 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 32 [0x20])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 97 (insn_list 105 (insn_list 109 (nil))))
    (nil))

(jump_insn 113 111 114 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 114 113 115)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 115 114 315 532 "" "" [1 uses])

(note 315 115 118 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 118 315 119 (set (reg/v:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(note 119 118 121 0x402b22a0 NOTE_INSN_BLOCK_BEG 0)

(note/i 121 119 122 0x402b22c0 NOTE_INSN_BLOCK_BEG 0)

(insn/i 122 121 126 (parallel[ 
            (set (reg/v:DF 8 st(0))
                (asm_operands/v ("fld1; fpatan") ("=t") 0[ 
                        (reg/v:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 467))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (reg:QI 9 st(1)))
        ] ) -1 (insn_list 118 (nil))
    (nil))

(note/i 126 122 129 0x402b22c0 NOTE_INSN_BLOCK_END 0)

(note 129 126 131 0x402b22a0 NOTE_INSN_BLOCK_END 0)

(insn 131 129 135 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 135 131 137 NOTE_INSN_DELETED 0)

(insn 137 135 139 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 139 137 141 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 137 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(note 141 139 142 NOTE_INSN_DELETED 0)

(insn 142 141 143 (set (reg:DF 8 st(0))
        (mult:DF (reg/v:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC93")) 0))) 314 {*fop_df_comm} (insn_list 122 (nil))
    (nil))

(insn 143 142 145 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 319 {*fop_df_1} (insn_list 142 (nil))
    (nil))

(insn 145 143 147 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 48 [0x30])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 131 (insn_list 139 (insn_list 143 (nil))))
    (nil))

(jump_insn 147 145 148 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 148 147 149)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 149 148 316 534 "" "" [1 uses])

(note 316 149 152 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 152 316 331 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 331 152 332 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg/v:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 332 331 155 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) -1 (nil)
    (nil))

(call_insn 155 332 157 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 157 155 159 NOTE_INSN_DELETED 1076598464)

(insn 159 157 163 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 163 159 165 NOTE_INSN_DELETED 0)

(insn 165 163 167 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 167 165 168 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 165 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 168 167 170 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 157 (nil))
    (nil))

(insn 170 168 173 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 40 [0x28])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 159 (insn_list 167 (insn_list 168 (nil))))
    (nil))

(insn 173 170 174 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 174 173 175 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 175 174 176)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 176 175 317 535 "" "" [1 uses])

(note 317 176 179 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 179 317 329 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 329 179 330 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg/v:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 330 329 182 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) -1 (nil)
    (nil))

(call_insn 182 330 184 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 184 182 186 NOTE_INSN_DELETED 1076597920)

(insn 186 184 190 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 190 186 192 NOTE_INSN_DELETED 0)

(insn 192 190 194 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 194 192 195 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 192 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 195 194 197 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 184 (nil))
    (nil))

(insn 197 195 200 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 64 [0x40])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 186 (insn_list 194 (insn_list 195 (nil))))
    (nil))

(insn 200 197 201 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 201 200 202 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 202 201 203)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 203 202 318 536 "" "" [1 uses])

(note 318 203 206 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 206 318 327 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 327 206 328 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg/v:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 328 327 209 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) -1 (nil)
    (nil))

(call_insn 209 328 211 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 211 209 213 NOTE_INSN_DELETED 1076597376)

(insn 213 211 217 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 217 213 219 NOTE_INSN_DELETED 0)

(insn 219 217 221 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 221 219 222 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 219 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 222 221 224 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 211 (nil))
    (nil))

(insn 224 222 227 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 56 [0x38])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 213 (insn_list 221 (insn_list 222 (nil))))
    (nil))

(insn 227 224 228 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 228 227 229 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 229 228 230)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 230 229 319 537 "" "" [1 uses])

(note 319 230 233 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 233 319 237 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 237 233 239 NOTE_INSN_DELETED 0)

(insn 239 237 241 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 241 239 243 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 239 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 243 241 244 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(insn 244 243 246 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_slip")) 0))) 314 {*fop_df_comm} (insn_list 243 (nil))
    (nil))

(insn 246 244 248 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 72 [0x48])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 233 (insn_list 241 (insn_list 244 (nil))))
    (nil))

(jump_insn 248 246 249 (set (pc)
        (label_ref 289)) 296 {jump} (nil)
    (nil))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(barrier 249 248 250)

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 250 249 320 538 "" "" [1 uses])

(note 320 250 253 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 253 320 257 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 257 253 259 NOTE_INSN_DELETED 0)

(insn 259 257 261 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 261 259 263 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 259 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 263 261 264 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(insn 264 263 266 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("typical_slip")) 0))) 314 {*fop_df_comm} (insn_list 263 (nil))
    (nil))

(insn 266 264 288 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 80 [0x50])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 253 (insn_list 261 (insn_list 264 (nil))))
    (nil))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 288 266 289 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 42 43
(code_label 289 288 321 525 "" "" [9 uses])

(note 321 289 291 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 291 321 308 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 308 291 15 NOTE_INSN_LOOP_VTOP 0)

(insn 15 308 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 291 (nil))
    (nil))

(jump_insn 16 15 297 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 288 {*jcc_1} (insn_list 15 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 297 16 298 NOTE_INSN_LOOP_END 0)

;; Start of basic block 13, registers live: 6 [bp] 7 [sp]
(code_label 298 297 322 524 "" "" [1 uses])

(note 322 298 300 [bb 13] NOTE_INSN_BASIC_BLOCK 0)
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 300 322 323 0x402b69a0 NOTE_INSN_BLOCK_END 0)

(note 323 300 0 NOTE_INSN_DELETED 0)


;; Function fault

;; 40 regs to allocate: 189 223 236 51 54 (2) 72 102 132 165 53 (2) 85 115 145 178 191 225 238 64 68 79 109 139 172 93 123 153 186 195 (2) 229 (2) 242 (2) 46 (2) 47 (2) 55 (2) 49 (2) 45 (2) 48 (2) 44 (2) 50 (2) 42 43
;; 42 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 0 1 7 8
;; 43 conflicts
;; 44 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 0 1 7 8
;; 45 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 0 1 7 8
;; 46 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 163 165 172 173 174 175 176 178 186 187 188 189 191 192 194 195 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 225 226 228 229 0 1 7 8 9
;; 47 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 163 165 172 173 174 175 176 178 186 187 188 189 191 192 194 195 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 225 226 228 229 0 1 7 8 9
;; 48 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 0 1 7 8
;; 49 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 0 1 7 8
;; 50 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 162 0 1 7 8
;; 51 conflicts: 42 43 44 45 46 47 48 49 50 51 55 64 68 70 72 79 80 81 82 83 85 93 94 95 100 102 109 110 111 112 113 115 123 124 125 130 132 139 140 141 142 143 145 153 154 155 163 165 172 173 174 175 176 178 186 187 188 189 191 192 194 195 223 225 226 228 229 236 238 239 241 242 0 1 7 8
;; 53 conflicts: 42 43 44 45 46 47 48 49 50 53 54 55 129 156 158 162 0 1 7
;; 54 conflicts: 42 43 44 45 46 47 48 49 50 53 54 55 99 162 0 7
;; 55 conflicts: 42 43 44 45 46 47 48 49 50 51 53 54 55 58 59 60 61 64 68 69 70 72 79 80 81 82 83 85 93 94 95 96 97 98 99 100 102 109 110 111 112 113 115 123 124 125 126 127 128 129 130 132 139 140 141 142 143 145 153 154 155 156 157 158 0 1 7 8
;; 58 conflicts: 42 43 44 45 46 47 48 49 50 55 58 59 60 0 1 7
;; 59 conflicts: 42 43 44 45 46 47 48 49 50 55 58 59 0 1 7
;; 60 conflicts: 42 43 44 45 46 47 48 49 50 55 58 60 0 1 7
;; 61 conflicts: 42 43 44 45 46 47 48 49 50 55 61 7 8
;; 64 conflicts: 42 43 44 45 46 47 48 49 50 51 55 64 7
;; 68 conflicts: 42 43 44 45 46 47 48 49 50 51 55 68 7
;; 69 conflicts: 42 43 44 45 46 47 48 49 50 55 69 0 7
;; 70 conflicts: 42 43 44 45 46 47 48 49 50 51 55 70 72 79 80 81 0 7 8
;; 72 conflicts: 42 43 44 45 46 47 48 49 50 51 55 70 72 79 80 81 0 7 8
;; 79 conflicts: 42 43 44 45 46 47 48 49 50 51 55 70 72 79 80 81 0 7 8
;; 80 conflicts: 42 43 44 45 46 47 48 49 50 51 55 70 72 79 80 0 7 8
;; 81 conflicts: 42 43 44 45 46 47 48 49 50 51 55 70 72 79 81 0 7 8
;; 82 conflicts: 42 43 44 45 46 47 48 49 50 51 55 82 83 85 93 95 0 1 7 8
;; 83 conflicts: 42 43 44 45 46 47 48 49 50 51 55 82 83 85 93 94 95 0 1 7 8
;; 85 conflicts: 42 43 44 45 46 47 48 49 50 51 55 82 83 85 93 94 95 0 1 7 8
;; 93 conflicts: 42 43 44 45 46 47 48 49 50 51 55 82 83 85 93 94 95 0 1 7 8
;; 94 conflicts: 42 43 44 45 46 47 48 49 50 51 55 83 85 93 94 1 7 8
;; 95 conflicts: 42 43 44 45 46 47 48 49 50 51 55 82 83 85 93 95 0 1 7 8
;; 96 conflicts: 42 43 44 45 46 47 48 49 50 55 96 97 98 0 1 7
;; 97 conflicts: 42 43 44 45 46 47 48 49 50 55 96 97 0 1 7
;; 98 conflicts: 42 43 44 45 46 47 48 49 50 55 96 98 0 1 7
;; 99 conflicts: 42 43 44 45 46 47 48 49 50 54 55 99 0 7
;; 100 conflicts: 42 43 44 45 46 47 48 49 50 51 55 100 102 109 110 111 0 7 8
;; 102 conflicts: 42 43 44 45 46 47 48 49 50 51 55 100 102 109 110 111 0 7 8
;; 109 conflicts: 42 43 44 45 46 47 48 49 50 51 55 100 102 109 110 111 0 7 8
;; 110 conflicts: 42 43 44 45 46 47 48 49 50 51 55 100 102 109 110 0 7 8
;; 111 conflicts: 42 43 44 45 46 47 48 49 50 51 55 100 102 109 111 0 7 8
;; 112 conflicts: 42 43 44 45 46 47 48 49 50 51 55 112 113 115 123 125 0 1 7 8
;; 113 conflicts: 42 43 44 45 46 47 48 49 50 51 55 112 113 115 123 124 125 0 1 7 8
;; 115 conflicts: 42 43 44 45 46 47 48 49 50 51 55 112 113 115 123 124 125 0 1 7 8
;; 123 conflicts: 42 43 44 45 46 47 48 49 50 51 55 112 113 115 123 124 125 0 1 7 8
;; 124 conflicts: 42 43 44 45 46 47 48 49 50 51 55 113 115 123 124 1 7 8
;; 125 conflicts: 42 43 44 45 46 47 48 49 50 51 55 112 113 115 123 125 0 1 7 8
;; 126 conflicts: 42 43 44 45 46 47 48 49 50 55 126 127 128 0 1 7
;; 127 conflicts: 42 43 44 45 46 47 48 49 50 55 126 127 0 1 7
;; 128 conflicts: 42 43 44 45 46 47 48 49 50 55 126 128 0 1 7
;; 129 conflicts: 42 43 44 45 46 47 48 49 50 53 55 129 0 7
;; 130 conflicts: 42 43 44 45 46 47 48 49 50 51 55 130 132 139 140 141 0 7 8
;; 132 conflicts: 42 43 44 45 46 47 48 49 50 51 55 130 132 139 140 141 0 7 8
;; 139 conflicts: 42 43 44 45 46 47 48 49 50 51 55 130 132 139 140 141 0 7 8
;; 140 conflicts: 42 43 44 45 46 47 48 49 50 51 55 130 132 139 140 0 7 8
;; 141 conflicts: 42 43 44 45 46 47 48 49 50 51 55 130 132 139 141 0 7 8
;; 142 conflicts: 42 43 44 45 46 47 48 49 50 51 55 142 143 145 153 155 0 1 7 8
;; 143 conflicts: 42 43 44 45 46 47 48 49 50 51 55 142 143 145 153 154 155 0 1 7 8
;; 145 conflicts: 42 43 44 45 46 47 48 49 50 51 55 142 143 145 153 154 155 0 1 7 8
;; 153 conflicts: 42 43 44 45 46 47 48 49 50 51 55 142 143 145 153 154 155 0 1 7 8
;; 154 conflicts: 42 43 44 45 46 47 48 49 50 51 55 143 145 153 154 1 7 8
;; 155 conflicts: 42 43 44 45 46 47 48 49 50 51 55 142 143 145 153 155 0 1 7 8
;; 156 conflicts: 42 43 44 45 46 47 48 49 50 53 55 156 157 158 0 1 7
;; 157 conflicts: 42 43 44 45 46 47 48 49 50 55 156 157 0 1 7
;; 158 conflicts: 42 43 44 45 46 47 48 49 50 53 55 156 158 0 1 7
;; 162 conflicts: 42 43 45 46 47 48 49 50 53 54 162 0 7
;; 163 conflicts: 43 46 47 51 163 165 172 173 174 0 7 8
;; 165 conflicts: 43 46 47 51 163 165 172 173 174 0 7 8
;; 172 conflicts: 43 46 47 51 163 165 172 173 174 0 7 8
;; 173 conflicts: 43 46 47 51 163 165 172 173 0 7 8
;; 174 conflicts: 43 46 47 51 163 165 172 174 0 7 8
;; 175 conflicts: 43 46 47 51 175 176 178 186 188 0 1 7 8
;; 176 conflicts: 43 46 47 51 175 176 178 186 187 188 0 1 7 8
;; 178 conflicts: 43 46 47 51 175 176 178 186 187 188 0 1 7 8
;; 186 conflicts: 43 46 47 51 175 176 178 186 187 188 0 1 7 8
;; 187 conflicts: 43 46 47 51 176 178 186 187 1 7 8
;; 188 conflicts: 43 46 47 51 175 176 178 186 188 0 1 7 8
;; 189 conflicts: 43 46 47 51 189 191 192 194 195 7 8
;; 191 conflicts: 43 46 47 51 189 191 192 194 195 7 8
;; 192 conflicts: 43 46 47 51 189 191 192 195 7 8
;; 194 conflicts: 43 46 47 51 189 191 194 195 7 8
;; 195 conflicts: 43 46 47 51 189 191 192 194 195 7 8
;; 199 conflicts: 43 46 47 199 200 7 8 9
;; 200 conflicts: 43 46 47 199 200 7 8 9
;; 201 conflicts: 43 46 47 201 7 8
;; 202 conflicts: 43 46 47 202 7 8
;; 203 conflicts: 43 46 47 203 7 8
;; 204 conflicts: 43 46 47 204 205 7 8 9
;; 205 conflicts: 43 46 47 204 205 7 8 9
;; 206 conflicts: 43 46 47 206 7 8
;; 207 conflicts: 43 46 47 207 208 7 8 9
;; 208 conflicts: 43 46 47 207 208 7 8 9
;; 209 conflicts: 43 46 47 209 7 8
;; 210 conflicts: 43 46 47 210 7 8
;; 211 conflicts: 43 46 47 211 7 8
;; 212 conflicts: 43 46 47 212 213 7 8 9
;; 213 conflicts: 43 46 47 212 213 7 8 9
;; 214 conflicts: 43 46 47 214 7 8
;; 215 conflicts: 43 46 47 215 216 7 8 9
;; 216 conflicts: 43 46 47 215 216 7 8 9
;; 217 conflicts: 43 46 47 217 7 8
;; 218 conflicts: 43 46 47 218 7 8
;; 219 conflicts: 43 46 47 219 7 8
;; 220 conflicts: 43 46 47 220 221 7 8 9
;; 221 conflicts: 43 46 47 220 221 7 8 9
;; 222 conflicts: 43 46 47 222 7 8
;; 223 conflicts: 43 46 47 51 223 225 226 228 229 7 8
;; 225 conflicts: 43 46 47 51 223 225 226 228 229 7 8
;; 226 conflicts: 43 46 47 51 223 225 226 229 7 8
;; 228 conflicts: 43 46 47 51 223 225 228 229 7 8
;; 229 conflicts: 43 46 47 51 223 225 226 228 229 7 8
;; 233 conflicts: 43 233 0 7
;; 235 conflicts: 43 235 0 7
;; 236 conflicts: 43 51 236 238 239 241 242 7 8
;; 238 conflicts: 43 51 236 238 239 241 242 7 8
;; 239 conflicts: 43 51 236 238 239 242 7 8
;; 241 conflicts: 43 51 236 238 241 242 7 8
;; 242 conflicts: 43 51 236 238 239 241 242 7 8
;; 247 conflicts: 43 247 7 8
;; 248 conflicts: 43 248 7 8
;; 249 conflicts: 43 249 7 8
;; 251 conflicts: 43 251 7 8
;; 252 conflicts: 43 252 7 8
;; 253 conflicts: 43 253 7 8
;; 255 conflicts: 43 255 7 8
;; 256 conflicts: 43 256 7 8
;; 257 conflicts: 43 257 7 8
;; 259 conflicts: 43 259 7 8
;; 260 conflicts: 43 260 7 8
;; 261 conflicts: 43 261 7 8
;; 263 conflicts: 43 263 7 8
;; 264 conflicts: 43 264 7 8
;; 265 conflicts: 43 265 7 8
;; 266 conflicts: 43 266 7 8
;; 267 conflicts: 43 267 7 8
;; 268 conflicts: 43 268 7 8
;; 269 conflicts: 43 269 7 8
;; 272 conflicts: 43 272 7 8
;; 273 conflicts: 43 273 7 8
;; 274 conflicts: 43 274 7 8
;; 275 conflicts: 43 275 276 277 282 283 0 1 7 8
;; 276 conflicts: 275 276 0 1 7
;; 277 conflicts: 275 277 282 283 284 291 292 293 300 301 302 309 310 311 318 319 320 327 328 0 1 7 8
;; 282 conflicts: 275 277 282 0 1 7 8
;; 283 conflicts: 275 277 283 0 1 7 8
;; 284 conflicts: 277 284 291 292 0 1 7 8
;; 291 conflicts: 277 284 291 0 1 7 8
;; 292 conflicts: 277 284 292 0 1 7 8
;; 293 conflicts: 277 293 300 301 0 1 7 8
;; 300 conflicts: 277 293 300 0 1 7 8
;; 301 conflicts: 277 293 301 0 1 7 8
;; 302 conflicts: 277 302 309 310 0 1 7 8
;; 309 conflicts: 277 302 309 0 1 7 8
;; 310 conflicts: 277 302 310 0 1 7 8
;; 311 conflicts: 277 311 318 319 0 1 7 8
;; 318 conflicts: 277 311 318 0 1 7 8
;; 319 conflicts: 277 311 319 0 1 7 8
;; 320 conflicts: 277 320 327 328 0 1 7 8
;; 327 conflicts: 277 320 327 0 1 7 8
;; 328 conflicts: 277 320 328 0 1 7 8

Spilling for insn 4.
Spilling for insn 6.
Using reg 0 for reload 0
Spilling for insn 8.
Using reg 8 for reload 0
Spilling for insn 10.
Using reg 8 for reload 0
Spilling for insn 12.
Using reg 8 for reload 0
Spilling for insn 14.
Using reg 8 for reload 0
Spilling for insn 16.
Using reg 8 for reload 0
Spilling for insn 18.
Using reg 8 for reload 0
Spilling for insn 20.
Using reg 8 for reload 0
Spilling for insn 27.
Using reg 8 for reload 0
Spilling for insn 38.
Spilling for insn 39.
Spilling for insn 56.
Spilling for insn 86.
Spilling for insn 107.
Spilling for insn 109.
Spilling for insn 111.
Spilling for insn 113.
Spilling for insn 115.
Spilling for insn 117.
Spilling for insn 119.
Spilling for insn 121.
Spilling for insn 154.
Spilling for insn 155.
Spilling for insn 157.
Spilling for insn 203.
Spilling for insn 204.
Spilling for insn 206.
Spilling for insn 230.
Spilling for insn 237.
Spilling for insn 239.
Spilling for insn 241.
Spilling for insn 243.
Spilling for insn 245.
Spilling for insn 247.
Spilling for insn 249.
Spilling for insn 251.
Spilling for insn 284.
Spilling for insn 285.
Spilling for insn 287.
Spilling for insn 333.
Spilling for insn 334.
Spilling for insn 336.
Spilling for insn 360.
Spilling for insn 369.
Spilling for insn 371.
Spilling for insn 373.
Spilling for insn 375.
Spilling for insn 377.
Spilling for insn 379.
Spilling for insn 381.
Spilling for insn 383.
Spilling for insn 416.
Spilling for insn 417.
Spilling for insn 419.
Spilling for insn 465.
Spilling for insn 466.
Spilling for insn 468.
Spilling for insn 492.
Spilling for insn 503.
Spilling for insn 510.
Spilling for insn 512.
Spilling for insn 514.
Spilling for insn 516.
Spilling for insn 518.
Spilling for insn 520.
Spilling for insn 522.
Spilling for insn 524.
Spilling for insn 557.
Spilling for insn 558.
Spilling for insn 560.
Spilling for insn 606.
Spilling for insn 607.
Spilling for insn 609.
Spilling for insn 1191.
Spilling for insn 639.
Spilling for insn 651.
Using reg 0 for reload 0
Spilling for insn 662.
Spilling for insn 677.
Spilling for insn 678.
Spilling for insn 681.
Spilling for insn 683.
Spilling for insn 685.
Spilling for insn 686.
Spilling for insn 689.
Spilling for insn 691.
Spilling for insn 692.
Spilling for insn 695.
Spilling for insn 697.
Spilling for insn 699.
Spilling for insn 700.
Spilling for insn 703.
Spilling for insn 705.
Spilling for insn 706.
Spilling for insn 709.
Spilling for insn 711.
Spilling for insn 713.
Spilling for insn 714.
Spilling for insn 717.
Spilling for insn 1185.
Spilling for insn 735.
Spilling for insn 747.
Using reg 0 for reload 0
Spilling for insn 758.
Spilling for insn 776.
Spilling for insn 778.
Spilling for insn 782.
Spilling for insn 788.
Spilling for insn 1179.
Spilling for insn 809.
Spilling for insn 821.
Using reg 0 for reload 0
Spilling for insn 832.
Spilling for insn 850.
Spilling for insn 851.
Spilling for insn 852.
Spilling for insn 854.
Spilling for insn 859.
Spilling for insn 860.
Spilling for insn 861.
Spilling for insn 863.
Spilling for insn 868.
Spilling for insn 869.
Spilling for insn 870.
Spilling for insn 872.
Spilling for insn 877.
Spilling for insn 878.
Spilling for insn 879.
Spilling for insn 881.
Spilling for insn 886.
Spilling for insn 887.
Spilling for insn 888.
Spilling for insn 889.
Spilling for insn 890.
Spilling for insn 891.
Spilling for insn 894.
Spilling for insn 896.
Spilling for insn 901.
Spilling for insn 902.
Spilling for insn 903.
Spilling for insn 905.
Spilling for insn 908.
Spilling for insn 914.
Using reg 2 for reload 0
Spilling for insn 930.
Spilling for insn 931.
Spilling for insn 933.
Spilling for insn 936.
Spilling for insn 958.
Spilling for insn 959.
Spilling for insn 961.
Spilling for insn 964.
Spilling for insn 986.
Spilling for insn 987.
Spilling for insn 989.
Spilling for insn 992.
Spilling for insn 1014.
Spilling for insn 1015.
Spilling for insn 1017.
Spilling for insn 1020.
Spilling for insn 1042.
Spilling for insn 1043.
Spilling for insn 1045.
Spilling for insn 1048.
Spilling for insn 1070.
Spilling for insn 1071.
Spilling for insn 1073.
 Register 189 now in 3.

 Register 223 now in 3.

 Register 236 now in 3.

Spilling for insn 4.
Spilling for insn 6.
Using reg 0 for reload 0
Spilling for insn 8.
Using reg 8 for reload 0
Spilling for insn 10.
Using reg 8 for reload 0
Spilling for insn 12.
Using reg 8 for reload 0
Spilling for insn 14.
Using reg 8 for reload 0
Spilling for insn 16.
Using reg 8 for reload 0
Spilling for insn 18.
Using reg 8 for reload 0
Spilling for insn 20.
Using reg 8 for reload 0
Spilling for insn 27.
Using reg 8 for reload 0
Spilling for insn 38.
Spilling for insn 39.
Spilling for insn 56.
Spilling for insn 86.
Spilling for insn 107.
Spilling for insn 109.
Spilling for insn 111.
Spilling for insn 113.
Spilling for insn 115.
Spilling for insn 117.
Spilling for insn 119.
Spilling for insn 121.
Spilling for insn 154.
Spilling for insn 155.
Spilling for insn 157.
Spilling for insn 203.
Spilling for insn 204.
Spilling for insn 206.
Spilling for insn 230.
Spilling for insn 237.
Spilling for insn 239.
Spilling for insn 241.
Spilling for insn 243.
Spilling for insn 245.
Spilling for insn 247.
Spilling for insn 249.
Spilling for insn 251.
Spilling for insn 284.
Spilling for insn 285.
Spilling for insn 287.
Spilling for insn 333.
Spilling for insn 334.
Spilling for insn 336.
Spilling for insn 360.
Spilling for insn 369.
Spilling for insn 371.
Spilling for insn 373.
Spilling for insn 375.
Spilling for insn 377.
Spilling for insn 379.
Spilling for insn 381.
Spilling for insn 383.
Spilling for insn 416.
Spilling for insn 417.
Spilling for insn 419.
Spilling for insn 465.
Spilling for insn 466.
Spilling for insn 468.
Spilling for insn 492.
Spilling for insn 503.
Spilling for insn 510.
Spilling for insn 512.
Spilling for insn 514.
Spilling for insn 516.
Spilling for insn 518.
Spilling for insn 520.
Spilling for insn 522.
Spilling for insn 524.
Spilling for insn 557.
Spilling for insn 558.
Spilling for insn 560.
Spilling for insn 606.
Spilling for insn 607.
Spilling for insn 609.
Spilling for insn 1191.
Spilling for insn 639.
Spilling for insn 651.
Using reg 0 for reload 0
Spilling for insn 662.
Spilling for insn 677.
Spilling for insn 678.
Spilling for insn 681.
Spilling for insn 683.
Spilling for insn 685.
Spilling for insn 686.
Spilling for insn 689.
Spilling for insn 691.
Spilling for insn 692.
Spilling for insn 695.
Spilling for insn 697.
Spilling for insn 699.
Spilling for insn 700.
Spilling for insn 703.
Spilling for insn 705.
Spilling for insn 706.
Spilling for insn 709.
Spilling for insn 711.
Spilling for insn 713.
Spilling for insn 714.
Spilling for insn 717.
Spilling for insn 1185.
Spilling for insn 735.
Spilling for insn 747.
Using reg 0 for reload 0
Spilling for insn 758.
Spilling for insn 776.
Spilling for insn 778.
Spilling for insn 782.
Spilling for insn 788.
Spilling for insn 1179.
Spilling for insn 809.
Spilling for insn 821.
Using reg 0 for reload 0
Spilling for insn 832.
Spilling for insn 850.
Spilling for insn 851.
Spilling for insn 852.
Spilling for insn 854.
Spilling for insn 859.
Spilling for insn 860.
Spilling for insn 861.
Spilling for insn 863.
Spilling for insn 868.
Spilling for insn 869.
Spilling for insn 870.
Spilling for insn 872.
Spilling for insn 877.
Spilling for insn 878.
Spilling for insn 879.
Spilling for insn 881.
Spilling for insn 886.
Spilling for insn 887.
Spilling for insn 888.
Spilling for insn 889.
Spilling for insn 890.
Spilling for insn 891.
Spilling for insn 894.
Spilling for insn 896.
Spilling for insn 901.
Spilling for insn 902.
Spilling for insn 903.
Spilling for insn 905.
Spilling for insn 908.
Spilling for insn 914.
Using reg 2 for reload 0
Spilling for insn 930.
Spilling for insn 931.
Spilling for insn 933.
Spilling for insn 936.
Spilling for insn 958.
Spilling for insn 959.
Spilling for insn 961.
Spilling for insn 964.
Spilling for insn 986.
Spilling for insn 987.
Spilling for insn 989.
Spilling for insn 992.
Spilling for insn 1014.
Spilling for insn 1015.
Spilling for insn 1017.
Spilling for insn 1020.
Spilling for insn 1042.
Spilling for insn 1043.
Spilling for insn 1045.
Spilling for insn 1048.
Spilling for insn 1070.
Spilling for insn 1071.
Spilling for insn 1073.
;; Register dispositions:
42 in 5  51 in 2  53 in 9  54 in 8  58 in 0  59 in 1  
60 in 1  61 in 8  64 in 0  68 in 0  69 in 0  70 in 0  
72 in 1  79 in 3  80 in 8  81 in 8  82 in 0  83 in 1  
85 in 3  93 in 4  94 in 8  95 in 8  96 in 0  97 in 1  
98 in 1  99 in 0  100 in 0  102 in 1  109 in 3  110 in 8  
111 in 8  112 in 0  113 in 1  115 in 3  123 in 4  124 in 8  
125 in 8  126 in 0  127 in 1  128 in 1  129 in 0  130 in 0  
132 in 1  139 in 3  140 in 8  141 in 8  142 in 0  143 in 1  
145 in 3  153 in 4  154 in 8  155 in 8  156 in 0  157 in 1  
158 in 1  162 in 0  163 in 0  165 in 1  172 in 3  173 in 8  
174 in 8  175 in 0  176 in 1  178 in 3  186 in 4  187 in 8  
188 in 8  189 in 3  191 in 1  192 in 8  194 in 8  195 in 9  
199 in 8  200 in 9  201 in 8  202 in 8  203 in 8  204 in 8  
205 in 9  206 in 8  207 in 8  208 in 9  209 in 8  210 in 8  
211 in 8  212 in 8  213 in 9  214 in 8  215 in 8  216 in 9  
217 in 8  218 in 8  219 in 8  220 in 8  221 in 9  222 in 8  
223 in 3  225 in 1  226 in 8  228 in 8  229 in 9  233 in 0  
235 in 0  236 in 3  238 in 1  239 in 8  241 in 8  242 in 9  
247 in 8  248 in 8  249 in 8  251 in 8  252 in 8  253 in 8  
255 in 8  256 in 8  257 in 8  259 in 8  260 in 8  261 in 8  
263 in 8  264 in 8  265 in 8  266 in 8  267 in 8  268 in 8  
269 in 8  272 in 8  273 in 8  274 in 8  275 in 1  276 in 0  
277 in 0  282 in 8  283 in 8  284 in 1  291 in 8  292 in 8  
293 in 1  300 in 8  301 in 8  302 in 1  309 in 8  310 in 8  
311 in 1  318 in 8  319 in 8  320 in 1  327 in 8  328 in 8  


;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 16 17 18 20

(note 2 0 1144 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 1144 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 1144 6 (set (reg/v:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)
        (nil)))

(note 6 4 8 NOTE_INSN_DELETED 0)

(insn 8 6 1216 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1216 8 10 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -656 [0xfffffd70])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 10 1216 1219 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1219 10 12 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -664 [0xfffffd68])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 12 1219 1222 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1222 12 14 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -672 [0xfffffd60])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 14 1222 1225 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 40 [0x28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1225 14 16 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 16 1225 1228 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 48 [0x30])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1228 16 18 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -688 [0xfffffd50])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 18 1228 1231 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 56 [0x38])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1231 18 20 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -696 [0xfffffd48])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 20 1231 1234 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 64 [0x40])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1234 20 21 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -704 [0xfffffd40])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 21 1234 24 NOTE_INSN_FUNCTION_BEG 0)

(note 24 21 1237 0x402e10e0 NOTE_INSN_BLOCK_BEG 0)

(insn 1237 24 27 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -664 [0xfffffd68])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 27 1237 1240 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -696 [0xfffffd48])) 0))) 314 {*fop_df_comm} (insn_list 10 (insn_list 18 (nil)))
    (nil))

(insn 1240 27 29 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -712 [0xfffffd38])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 29 1240 33 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 33 29 35 NOTE_INSN_DELETED 0)

(insn 35 33 37 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg/v:SI 5 edi)
                (const_int 2 [0x2]))
            (reg/v:SI 5 edi))) 113 {*lea_0} (insn_list 4 (nil))
    (nil))

(insn 37 35 1243 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 35 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 5 edi)
            (const_int 96 [0x60]))
        (nil)))

(insn 1243 37 38 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -688 [0xfffffd50])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 38 1243 39 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 0 eax))
                    (const_int 40 [0x28])) 0))) 314 {*fop_df_comm} (insn_list 16 (insn_list 29 (insn_list 37 (nil))))
    (nil))

(insn 39 38 1246 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -712 [0xfffffd38])) 0))) 314 {*fop_df_comm} (insn_list 27 (insn_list 38 (nil)))
    (nil))

(insn 1246 39 42 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -712 [0xfffffd38])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 42 1246 1080 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(note 1080 42 1212 NOTE_INSN_DELETED 0)

(insn 1212 1080 43 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 64

(note 43 1212 49 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 64
(code_label 49 43 1145 546 "" "" [1 uses])

(note 1145 49 50 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(note 50 1145 1411 NOTE_INSN_DELETED 0)

(insn 1411 50 1412 (set (mem/s:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 1412 1411 57 (set (mem/s:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(note 57 1412 60 NOTE_INSN_LOOP_CONT 0)

(insn 60 57 1083 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1083 60 45 NOTE_INSN_LOOP_VTOP 0)

(insn 45 1083 46 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 60 (nil))
    (nil))

(jump_insn 46 45 66 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 49)
            (pc))) 288 {*jcc_1} (insn_list 45 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 64

(note 66 46 1146 NOTE_INSN_LOOP_END 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1146 66 70 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 70 1146 1085 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1085 70 1211 NOTE_INSN_DELETED 0)

(insn 1211 1085 71 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 68

(note 71 1211 77 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 68
(code_label 77 71 1147 551 "" "" [1 uses])

(note 1147 77 78 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(note 78 1147 80 NOTE_INSN_DELETED 0)

(note 80 78 1408 NOTE_INSN_DELETED 0)

(insn 1408 80 1409 (set (mem/s:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 1409 1408 87 (set (mem/s:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax))
                (const_int 68 [0x44])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(note 87 1409 90 NOTE_INSN_LOOP_CONT 0)

(insn 90 87 1088 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1088 90 73 NOTE_INSN_LOOP_VTOP 0)

(insn 73 1088 74 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 17 [0x11]))) 2 {*cmpsi_1_insn} (insn_list 90 (nil))
    (nil))

(jump_insn 74 73 96 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 77)
            (pc))) 288 {*jcc_1} (insn_list 73 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 68

(note 96 74 1148 NOTE_INSN_LOOP_END 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1148 96 100 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(note 100 1148 103 NOTE_INSN_DELETED 0)

(insn 103 100 105 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 105 103 107 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 107 105 1394 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 103 (insn_list 105 (nil)))
    (nil))

(insn 1394 107 1395 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -708 [0xfffffd3c])) 0)) -1 (nil)
    (nil))

(insn 1395 1394 1396 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -712 [0xfffffd38])) 0)) -1 (nil)
    (nil))

(insn 1396 1395 1397 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -660 [0xfffffd6c])) 0)) -1 (nil)
    (nil))

(insn 1397 1396 1398 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -664 [0xfffffd68])) 0)) -1 (nil)
    (nil))

(insn 1398 1397 1399 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -652 [0xfffffd74])) 0)) -1 (nil)
    (nil))

(insn 1399 1398 1400 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -656 [0xfffffd70])) 0)) -1 (nil)
    (nil))

(insn 1400 1399 1401 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -700 [0xfffffd44])) 0)) -1 (nil)
    (nil))

(insn 1401 1400 1402 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -704 [0xfffffd40])) 0)) -1 (nil)
    (nil))

(insn 1402 1401 1403 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -692 [0xfffffd4c])) 0)) -1 (nil)
    (nil))

(insn 1403 1402 1404 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -696 [0xfffffd48])) 0)) -1 (nil)
    (nil))

(insn 1404 1403 1405 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -684 [0xfffffd54])) 0)) -1 (nil)
    (nil))

(insn 1405 1404 121 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -688 [0xfffffd50])) 0)) -1 (nil)
    (nil))

(insn 121 1405 122 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 5 edi)) 27 {pushsi2} (nil)
    (nil))

(call_insn 122 121 125 (call (mem:QI (symbol_ref:SI ("chin")) 0)
        (const_int 64 [0x40])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 125 122 127 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 127 125 1090 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1090 127 1209 NOTE_INSN_DELETED 0)

(insn 1209 1090 1210 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 1210 1209 128 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 72 79

(note 128 1210 134 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 72 79
(code_label 134 128 1149 556 "" "" [1 uses])

(note 1149 134 136 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 136 1149 148 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(note 148 136 154 NOTE_INSN_DELETED 0)

(insn 154 148 155 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (insn_list 136 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 155 154 157 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 3 ebx))
                    (const_int 208 [0xd0])) 0))) 314 {*fop_df_comm} (insn_list 154 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 157 155 159 (set (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 155 (nil))
    (nil))

(note 159 157 162 NOTE_INSN_LOOP_CONT 0)

(insn 162 159 1093 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1093 162 130 NOTE_INSN_LOOP_VTOP 0)

(insn 130 1093 131 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 162 (nil))
    (nil))

(jump_insn 131 130 168 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 134)
            (pc))) 288 {*jcc_1} (insn_list 130 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 72 79

(note 168 131 1150 NOTE_INSN_LOOP_END 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1150 168 172 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 172 1150 1095 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1095 172 1207 NOTE_INSN_DELETED 0)

(insn 1207 1095 1208 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))

(insn 1208 1207 173 (set (reg:SI 4 esi)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 85 93

(note 173 1208 179 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 85 93
(code_label 179 173 1151 561 "" "" [1 uses])

(note 1151 179 181 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 181 1151 183 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 183 181 197 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 64 [0x40]))) -1 (insn_list 181 (nil))
    (nil))

(note 197 183 203 NOTE_INSN_DELETED 0)

(insn 203 197 204 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (insn_list 183 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 204 203 206 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 4 esi))
                    (const_int 288 [0x120])) 0))) 314 {*fop_df_comm} (insn_list 203 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 206 204 208 (set (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 204 (nil))
    (nil))

(note 208 206 211 NOTE_INSN_LOOP_CONT 0)

(insn 211 208 1098 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1098 211 175 NOTE_INSN_LOOP_VTOP 0)

(insn 175 1098 176 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 17 [0x11]))) 2 {*cmpsi_1_insn} (insn_list 211 (nil))
    (nil))

(jump_insn 176 175 217 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 179)
            (pc))) 288 {*jcc_1} (insn_list 175 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 85 93

(note 217 176 1152 NOTE_INSN_LOOP_END 0)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1152 217 221 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 221 1152 225 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 225 221 227 NOTE_INSN_DELETED 0)

(insn 227 225 229 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg/v:SI 5 edi)
                (const_int 2 [0x2]))
            (reg/v:SI 5 edi))) 113 {*lea_0} (nil)
    (nil))

(insn 229 227 1249 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 227 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 5 edi)
            (const_int 96 [0x60]))
        (nil)))

(insn 1249 229 230 (set (reg/v:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -712 [0xfffffd38])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 230 1249 233 (set (reg/v:DF 8 st(0))
        (minus:DF (reg/v:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 0 eax))
                    (const_int 64 [0x40])) 0))) 319 {*fop_df_1} (insn_list 221 (insn_list 229 (nil)))
    (nil))

(insn 233 230 235 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 235 233 237 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 237 235 1374 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 233 (insn_list 235 (nil)))
    (nil))

(insn 1374 237 1375 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1375 1374 1376 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 8 st(0))) -1 (nil)
    (nil))

(insn 1376 1375 1377 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -660 [0xfffffd6c])) 0)) -1 (nil)
    (nil))

(insn 1377 1376 1378 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -664 [0xfffffd68])) 0)) -1 (nil)
    (nil))

(insn 1378 1377 1379 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -652 [0xfffffd74])) 0)) -1 (nil)
    (nil))

(insn 1379 1378 1380 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -656 [0xfffffd70])) 0)) -1 (nil)
    (nil))

(insn 1380 1379 1381 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -700 [0xfffffd44])) 0)) -1 (nil)
    (nil))

(insn 1381 1380 1382 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -704 [0xfffffd40])) 0)) -1 (nil)
    (nil))

(insn 1382 1381 1383 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -692 [0xfffffd4c])) 0)) -1 (nil)
    (nil))

(insn 1383 1382 1384 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -696 [0xfffffd48])) 0)) -1 (nil)
    (nil))

(insn 1384 1383 1385 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -684 [0xfffffd54])) 0)) -1 (nil)
    (nil))

(insn 1385 1384 251 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -688 [0xfffffd50])) 0)) -1 (nil)
    (nil))

(insn 251 1385 252 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 5 edi)) 27 {pushsi2} (nil)
    (nil))

(call_insn 252 251 255 (call (mem:QI (symbol_ref:SI ("chin")) 0)
        (const_int 64 [0x40])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 255 252 257 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 257 255 1100 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1100 257 1205 NOTE_INSN_DELETED 0)

(insn 1205 1100 1206 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 1206 1205 258 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 102 109

(note 258 1206 264 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 102 109
(code_label 264 258 1153 566 "" "" [1 uses])

(note 1153 264 266 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 266 1153 278 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(note 278 266 284 NOTE_INSN_DELETED 0)

(insn 284 278 285 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (insn_list 266 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 285 284 287 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 3 ebx))
                    (const_int 208 [0xd0])) 0))) 319 {*fop_df_1} (insn_list 284 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 287 285 289 (set (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 285 (nil))
    (nil))

(note 289 287 292 NOTE_INSN_LOOP_CONT 0)

(insn 292 289 1103 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1103 292 260 NOTE_INSN_LOOP_VTOP 0)

(insn 260 1103 261 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 292 (nil))
    (nil))

(jump_insn 261 260 298 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 264)
            (pc))) 288 {*jcc_1} (insn_list 260 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 102 109

(note 298 261 1154 NOTE_INSN_LOOP_END 0)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1154 298 302 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 302 1154 1105 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1105 302 1203 NOTE_INSN_DELETED 0)

(insn 1203 1105 1204 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))

(insn 1204 1203 303 (set (reg:SI 4 esi)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 115 123

(note 303 1204 309 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 115 123
(code_label 309 303 1155 571 "" "" [1 uses])

(note 1155 309 311 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 311 1155 313 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 313 311 327 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 64 [0x40]))) -1 (insn_list 311 (nil))
    (nil))

(note 327 313 333 NOTE_INSN_DELETED 0)

(insn 333 327 334 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (insn_list 313 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 334 333 336 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 4 esi))
                    (const_int 288 [0x120])) 0))) 319 {*fop_df_1} (insn_list 333 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 336 334 338 (set (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 334 (nil))
    (nil))

(note 338 336 341 NOTE_INSN_LOOP_CONT 0)

(insn 341 338 1108 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1108 341 305 NOTE_INSN_LOOP_VTOP 0)

(insn 305 1108 306 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 17 [0x11]))) 2 {*cmpsi_1_insn} (insn_list 341 (nil))
    (nil))

(jump_insn 306 305 347 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 309)
            (pc))) 288 {*jcc_1} (insn_list 305 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 115 123

(note 347 306 1156 NOTE_INSN_LOOP_END 0)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1156 347 351 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 351 1156 355 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 355 351 357 NOTE_INSN_DELETED 0)

(insn 357 355 359 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg/v:SI 5 edi)
                (const_int 2 [0x2]))
            (reg/v:SI 5 edi))) 113 {*lea_0} (nil)
    (nil))

(insn 359 357 1252 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 357 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 5 edi)
            (const_int 96 [0x60]))
        (nil)))

(insn 1252 359 360 (set (reg/v:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -656 [0xfffffd70])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 360 1252 362 (set (reg/v:DF 9 st(1))
        (minus:DF (reg/v:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 0 eax))
                    (const_int 56 [0x38])) 0))) 319 {*fop_df_1} (insn_list 351 (insn_list 359 (nil)))
    (nil))

(note 362 360 365 NOTE_INSN_DELETED 0)

(insn 365 362 367 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 367 365 369 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 369 367 1354 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 365 (insn_list 367 (nil)))
    (nil))

(insn 1354 369 1355 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -708 [0xfffffd3c])) 0)) -1 (nil)
    (nil))

(insn 1355 1354 1356 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -712 [0xfffffd38])) 0)) -1 (nil)
    (nil))

(insn 1356 1355 1357 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -660 [0xfffffd6c])) 0)) -1 (nil)
    (nil))

(insn 1357 1356 1358 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -664 [0xfffffd68])) 0)) -1 (nil)
    (nil))

(insn 1358 1357 1359 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1359 1358 1360 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 1360 1359 1361 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -700 [0xfffffd44])) 0)) -1 (nil)
    (nil))

(insn 1361 1360 1362 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -704 [0xfffffd40])) 0)) -1 (nil)
    (nil))

(insn 1362 1361 1363 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -692 [0xfffffd4c])) 0)) -1 (nil)
    (nil))

(insn 1363 1362 1364 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -696 [0xfffffd48])) 0)) -1 (nil)
    (nil))

(insn 1364 1363 1365 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -684 [0xfffffd54])) 0)) -1 (nil)
    (nil))

(insn 1365 1364 383 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -688 [0xfffffd50])) 0)) -1 (nil)
    (nil))

(insn 383 1365 384 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 5 edi)) 27 {pushsi2} (nil)
    (nil))

(call_insn 384 383 387 (call (mem:QI (symbol_ref:SI ("chin")) 0)
        (const_int 64 [0x40])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 387 384 389 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 389 387 1110 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1110 389 1201 NOTE_INSN_DELETED 0)

(insn 1201 1110 1202 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 1202 1201 390 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 132 139

(note 390 1202 396 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 132 139
(code_label 396 390 1157 576 "" "" [1 uses])

(note 1157 396 398 [bb 13] NOTE_INSN_BASIC_BLOCK 0)

(insn 398 1157 410 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(note 410 398 416 NOTE_INSN_DELETED 0)

(insn 416 410 417 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (insn_list 398 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 417 416 419 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 3 ebx))
                    (const_int 208 [0xd0])) 0))) 319 {*fop_df_1} (insn_list 416 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 419 417 421 (set (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 417 (nil))
    (nil))

(note 421 419 424 NOTE_INSN_LOOP_CONT 0)

(insn 424 421 1113 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1113 424 392 NOTE_INSN_LOOP_VTOP 0)

(insn 392 1113 393 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 424 (nil))
    (nil))

(jump_insn 393 392 430 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 396)
            (pc))) 288 {*jcc_1} (insn_list 392 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 132 139

(note 430 393 1158 NOTE_INSN_LOOP_END 0)

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1158 430 434 [bb 14] NOTE_INSN_BASIC_BLOCK 0)

(insn 434 1158 1115 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1115 434 1199 NOTE_INSN_DELETED 0)

(insn 1199 1115 1200 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))

(insn 1200 1199 435 (set (reg:SI 4 esi)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))
;; End of basic block 14, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 145 153

(note 435 1200 441 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 15, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 51 55 145 153
(code_label 441 435 1159 581 "" "" [1 uses])

(note 1159 441 443 [bb 15] NOTE_INSN_BASIC_BLOCK 0)

(insn 443 1159 445 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 445 443 459 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 64 [0x40]))) -1 (insn_list 443 (nil))
    (nil))

(note 459 445 465 NOTE_INSN_DELETED 0)

(insn 465 459 466 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (insn_list 445 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 466 465 468 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 4 esi))
                    (const_int 288 [0x120])) 0))) 319 {*fop_df_1} (insn_list 465 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 468 466 470 (set (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 466 (nil))
    (nil))

(note 470 468 473 NOTE_INSN_LOOP_CONT 0)

(insn 473 470 1118 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1118 473 437 NOTE_INSN_LOOP_VTOP 0)

(insn 437 1118 438 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 17 [0x11]))) 2 {*cmpsi_1_insn} (insn_list 473 (nil))
    (nil))

(jump_insn 438 437 479 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 441)
            (pc))) 288 {*jcc_1} (insn_list 437 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 47 48 49 50 51 55 145 153

(note 479 438 1160 NOTE_INSN_LOOP_END 0)

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 47 48 49 50 55
(note 1160 479 483 [bb 16] NOTE_INSN_BASIC_BLOCK 0)

(insn 483 1160 487 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 487 483 489 NOTE_INSN_DELETED 0)

(insn 489 487 491 (set (reg:SI 1 edx)
        (plus:SI (mult:SI (reg/v:SI 5 edi)
                (const_int 2 [0x2]))
            (reg/v:SI 5 edi))) 113 {*lea_0} (nil)
    (nil))

(insn 491 489 1255 (parallel[ 
            (set (reg:SI 1 edx)
                (ashift:SI (reg:SI 1 edx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 489 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 5 edi)
            (const_int 96 [0x60]))
        (nil)))

(insn 1255 491 492 (set (reg/v:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -656 [0xfffffd70])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 492 1255 1258 (set (reg/v:DF 9 st(1))
        (minus:DF (reg/v:DF 9 st(1))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 0 eax))
                    (const_int 56 [0x38])) 0))) 319 {*fop_df_1} (insn_list 483 (insn_list 491 (nil)))
    (nil))

(insn 1258 492 503 (set (reg/v:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -712 [0xfffffd38])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 503 1258 506 (set (reg/v:DF 8 st(0))
        (minus:DF (reg/v:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 1 edx)
                        (reg:SI 0 eax))
                    (const_int 64 [0x40])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 506 503 508 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 508 506 510 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 510 508 1334 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 506 (insn_list 508 (nil)))
    (nil))

(insn 1334 510 1335 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1335 1334 1336 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 8 st(0))) -1 (nil)
    (nil))

(insn 1336 1335 1337 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -660 [0xfffffd6c])) 0)) -1 (nil)
    (nil))

(insn 1337 1336 1338 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -664 [0xfffffd68])) 0)) -1 (nil)
    (nil))

(insn 1338 1337 1339 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 1339 1338 1340 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 1340 1339 1341 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -700 [0xfffffd44])) 0)) -1 (nil)
    (nil))

(insn 1341 1340 1342 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -704 [0xfffffd40])) 0)) -1 (nil)
    (nil))

(insn 1342 1341 1343 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -692 [0xfffffd4c])) 0)) -1 (nil)
    (nil))

(insn 1343 1342 1344 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -696 [0xfffffd48])) 0)) -1 (nil)
    (nil))

(insn 1344 1343 1345 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -684 [0xfffffd54])) 0)) -1 (nil)
    (nil))

(insn 1345 1344 524 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -688 [0xfffffd50])) 0)) -1 (nil)
    (nil))

(insn 524 1345 525 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 5 edi)) 27 {pushsi2} (nil)
    (nil))

(call_insn 525 524 528 (call (mem:QI (symbol_ref:SI ("chin")) 0)
        (const_int 64 [0x40])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 528 525 530 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 530 528 1120 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 64 [0x40])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1120 530 1197 NOTE_INSN_DELETED 0)

(insn 1197 1120 1198 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 1198 1197 531 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))
;; End of basic block 16, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 165 172

(note 531 1198 537 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 17, registers live: 6 [bp] 7 [sp] 43 46 47 51 165 172
(code_label 537 531 1161 586 "" "" [1 uses])

(note 1161 537 539 [bb 17] NOTE_INSN_BASIC_BLOCK 0)

(insn 539 1161 551 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(note 551 539 557 NOTE_INSN_DELETED 0)

(insn 557 551 558 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)) 63 {*movdf_integer} (insn_list 539 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 558 557 560 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 3 ebx))
                    (const_int 208 [0xd0])) 0))) 314 {*fop_df_comm} (insn_list 557 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (nil)))

(insn 560 558 562 (set (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 558 (nil))
    (nil))

(note 562 560 565 NOTE_INSN_LOOP_CONT 0)

(insn 565 562 1123 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1123 565 533 NOTE_INSN_LOOP_VTOP 0)

(insn 533 1123 534 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 565 (nil))
    (nil))

(jump_insn 534 533 571 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 537)
            (pc))) 288 {*jcc_1} (insn_list 533 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 165 172

(note 571 534 1162 NOTE_INSN_LOOP_END 0)

;; Start of basic block 18, registers live: 6 [bp] 7 [sp] 43 46 47
(note 1162 571 575 [bb 18] NOTE_INSN_BASIC_BLOCK 0)

(insn 575 1162 1125 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1125 575 1195 NOTE_INSN_DELETED 0)

(insn 1195 1125 1196 (set (reg:SI 3 ebx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -448 [0xfffffe40]))) -1 (nil)
    (nil))

(insn 1196 1195 576 (set (reg:SI 4 esi)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))
;; End of basic block 18, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 178 186

(note 576 1196 582 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 19, registers live: 6 [bp] 7 [sp] 43 46 47 51 178 186
(code_label 582 576 1163 591 "" "" [1 uses])

(note 1163 582 584 [bb 19] NOTE_INSN_BASIC_BLOCK 0)

(insn 584 1163 586 (set (reg:SI 0 eax)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 586 584 600 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 0 eax)
            (const_int 64 [0x40]))) -1 (insn_list 584 (nil))
    (nil))

(note 600 586 606 NOTE_INSN_DELETED 0)

(insn 606 600 607 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (insn_list 586 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 607 606 609 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                        (reg:SI 4 esi))
                    (const_int 288 [0x120])) 0))) 314 {*fop_df_comm} (insn_list 606 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 609 607 611 (set (mem/s:DF (plus:SI (reg:SI 3 ebx)
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 607 (nil))
    (nil))

(note 611 609 614 NOTE_INSN_LOOP_CONT 0)

(insn 614 611 1128 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1128 614 578 NOTE_INSN_LOOP_VTOP 0)

(insn 578 1128 579 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 17 [0x11]))) 2 {*cmpsi_1_insn} (insn_list 614 (nil))
    (nil))

(jump_insn 579 578 620 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 582)
            (pc))) 288 {*jcc_1} (insn_list 578 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 19, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 178 186

(note 620 579 1164 NOTE_INSN_LOOP_END 0)

;; Start of basic block 20, registers live: 6 [bp] 7 [sp] 43 46 47
(note 1164 620 624 [bb 20] NOTE_INSN_BASIC_BLOCK 0)

(insn 624 1164 1130 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1130 624 1189 NOTE_INSN_DELETED 0)

(insn 1189 1130 1191 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -456 [0xfffffe38]))) -1 (nil)
    (nil))

(insn 1191 1189 625 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC95")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC95")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))
;; End of basic block 20, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 191 195

(note 625 1191 631 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 21, registers live: 6 [bp] 7 [sp] 43 46 47 51 191 195
(code_label 631 625 1165 596 "" "" [1 uses])

(note 1165 631 633 [bb 21] NOTE_INSN_BASIC_BLOCK 0)

(insn 633 1165 639 (set (reg:SI 3 ebx)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 639 633 640 (set (reg/v:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (insn_list 633 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)
        (nil)))

(note 640 639 642 0x402d3300 NOTE_INSN_BLOCK_BEG 0)

(insn/i 642 640 648 (set (reg:DF 8 st(0))
        (abs:DF (reg/v:DF 8 st(0)))) -1 (insn_list 639 (nil))
    (nil))

(note 648 642 1322 0x402d3300 NOTE_INSN_BLOCK_END 0)

(insn 1322 648 1323 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1323 1322 1324 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1324 1323 1325 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1325 1324 1326 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 1326 1325 1166 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 666))) -1 (nil)
    (nil))
;; End of basic block 21, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 189 191 195

;; Start of basic block 22, registers live: 6 [bp] 7 [sp] 43 46 47 51 189 191 195
(note 1166 1326 1318 [bb 22] NOTE_INSN_BASIC_BLOCK 0)

(insn 1318 1166 1319 (set (mem/s:SI (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 1319 1318 665 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 22, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 191 195

(note 665 1319 666 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 23, registers live: 6 [bp] 7 [sp] 43 46 47 51 191 195
(code_label 666 665 1167 595 "" "" [1 uses])

(note 1167 666 668 [bb 23] NOTE_INSN_BASIC_BLOCK 0)

(insn 668 1167 1133 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1133 668 627 NOTE_INSN_LOOP_VTOP 0)

(insn 627 1133 628 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 668 (nil))
    (nil))

(jump_insn 628 627 674 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 631)
            (pc))) 288 {*jcc_1} (insn_list 627 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 23, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 191 195

(note 674 628 1168 NOTE_INSN_LOOP_END 0)

;; Start of basic block 24, registers live: 6 [bp] 7 [sp] 43 46 47
(note 1168 674 1261 [bb 24] NOTE_INSN_BASIC_BLOCK 0)

(insn 1261 1168 677 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 677 1261 1264 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -456 [0xfffffe38])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1264 677 678 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -672 [0xfffffd60])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 678 1264 679 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -448 [0xfffffe40])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 679 678 681 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 677 (insn_list 678 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 20 frame)
                (const_int -480 [0xfffffe20])) 0)
        (nil)))

(insn 681 679 683 (set (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -504 [0xfffffe08])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 679 (nil))
    (nil))

(insn 683 681 684 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -456 [0xfffffe38])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -456 [0xfffffe38])) 0)
        (nil)))

(insn 684 683 685 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (insn_list 683 (nil))
    (expr_list:REG_EQUAL (neg:DF (mem/s:DF (plus:SI (reg:SI 20 frame)
                    (const_int -432 [0xfffffe50])) 0))
        (nil)))

(insn 685 684 1267 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -672 [0xfffffd60])) 0))) 314 {*fop_df_comm} (insn_list 684 (nil))
    (nil))

(insn 1267 685 686 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 686 1267 687 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -448 [0xfffffe40])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 687 686 689 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 685 (insn_list 686 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 20 frame)
                (const_int -472 [0xfffffe28])) 0)
        (nil)))

(insn 689 687 1270 (set (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -496 [0xfffffe10])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 687 (nil))
    (nil))

(insn 1270 689 691 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 691 1270 1273 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -432 [0xfffffe50])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1273 691 692 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -672 [0xfffffd60])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 692 1273 693 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -424 [0xfffffe58])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 693 692 695 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 691 (insn_list 692 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 20 frame)
                (const_int -464 [0xfffffe30])) 0)
        (nil)))

(insn 695 693 697 (set (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -488 [0xfffffe18])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 693 (nil))
    (nil))

(insn 697 695 698 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -432 [0xfffffe50])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -432 [0xfffffe50])) 0)
        (nil)))

(insn 698 697 699 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (insn_list 697 (nil))
    (expr_list:REG_EQUAL (neg:DF (mem/s:DF (plus:SI (reg:SI 20 frame)
                    (const_int -408 [0xfffffe68])) 0))
        (nil)))

(insn 699 698 1276 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -672 [0xfffffd60])) 0))) 314 {*fop_df_comm} (insn_list 698 (nil))
    (nil))

(insn 1276 699 700 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 700 1276 701 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -424 [0xfffffe58])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 701 700 703 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 699 (insn_list 700 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 20 frame)
                (const_int -456 [0xfffffe38])) 0)
        (nil)))

(insn 703 701 1279 (set (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -480 [0xfffffe20])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 701 (nil))
    (nil))

(insn 1279 703 705 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 705 1279 1282 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -408 [0xfffffe68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1282 705 706 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -672 [0xfffffd60])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 706 1282 707 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -400 [0xfffffe70])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 707 706 709 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 705 (insn_list 706 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 20 frame)
                (const_int -448 [0xfffffe40])) 0)
        (nil)))

(insn 709 707 711 (set (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -472 [0xfffffe28])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 707 (nil))
    (nil))

(insn 711 709 712 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -408 [0xfffffe68])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -408 [0xfffffe68])) 0)
        (nil)))

(insn 712 711 713 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (insn_list 711 (nil))
    (expr_list:REG_EQUAL (neg:DF (mem/s:DF (plus:SI (reg:SI 20 frame)
                    (const_int -384 [0xfffffe80])) 0))
        (nil)))

(insn 713 712 1285 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -672 [0xfffffd60])) 0))) 314 {*fop_df_comm} (insn_list 712 (nil))
    (nil))

(insn 1285 713 714 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 714 1285 715 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -400 [0xfffffe70])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 715 714 717 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 713 (insn_list 714 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 20 frame)
                (const_int -440 [0xfffffe48])) 0)
        (nil)))

(insn 717 715 720 (set (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -464 [0xfffffe30])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 715 (nil))
    (nil))

(insn 720 717 1135 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 1135 720 1183 NOTE_INSN_DELETED 0)

(insn 1183 1135 1185 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -504 [0xfffffe08]))) -1 (nil)
    (nil))

(insn 1185 1183 721 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC95")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC95")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))
;; End of basic block 24, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 225 229

(note 721 1185 727 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 25, registers live: 6 [bp] 7 [sp] 43 46 47 51 225 229
(code_label 727 721 1169 604 "" "" [1 uses])

(note 1169 727 729 [bb 25] NOTE_INSN_BASIC_BLOCK 0)

(insn 729 1169 735 (set (reg:SI 3 ebx)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 735 729 736 (set (reg/v:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (insn_list 729 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)
        (nil)))

(note 736 735 738 0x402d68c0 NOTE_INSN_BLOCK_BEG 0)

(insn/i 738 736 744 (set (reg:DF 8 st(0))
        (abs:DF (reg/v:DF 8 st(0)))) -1 (insn_list 735 (nil))
    (nil))

(note 744 738 1309 0x402d68c0 NOTE_INSN_BLOCK_END 0)

(insn 1309 744 1310 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1310 1309 1311 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1311 1310 1312 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1312 1311 1313 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 1313 1312 1170 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 762))) -1 (nil)
    (nil))
;; End of basic block 25, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 223 225 229

;; Start of basic block 26, registers live: 6 [bp] 7 [sp] 43 46 47 51 223 225 229
(note 1170 1313 1305 [bb 26] NOTE_INSN_BASIC_BLOCK 0)

(insn 1305 1170 1306 (set (mem/s:SI (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 1306 1305 761 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 26, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 225 229

(note 761 1306 762 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 27, registers live: 6 [bp] 7 [sp] 43 46 47 51 225 229
(code_label 762 761 1171 603 "" "" [1 uses])

(note 1171 762 764 [bb 27] NOTE_INSN_BASIC_BLOCK 0)

(insn 764 1171 1138 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1138 764 723 NOTE_INSN_LOOP_VTOP 0)

(insn 723 1138 724 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 5 [0x5]))) 2 {*cmpsi_1_insn} (insn_list 764 (nil))
    (nil))

(jump_insn 724 723 770 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 727)
            (pc))) 288 {*jcc_1} (insn_list 723 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 27, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 46 47 51 225 229

(note 770 724 1172 NOTE_INSN_LOOP_END 0)

;; Start of basic block 28, registers live: 6 [bp] 7 [sp] 43 46 47
(note 1172 770 774 [bb 28] NOTE_INSN_BASIC_BLOCK 0)

(insn 774 1172 1298 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1298 774 1299 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -668 [0xfffffd64])) 0)) -1 (nil)
    (nil))

(insn 1299 1298 1300 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -672 [0xfffffd60])) 0)) -1 (nil)
    (nil))

(insn 1300 1299 1301 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -676 [0xfffffd5c])) 0)) -1 (nil)
    (nil))

(insn 1301 1300 780 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -680 [0xfffffd58])) 0)) -1 (nil)
    (nil))

(insn 780 1301 782 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -648 [0xfffffd78]))) -1 (nil)
    (nil))

(insn 782 780 786 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 780 (nil))
    (nil))

(insn 786 782 788 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 6 ebp)
            (const_int -384 [0xfffffe80]))) -1 (nil)
    (nil))

(insn 788 786 789 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 786 (nil))
    (nil))

(call_insn 789 788 792 (call (mem:QI (symbol_ref:SI ("transform")) 0)
        (const_int 32 [0x20])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 792 789 794 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 794 792 1140 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1140 794 1177 NOTE_INSN_DELETED 0)

(insn 1177 1140 1179 (set (reg:SI 1 edx)
        (plus:SI (reg:SI 6 ebp)
            (const_int -648 [0xfffffd78]))) -1 (nil)
    (nil))

(insn 1179 1177 795 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC95")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC95")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))
;; End of basic block 28, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 51 238 242

(note 795 1179 801 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 29, registers live: 6 [bp] 7 [sp] 43 51 238 242
(code_label 801 795 1173 612 "" "" [1 uses])

(note 1173 801 803 [bb 29] NOTE_INSN_BASIC_BLOCK 0)

(insn 803 1173 809 (set (reg:SI 3 ebx)
        (mult:SI (reg/v:SI 2 ecx)
            (const_int 8 [0x8]))) -1 (nil)
    (nil))

(insn 809 803 810 (set (reg/v:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)) 63 {*movdf_integer} (insn_list 803 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)
        (nil)))

(note 810 809 812 0x402d8620 NOTE_INSN_BLOCK_BEG 0)

(insn/i 812 810 818 (set (reg:DF 8 st(0))
        (abs:DF (reg/v:DF 8 st(0)))) -1 (insn_list 809 (nil))
    (nil))

(note 818 812 1293 0x402d8620 NOTE_INSN_BLOCK_END 0)

(insn 1293 818 1294 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 1294 1293 1295 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1295 1294 1296 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 1296 1295 1297 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 1297 1296 1174 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 836))) -1 (nil)
    (nil))
;; End of basic block 29, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 51 236 238 242

;; Start of basic block 30, registers live: 6 [bp] 7 [sp] 43 51 236 238 242
(note 1174 1297 1289 [bb 30] NOTE_INSN_BASIC_BLOCK 0)

(insn 1289 1174 1290 (set (mem/s:SI (plus:SI (reg:SI 1 edx)
                (reg:SI 3 ebx)) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 1290 1289 835 (set (mem/s:SI (plus:SI (plus:SI (reg:SI 1 edx)
                    (reg:SI 3 ebx))
                (const_int 4 [0x4])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 30, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 51 238 242

(note 835 1290 836 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 31, registers live: 6 [bp] 7 [sp] 43 51 238 242
(code_label 836 835 1175 611 "" "" [1 uses])

(note 1175 836 838 [bb 31] NOTE_INSN_BASIC_BLOCK 0)

(insn 838 1175 1143 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 1143 838 797 NOTE_INSN_LOOP_VTOP 0)

(insn 797 1143 798 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (const_int 17 [0x11]))) 2 {*cmpsi_1_insn} (insn_list 838 (nil))
    (nil))

(jump_insn 798 797 844 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 801)
            (pc))) 288 {*jcc_1} (insn_list 797 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 31, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 51 238 242

(note 844 798 1176 NOTE_INSN_LOOP_END 0)

;; Start of basic block 32, registers live: 6 [bp] 7 [sp] 43
(note 1176 844 850 [bb 32] NOTE_INSN_BASIC_BLOCK 0)

(insn 850 1176 851 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -504 [0xfffffe08])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -504 [0xfffffe08])) 0)
        (nil)))

(insn 851 850 852 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -488 [0xfffffe18])) 0))) 314 {*fop_df_comm} (insn_list 850 (nil))
    (nil))

(insn 852 851 854 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -472 [0xfffffe28])) 0))) 314 {*fop_df_comm} (insn_list 851 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (symbol_ref:SI ("outp_dis")) 0)
        (nil)))

(insn 854 852 859 (set (mem/s:DF (symbol_ref:SI ("outp_dis")) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 852 (nil))
    (nil))

(insn 859 854 860 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -496 [0xfffffe10])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -496 [0xfffffe10])) 0)
        (nil)))

(insn 860 859 861 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -480 [0xfffffe20])) 0))) 314 {*fop_df_comm} (insn_list 859 (nil))
    (nil))

(insn 861 860 863 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -464 [0xfffffe30])) 0))) 314 {*fop_df_comm} (insn_list 860 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_dis"))
                    (const_int 8 [0x8]))) 0)
        (nil)))

(insn 863 861 868 (set (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_dis"))
                    (const_int 8 [0x8]))) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 861 (nil))
    (nil))

(insn 868 863 869 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -440 [0xfffffe48])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -440 [0xfffffe48])) 0)
        (nil)))

(insn 869 868 870 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -416 [0xfffffe60])) 0))) 314 {*fop_df_comm} (insn_list 868 (nil))
    (nil))

(insn 870 869 872 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -392 [0xfffffe78])) 0))) 314 {*fop_df_comm} (insn_list 869 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_dis"))
                    (const_int 16 [0x10]))) 0)
        (nil)))

(insn 872 870 877 (set (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_dis"))
                    (const_int 16 [0x10]))) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 870 (nil))
    (nil))

(insn 877 872 878 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -648 [0xfffffd78])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -648 [0xfffffd78])) 0)
        (nil)))

(insn 878 877 879 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -616 [0xfffffd98])) 0))) 314 {*fop_df_comm} (insn_list 877 (nil))
    (nil))

(insn 879 878 881 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -584 [0xfffffdb8])) 0))) 314 {*fop_df_comm} (insn_list 878 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (symbol_ref:SI ("outp_str")) 0)
        (nil)))

(insn 881 879 886 (set (mem/s:DF (symbol_ref:SI ("outp_str")) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 879 (nil))
    (nil))

(insn 886 881 887 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -640 [0xfffffd80])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -640 [0xfffffd80])) 0)
        (nil)))

(insn 887 886 888 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -608 [0xfffffda0])) 0))) 314 {*fop_df_comm} (insn_list 886 (nil))
    (nil))

(insn 888 887 889 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -576 [0xfffffdc0])) 0))) 314 {*fop_df_comm} (insn_list 887 (nil))
    (nil))

(insn 889 888 890 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -632 [0xfffffd88])) 0))) 314 {*fop_df_comm} (insn_list 888 (nil))
    (nil))

(insn 890 889 891 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -600 [0xfffffda8])) 0))) 314 {*fop_df_comm} (insn_list 889 (nil))
    (nil))

(insn 891 890 893 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -568 [0xfffffdc8])) 0))) 314 {*fop_df_comm} (insn_list 890 (nil))
    (nil))

(note 893 891 894 NOTE_INSN_DELETED 0)

(insn 894 893 896 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC96")) 0))) 314 {*fop_df_comm} (insn_list 891 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_str"))
                    (const_int 8 [0x8]))) 0)
        (nil)))

(insn 896 894 901 (set (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_str"))
                    (const_int 8 [0x8]))) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 894 (nil))
    (nil))

(insn 901 896 902 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -624 [0xfffffd90])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 6 ebp)
                (const_int -624 [0xfffffd90])) 0)
        (nil)))

(insn 902 901 903 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -592 [0xfffffdb0])) 0))) 314 {*fop_df_comm} (insn_list 901 (nil))
    (nil))

(insn 903 902 905 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -560 [0xfffffdd0])) 0))) 314 {*fop_df_comm} (insn_list 902 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_str"))
                    (const_int 16 [0x10]))) 0)
        (nil)))

(insn 905 903 908 (set (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_str"))
                    (const_int 16 [0x10]))) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 903 (nil))
    (nil))

(insn 908 905 912 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(note 912 908 1288 NOTE_INSN_DELETED 0)

(insn 1288 912 914 (set (reg:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 914 1288 916 (set (reg:SI 0 eax)
        (plus:SI (mult:SI (reg:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg:SI 2 ecx))) 113 {*lea_0} (nil)
    (nil))

(insn 916 914 930 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 914 (nil))
    (expr_list:REG_EQUAL (mult:SI (mem/f:SI (plus:SI (reg:SI 6 ebp)
                    (const_int 12 [0xc])) 0)
            (const_int 48 [0x30]))
        (nil)))

(insn 930 916 931 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)) 63 {*movdf_integer} (insn_list 908 (insn_list 916 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)
        (nil)))

(insn 931 930 933 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (symbol_ref:SI ("outp_dis")) 0))) 314 {*fop_df_comm} (insn_list 930 (nil))
    (nil))

(insn 933 931 936 (set (mem/s:DF (plus:SI (reg:SI 0 eax)
                (reg:SI 1 edx)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 931 (nil))
    (nil))

(insn 936 933 958 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 958 936 959 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (insn_list 936 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 959 958 961 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_dis"))
                        (const_int 8 [0x8]))) 0))) 314 {*fop_df_comm} (insn_list 958 (nil))
    (nil))

(insn 961 959 964 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 8 [0x8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 959 (nil))
    (nil))

(insn 964 961 986 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 986 964 987 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (insn_list 964 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)
        (nil)))

(insn 987 986 989 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_dis"))
                        (const_int 16 [0x10]))) 0))) 314 {*fop_df_comm} (insn_list 986 (nil))
    (nil))

(insn 989 987 992 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 16 [0x10])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 987 (nil))
    (nil))

(insn 992 989 1014 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 1014 992 1015 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (insn_list 992 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)
        (nil)))

(insn 1015 1014 1017 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (symbol_ref:SI ("outp_str")) 0))) 314 {*fop_df_comm} (insn_list 1014 (nil))
    (nil))

(insn 1017 1015 1020 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 24 [0x18])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1015 (nil))
    (nil))

(insn 1020 1017 1042 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 1042 1020 1043 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 32 [0x20])) 0)) 63 {*movdf_integer} (insn_list 1020 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 32 [0x20])) 0)
        (nil)))

(insn 1043 1042 1045 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_str"))
                        (const_int 8 [0x8]))) 0))) 314 {*fop_df_comm} (insn_list 1042 (nil))
    (nil))

(insn 1045 1043 1048 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 32 [0x20])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1043 (nil))
    (nil))

(insn 1048 1045 1070 (set (reg:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("sum")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("sum")) 0)
        (nil)))

(insn 1070 1048 1071 (set (reg:DF 8 st(0))
        (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 40 [0x28])) 0)) 63 {*movdf_integer} (insn_list 1048 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 40 [0x28])) 0)
        (nil)))

(insn 1071 1070 1073 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/s:DF (const:SI (plus:SI (symbol_ref:SI ("outp_str"))
                        (const_int 16 [0x10]))) 0))) 314 {*fop_df_comm} (insn_list 1070 (nil))
    (nil))

(insn 1073 1071 1075 (set (mem/s:DF (plus:SI (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx))
                (const_int 40 [0x28])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1071 (nil))
    (nil))
;; End of basic block 32, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 1075 1073 1213 0x402e10e0 NOTE_INSN_BLOCK_END 0)

(note 1213 1075 0 NOTE_INSN_DELETED 0)


;; Function chin

;; 52 regs to allocate: 70 (2) 69 (2) 312 (2) 62 (2) 43 (2) 52 (2) 63 (2) 55 (2) 66 (2) 65 (2) 71 (2) 519 (2) 44 (2) 506 (2) 73 (2) 46 (2) 75 (2) 64 (2) 424 (2) 515 (2) 72 (2) 45 (2) 77 (2) 437 (2) 48 (2) 238 (2) 67 (2) 78 (2) 80 (2) 53 (2) 643 (2) 56 (2) 241 (2) 79 (2) 84 (2) 54 (2) 446 (2) 330 (2) 76 (2) 59 (2) 445 (2) 61 (2) 49 68 (2) 74 (2) 58 (2) 81 (2) 57 (2) 60 (2) 82 (2) 85 (2) 83 (2)
;; 42 conflicts: 42 43 44 45 46 48 49 86 2 3 7
;; 43 conflicts: 42 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 93 94 95 96 97 98 99 100 105 112 113 114 118 121 125 126 127 129 130 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 149 150 152 153 155 157 158 160 161 164 165 166 167 168 169 170 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 196 197 198 199 202 203 204 205 206 207 208 209 210 211 212 213 214 217 218 219 220 222 223 224 230 231 233 234 235 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 296 297 298 299 300 303 308 309 310 312 313 314 324 325 327 328 329 330 331 332 333 334 335 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 371 372 374 375 376 377 378 380 381 382 383 384 386 387 388 389 391 392 393 394 396 397 398 399 400 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 423 424 425 426 428 429 433 434 436 437 438 439 440 441 442 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 514 515 516 517 518 519 520 521 522 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 546 547 548 549 550 551 552 553 554 555 556 557 558 559 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 583 584 585 586 587 588 589 590 591 592 593 595 596 597 599 600 601 602 605 606 608 609 610 611 612 613 615 616 617 618 619 620 621 625 626 627 628 629 630 631 632 633 634 635 637 638 639 640 641 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 683 684 685 686 687 688 689 690 691 692 693 694 695 696 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 716 717 718 719 720 721 722 723 725 726 727 728 729 730 731 732 733 734 735 736 738 739 740 741 742 743 0 1 2 3 7 8 9 10 11 12 13 14 15
;; 44 conflicts
;; 45 conflicts
;; 46 conflicts
;; 48 conflicts
;; 49 conflicts
;; 52 conflicts
;; 53 conflicts
;; 54 conflicts
;; 55 conflicts
;; 56 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 69 70 71 81 82 83 84 85 86 88 96 112 113 114 118 121 125 126 127 129 130 132 133 134 135 143 144 145 0 1 2 3 7 8 9 10
;; 57 conflicts
;; 58 conflicts
;; 59 conflicts
;; 60 conflicts
;; 61 conflicts
;; 62 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 71 81 82 83 84 85 136 137 138 139 140 141 142 174 175 176 236 237 238 239 240 7 8 9 12 14
;; 62 preferences: 13
;; 63 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 170 172 173 174 175 176 177 178 179 236 237 238 239 240 241 242 243 244 247 248 250 251 7 8 9 11 12 13 14
;; 64 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 71 81 82 83 84 85 141 142 167 168 169 170 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 196 197 198 199 202 203 204 205 206 207 208 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 7 8 9 10 11 12 13 14
;; 65 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 71 81 82 83 84 85 141 142 157 158 160 161 164 165 166 167 168 169 170 172 173 174 175 176 177 178 179 180 181 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 7 8 9 10 11 12 13 14
;; 66 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 71 81 82 83 84 85 141 142 155 157 158 160 161 164 165 166 167 168 169 170 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 196 197 198 199 202 203 204 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 7 8 9 10 11 12 13 14 15
;; 67 conflicts
;; 68 conflicts
;; 69 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 69 71 81 82 83 84 85 145 146 147 149 150 152 153 7 8 9
;; 70 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 70 81 82 83 84 85 127 129 130 7 8 9
;; 71 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 62 64 65 66 67 68 69 71 81 82 83 84 85 135 136 137 138 139 140 141 143 144 145 146 147 149 150 152 153 155 157 158 160 161 164 165 166 167 168 7 8 9 10
;; 72 conflicts
;; 73 conflicts
;; 74 conflicts
;; 75 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 423 424 425 426 428 429 433 434 436 437 438 439 440 441 442 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 476 477 478 479 484 485 486 487 488 489 490 491 493 494 495 496 497 498 499 500 501 7 8 9 10 11
;; 76 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 423 424 425 426 428 429 433 434 436 437 438 439 440 441 442 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 514 515 516 517 518 519 520 521 522 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 546 547 548 549 550 551 552 553 554 555 556 557 558 559 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 583 584 585 586 587 588 589 590 591 592 593 595 596 597 599 600 601 602 605 606 608 609 610 611 612 613 615 616 617 618 619 620 621 625 626 627 628 629 630 631 632 633 634 635 637 638 639 640 641 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 683 684 685 686 687 688 689 690 691 692 693 694 695 696 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 716 717 718 719 720 721 722 723 725 726 727 728 729 7 8 9 10 11 12 13
;; 77 conflicts
;; 78 conflicts
;; 78 preferences: 14 15
;; 79 conflicts
;; 80 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 73 74 75 76 77 78 79 80 81 82 83 84 85 330 332 333 334 335 338 339 340 341 342 343 344 345 346 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 371 372 374 375 376 377 378 380 381 382 383 384 386 387 388 389 391 392 393 394 396 397 398 399 400 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 423 424 425 426 428 429 433 434 436 437 438 439 440 441 442 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 514 515 516 517 518 519 520 521 522 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 546 547 548 549 550 551 552 553 554 555 556 557 558 559 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 583 584 585 586 587 588 589 590 591 592 593 595 596 597 599 600 601 602 605 606 608 609 610 611 612 613 615 616 617 618 619 620 621 625 626 627 628 629 630 631 632 633 634 635 637 638 639 640 641 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 683 684 685 686 687 688 689 690 691 692 693 694 695 696 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 716 717 718 719 7 8 9 10 11 12 13
;; 81 conflicts
;; 82 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 121 125 126 127 129 130 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 149 150 152 153 155 157 158 160 161 164 165 166 167 168 169 170 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 196 197 198 199 202 203 204 205 206 207 208 209 210 211 212 213 214 217 218 219 220 222 223 224 230 231 233 234 235 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 296 297 298 299 300 303 308 309 310 312 313 314 324 325 327 328 329 330 331 332 333 334 335 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 371 372 374 375 376 377 378 380 381 382 383 384 386 387 388 389 391 392 393 394 396 397 398 399 400 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 423 424 425 426 428 429 433 434 436 437 438 439 440 441 442 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 514 515 516 517 518 519 520 521 522 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 546 547 548 549 550 551 552 553 554 555 556 557 558 559 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 583 584 585 7 8 9 10 11 12 13 14 15
;; 83 conflicts
;; 84 conflicts
;; 85 conflicts
;; 86 conflicts: 42 43 44 45 46 48 49 52 53 54 55 56 57 58 86 87 88 93 94 95 96 97 98 99 100 105 112 113 114 0 1 2 3 7 8 9 10
;; 87 conflicts: 43 44 45 46 48 49 86 87 2 3 7
;; 88 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 86 88 93 94 95 96 97 98 99 100 105 112 113 114 0 1 2 3 7 8 9 10
;; 93 conflicts: 43 44 45 46 48 49 52 86 88 93 2 3 7 8
;; 94 conflicts: 43 44 45 46 48 49 52 53 86 88 94 2 3 7 8
;; 95 conflicts: 43 44 45 46 48 49 52 53 54 86 88 95 2 3 7 8
;; 96 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 86 88 96 97 98 99 100 105 112 113 114 118 0 1 2 3 7 8 9 10
;; 97 conflicts: 43 44 45 46 48 49 52 53 54 86 88 96 97 2 3 7 8 10
;; 98 conflicts: 43 44 45 46 48 49 52 53 54 86 88 96 98 99 2 3 7 8 9 10
;; 99 conflicts: 43 44 45 46 48 49 52 53 54 55 86 88 96 98 99 100 2 3 7 8 9 10
;; 100 conflicts: 43 44 45 46 48 49 52 53 54 86 88 96 99 100 2 3 7 8 9 10
;; 105 conflicts: 43 44 45 46 48 49 52 53 54 55 86 88 96 105 2 3 7 8 10
;; 112 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 86 88 96 112 0 1 2 3 7 10
;; 112 preferences: 8 11
;; 113 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 86 88 96 113 2 3 7 8 10
;; 114 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 86 88 96 114 118 0 1 2 3 7 8 10
;; 118 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 96 114 118 0 1 7 8 10
;; 118 preferences: 11
;; 121 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 82 83 84 85 121 7 8
;; 125 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 82 83 84 85 125 126 7 8 9
;; 126 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 82 83 84 85 125 126 7 8 9
;; 127 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 70 81 82 83 84 85 127 7 8
;; 129 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 70 81 82 83 84 85 129 130 7 8 9
;; 130 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 70 81 82 83 84 85 129 130 7 8 9
;; 132 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85 132 7 8
;; 133 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85 133 7 8
;; 134 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85 134 7 8
;; 135 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85 135 7 8
;; 136 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 67 68 71 81 82 83 84 85 136 137 138 7 8 9
;; 137 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 67 68 71 81 82 83 84 85 136 137 7 8 9
;; 138 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 67 68 71 81 82 83 84 85 136 138 7 8 9
;; 139 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 67 68 71 81 82 83 84 85 139 7 9
;; 140 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 67 68 71 81 82 83 84 85 140 7 9
;; 140 preferences: 8 13
;; 141 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 64 65 66 67 68 71 81 82 83 84 85 141 7 8
;; 142 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 64 65 66 67 68 81 82 83 84 85 142 7 8
;; 143 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85 143 7 8
;; 144 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85 144 7 8
;; 145 conflicts: 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 69 71 81 82 83 84 85 145 146 147 7 8 9
;; 146 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85 145 146 7 8 9
;; 147 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85 145 147 7 8 9
;; 149 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85 149 7 8
;; 150 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85 150 7 8
;; 152 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85 152 153 7 8 9
;; 153 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85 152 153 7 8 9
;; 155 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 71 81 82 83 84 85 155 7 8 9
;; 157 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 157 158 160 7 8 9 10
;; 158 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 157 158 160 161 7 8 9 10
;; 160 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 157 158 160 7 8 9 10
;; 161 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 158 161 7 8 9
;; 164 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 164 7 9
;; 165 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 165 7 9
;; 166 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 65 66 67 68 71 81 82 83 84 85 166 7 9
;; 166 preferences: 8 13
;; 167 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 71 81 82 83 84 85 167 7 8
;; 168 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 71 81 82 83 84 85 168 7 8
;; 169 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 169 7 8
;; 170 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 170 172 7 8 9
;; 172 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 170 172 7 8 9
;; 173 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 173 7 8
;; 173 preferences: 13
;; 174 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 174 7 8
;; 175 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 175 7 8
;; 176 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 176 7 8
;; 177 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 196 197 198 199 202 203 204 205 206 207 208 209 210 211 212 213 214 217 218 219 220 7 8 9 10 11 12 13
;; 178 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 177 178 7 8 13
;; 179 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 177 179 7 8 13
;; 180 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 177 180 7 8 13
;; 181 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 177 181 7 8 13
;; 182 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 182 7 8 13
;; 183 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 183 7 8 13
;; 184 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 184 185 186 7 8 9 13
;; 185 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 184 185 7 8 9 13
;; 186 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 184 186 7 8 9 13
;; 187 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 187 7 9 13
;; 188 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 188 7 8 13
;; 189 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 189 190 191 7 8 10 12 13
;; 190 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 189 190 7 8 10 13
;; 191 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 189 191 192 193 194 196 197 198 199 202 203 204 205 206 207 208 209 210 211 212 213 214 7 8 9 10 11 12 13
;; 192 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 193 194 196 197 198 199 202 203 204 205 206 207 208 209 210 211 212 213 214 217 218 219 220 222 223 224 230 7 8 9 10 11 12 13
;; 193 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 193 7 8 10 12 13
;; 194 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 194 196 7 8 9 10 12 13
;; 196 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 194 196 7 8 9 10 12 13
;; 197 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 197 7 8 10 12 13
;; 198 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 198 7 8 10 12 13
;; 199 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 199 7 8 10 12 13
;; 202 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 202 203 7 8 9 10 12 13
;; 203 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 202 203 7 8 9 10 12 13
;; 204 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 177 191 192 204 205 206 7 8 9 10 11 12 13
;; 205 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 67 68 81 82 83 84 85 177 191 192 204 205 206 207 208 209 210 211 212 213 214 217 218 219 220 222 223 224 230 231 7 8 9 10 11 12 13
;; 206 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 67 68 81 82 83 84 85 177 191 192 204 205 206 7 8 9 10 11 12 13
;; 207 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 67 68 81 82 83 84 85 177 191 192 205 207 7 8 10 11 12 13
;; 208 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 67 68 81 82 83 84 85 177 191 192 205 208 7 8 10 11 12 13
;; 209 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 191 192 205 209 7 8 10 11 12 13
;; 210 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 191 192 205 210 7 8 10 11 12 13
;; 211 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 191 192 205 211 7 8 10 11 12 13
;; 212 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 191 192 205 212 7 8 10 11 12 13
;; 213 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 191 192 205 213 7 8 10 11 12 13
;; 214 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 191 192 205 214 7 8 10 11 12 13
;; 217 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 177 192 205 217 218 219 7 8 9 10 11 12 13
;; 218 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 177 192 205 217 218 219 220 222 223 224 7 8 9 10 11 12 13
;; 219 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 177 192 205 217 218 219 7 8 9 10 11 12 13
;; 220 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 177 192 205 218 220 222 7 8 10 11 12 13
;; 222 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 192 205 218 220 222 7 8 10 11 12 13
;; 223 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 192 205 218 223 7 8 10 11 12
;; 223 preferences: 13
;; 224 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 192 205 218 224 7 8 10 11 12
;; 224 preferences: 13
;; 230 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 192 205 230 7 8 10 11
;; 230 preferences: 12
;; 231 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 205 231 233 7 10 11
;; 231 preferences: 8 12
;; 233 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 231 233 7 10 11
;; 233 preferences: 8 12
;; 234 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 234 7 10
;; 234 preferences: 8 11 12
;; 235 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 235 7 8
;; 235 preferences: 11 12
;; 236 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 236 237 238 7 12 14
;; 237 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 7 8 9 10 11 12 14
;; 238 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 236 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 7 8 9 10 11 12 13 14 15
;; 239 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 296 297 298 299 300 303 7 8 9 10 11 12 13 14 15
;; 240 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85 237 238 239 240 241 7 8 12 14
;; 241 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 240 241 242 243 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 296 297 298 299 300 303 308 309 310 7 8 9 10 11 12 13 14 15
;; 242 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 242 7 8 12 14
;; 243 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 243 7 8 12 14
;; 244 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 247 248 250 251 252 253 254 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 7 8 9 10 11 12 13 14 15
;; 247 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 247 248 250 7 8 9 11 12 14
;; 248 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 247 248 7 8 9 11 12 14
;; 250 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 247 250 7 8 9 11 12 14
;; 251 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 63 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 251 252 7 8 9 11 12 14
;; 252 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 251 252 7 8 9 11 12 14
;; 253 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 253 7 9 11 12 14
;; 253 preferences: 8
;; 254 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 254 7 8 11 12 14
;; 255 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 255 258 259 261 262 263 264 265 266 267 268 269 270 272 273 274 275 276 278 279 280 7 8 9 10 11 12 13 14 15
;; 258 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 255 258 259 261 7 8 9 10 11 12 14
;; 259 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 237 238 239 241 244 255 258 259 7 8 9 10 11 12 14
;; 261 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 238 239 241 244 255 258 261 7 8 9 10 11 14
;; 262 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 65 66 67 68 81 82 83 84 85 238 239 241 244 255 262 263 7 8 9 10 11 14
;; 263 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 238 239 241 244 255 262 263 7 8 9 10 11 14
;; 264 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 238 239 241 244 255 264 7 9 10 11 14
;; 264 preferences: 8
;; 265 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 238 239 241 244 255 265 7 8 10 11 14
;; 266 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 64 66 67 68 81 82 83 84 85 238 239 241 244 255 266 267 268 7 8 9 10 11 13 14
;; 267 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 244 255 266 267 268 269 270 272 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 7 8 9 10 11 12 13 14 15
;; 268 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 244 255 266 267 268 7 8 9 10 11 13 14
;; 269 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 244 255 267 269 7 8 10 11 13 14
;; 270 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 244 255 267 270 7 8 10 11 13 14
;; 272 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 244 255 267 272 7 8 10 11 13 14
;; 273 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 244 255 267 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 296 297 298 299 300 7 8 9 10 11 12 13 14 15
;; 274 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 255 267 273 274 275 276 278 279 280 284 285 286 287 288 289 290 291 294 296 297 298 299 300 303 308 309 310 312 313 314 324 7 8 9 10 11 12 13 14 15
;; 275 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 255 267 273 274 275 7 8 10 11 13 14 15
;; 276 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 255 267 273 274 276 278 7 8 9 10 11 13 14 15
;; 278 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 255 267 273 274 276 278 7 8 9 10 11 13 14 15
;; 279 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 255 267 273 274 279 7 8 10 11 13 14 15
;; 280 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 255 267 273 274 280 7 8 10 11 13 14 15
;; 284 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 267 273 274 284 285 7 8 10 11 13 14 15
;; 285 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 267 273 274 284 285 7 8 10 11 13 14 15
;; 286 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 81 82 83 84 85 238 239 241 267 273 274 286 287 288 7 8 10 11 12 13 14 15
;; 287 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 238 239 241 267 273 274 286 287 288 289 290 291 294 296 297 298 299 300 303 308 309 310 312 313 314 324 325 7 8 9 10 11 12 13 14 15
;; 288 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 238 239 241 267 273 274 286 287 288 7 8 10 11 12 13 14 15
;; 289 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 238 239 241 267 273 274 287 289 7 10 11 12 13 14 15
;; 290 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 238 239 241 267 273 274 287 290 7 8 11 12 13 14 15
;; 291 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 238 239 241 267 273 274 287 291 7 8 11 12 13 14 15
;; 294 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 267 273 274 287 294 296 7 8 11 12 13 14 15
;; 296 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 273 274 287 294 296 7 8 11 12 13 14 15
;; 297 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 273 274 287 297 7 8 11 12 14 15
;; 297 preferences: 13
;; 298 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 273 274 287 298 7 8 11 12 14 15
;; 298 preferences: 13
;; 299 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 273 274 287 299 7 8 11 12 14 15
;; 300 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 273 274 287 300 7 8 11 12 14 15
;; 303 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 81 82 83 84 85 239 241 274 287 303 308 309 7 8 9 11 12 14
;; 308 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 241 274 287 303 308 309 310 312 313 314 7 8 9 11 12 14
;; 309 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 241 274 287 303 308 309 7 8 9 11 12 14
;; 310 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 241 274 287 308 310 312 7 8 11 12 14
;; 312 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 274 287 308 310 312 7 8 11 12 14
;; 312 preferences: 9 13
;; 313 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 274 287 308 313 7 8 11 12 14
;; 313 preferences: 9 13
;; 314 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 274 287 308 314 7 8 11 12 14
;; 314 preferences: 9 13
;; 324 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 274 287 324 7 8 11 12
;; 325 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 287 325 327 7 11 12
;; 325 preferences: 8
;; 327 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 325 327 7 11 12
;; 327 preferences: 8
;; 328 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 328 7 11
;; 328 preferences: 8 12
;; 329 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 329 7 8
;; 329 preferences: 11 12
;; 330 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 330 331 332 333 334 335 7 8 9
;; 331 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 81 82 83 84 85 330 331 7 8
;; 332 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 330 332 333 7 8 9
;; 333 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 330 332 333 7 8 9
;; 334 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 330 334 7 8
;; 335 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 330 335 7 8
;; 338 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 338 7 8
;; 339 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 339 7 8
;; 340 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 340 7 10
;; 341 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 341 342 343 344 345 7 8 9 10
;; 342 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 341 342 343 344 7 8 9 10
;; 343 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 341 342 343 7 8 9 10
;; 344 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 341 342 344 7 8 9 10
;; 345 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 341 345 7 8 10
;; 346 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85 346 7 10
;; 347 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 347 7 8
;; 348 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 348 349 7 8 9
;; 349 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 348 349 7 8 9
;; 350 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 350 7 8
;; 351 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 351 7 8
;; 352 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 352 7 9
;; 353 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 353 354 355 7 8 9
;; 354 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 353 354 7 8 9
;; 355 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 353 355 7 8 9
;; 356 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 356 7 9
;; 357 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 357 7 8
;; 358 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 358 7 8
;; 359 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 359 7 8
;; 360 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 360 7 10
;; 361 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 361 362 363 364 365 7 8 9 10
;; 362 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 361 362 363 364 7 8 9 10
;; 363 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 361 362 363 7 8 9 10
;; 364 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 361 362 364 7 8 9 10
;; 365 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 361 365 7 8 10
;; 366 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85 366 7 10
;; 367 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85 367 7 8
;; 368 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 368 7 8
;; 369 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 369 7 8
;; 371 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 371 7 8
;; 372 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 372 374 375 376 7 8 9
;; 374 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 372 374 7 8 9
;; 375 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 372 375 7 8 9
;; 376 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 372 376 7 8 9
;; 377 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 377 7 8
;; 378 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85 378 7 8
;; 380 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 380 7 8
;; 381 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 381 382 7 8 9
;; 382 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 381 382 7 8 9
;; 383 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 383 7 8
;; 384 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 384 7 8
;; 386 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 386 387 7 8 9
;; 387 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 386 387 7 8 9
;; 388 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 388 389 7 8 9
;; 389 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 388 389 7 8 9
;; 391 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 391 7 8
;; 392 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 392 7 8
;; 393 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 393 7 8
;; 394 conflicts: 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85 394 7 8
;; 396 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 67 72 73 78 79 80 81 82 83 84 85 396 7 8
;; 397 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 67 72 73 78 79 80 81 82 83 84 85 397 398 7 8 9
;; 398 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 397 398 7 8 9
;; 399 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 399 7 8
;; 400 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 400 7 8
;; 402 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 68 72 73 78 79 80 81 82 83 84 85 402 403 7 8 9
;; 403 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 402 403 7 8 9
;; 404 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 404 7 8
;; 405 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 405 7 8
;; 406 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 406 7 8
;; 407 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 407 7 8
;; 408 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 408 409 410 7 8 9
;; 409 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 408 409 7 8 9
;; 410 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 408 410 7 8 9
;; 411 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85 411 7 8
;; 412 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 412 7 8
;; 413 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 413 7 8
;; 414 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 414 7 8
;; 415 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 415 7 10
;; 416 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 416 417 418 419 420 7 8 9 10
;; 417 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 416 417 418 419 7 8 9 10
;; 418 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 416 417 418 7 8 9 10
;; 419 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 416 417 419 7 8 9 10
;; 420 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 416 420 7 8 10
;; 421 conflicts: 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85 421 7 10
;; 423 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 423 7 8
;; 424 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 424 425 426 428 429 433 7 8 9
;; 425 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 424 425 426 7 8 9
;; 426 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 424 425 426 7 8 9
;; 428 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 424 428 7 8
;; 429 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 424 429 7 8
;; 433 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 424 433 434 7 8 9
;; 434 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 433 434 7 8 9
;; 436 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 436 7 8
;; 437 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 438 439 440 441 442 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 476 477 478 479 480 481 482 7 8 9 10
;; 438 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 438 7 8
;; 439 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 439 440 7 8 9
;; 440 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 439 440 7 8 9
;; 441 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 441 7 8
;; 442 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 442 7 8
;; 444 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 444 445 446 447 448 7 8 9
;; 445 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 472 473 474 7 8 9 10
;; 446 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 444 445 446 447 448 449 450 451 452 453 454 456 457 458 460 461 462 463 464 465 466 468 469 470 7 8 9 10
;; 447 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 444 445 446 447 7 8 9
;; 448 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 444 445 446 448 7 8 9
;; 449 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85 437 445 446 449 450 451 452 7 8 9
;; 450 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 449 450 7 8 9
;; 451 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 449 451 7 8 9
;; 452 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 449 452 7 8 9
;; 453 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 453 7 9
;; 453 preferences: 8
;; 454 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 454 7 8
;; 454 preferences: 9
;; 456 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 456 457 458 7 8 9
;; 457 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 456 457 7 8 9
;; 458 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 456 458 460 461 462 463 7 8 9
;; 460 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 458 460 7 8 9
;; 461 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 458 461 7 8 9
;; 462 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 458 462 7 8 9
;; 463 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 458 463 7 8 9
;; 464 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 464 7 9
;; 465 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 465 7 8
;; 466 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 466 7 8
;; 468 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 468 7 10
;; 469 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 469 7 10
;; 470 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446 470 472 473 474 476 477 478 479 480 481 7 8 9 10
;; 472 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 470 472 7 8 10
;; 473 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 470 473 7 8 10
;; 474 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 470 474 476 477 478 7 8 9 10
;; 476 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 470 474 476 7 8 9 10
;; 477 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 470 474 477 7 8 9 10
;; 478 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 470 474 478 7 8 9 10
;; 479 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 470 479 7 8 10
;; 480 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 437 470 480 7 8 10
;; 481 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 437 470 481 7 8 10
;; 482 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 437 482 7 10
;; 482 preferences: 8
;; 483 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 483 7 8
;; 484 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 485 486 487 488 489 490 491 493 494 495 496 497 498 499 500 501 502 503 504 7 8 9 10 11
;; 485 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 485 7 10 11
;; 486 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 486 7 10 11
;; 487 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 488 489 490 491 493 494 495 496 497 498 499 500 501 502 503 7 8 9 10 11
;; 488 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 488 7 8 10 11
;; 489 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 489 7 8 10 11
;; 490 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 490 7 8 10 11
;; 491 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 491 493 494 495 7 8 9 10 11
;; 493 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 491 493 7 8 9 10 11
;; 494 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 491 494 7 8 9 10 11
;; 495 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 491 495 7 8 9 10 11
;; 496 conflicts: 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 496 497 498 499 500 7 8 9 10 11
;; 497 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 496 497 7 8 9 10 11
;; 498 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 496 498 7 8 9 10 11
;; 499 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 496 499 7 8 9 10 11
;; 500 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 496 500 7 8 9 10 11
;; 501 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 484 487 501 7 8 10 11
;; 501 preferences: 9
;; 502 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 484 487 502 7 8 10 11
;; 502 preferences: 9
;; 503 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 484 487 503 7 8 10 11
;; 503 preferences: 9
;; 504 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 484 504 7 10 11
;; 504 preferences: 8 9
;; 505 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 505 7 11
;; 505 preferences: 8 9
;; 506 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 507 508 509 510 511 512 514 515 516 517 518 519 520 521 522 528 7 8 9
;; 507 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 507 7 9
;; 508 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 508 509 510 7 8 9
;; 509 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 508 509 7 8 9
;; 510 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 508 510 7 8 9
;; 511 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 511 7 9
;; 512 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 512 7 8
;; 514 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 514 7 8
;; 515 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 516 517 518 519 520 521 522 7 8 9
;; 516 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 516 7 8
;; 517 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 517 518 519 7 8 9
;; 518 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 517 518 7 8 9
;; 519 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 517 519 520 521 522 7 8
;; 519 preferences: 9
;; 520 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 519 520 7 8
;; 521 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 519 521 7 8
;; 522 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 519 522 7 8
;; 528 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 528 7 8
;; 528 preferences: 9
;; 529 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 529 7 8
;; 529 preferences: 9
;; 530 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 531 532 533 534 535 536 537 538 7 8 9 10
;; 531 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 531 7 9 10
;; 532 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 532 533 534 7 8 9 10
;; 533 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 532 533 7 8 9 10
;; 534 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 532 534 7 8 9 10
;; 535 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 535 536 537 7 8 9 10
;; 536 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 535 536 7 8 9 10
;; 537 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 535 537 7 8 9 10
;; 538 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 530 538 7 9 10
;; 539 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 539 7 10
;; 540 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 540 7 8
;; 541 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 542 543 544 546 547 548 549 550 551 552 553 554 7 8 9 10 11
;; 542 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 542 7 9 11
;; 543 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 543 7 9 11
;; 544 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 544 546 547 548 549 550 7 8 9 10 11
;; 546 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 544 546 547 548 7 8 9 10 11
;; 547 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 544 546 547 7 8 9 10 11
;; 548 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 544 546 548 7 8 9 10 11
;; 549 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 544 549 7 8 9 11
;; 550 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 544 550 7 8 9 11
;; 551 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 551 552 553 7 8 9 11
;; 552 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 551 552 7 8 9 11
;; 553 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 551 553 7 8 9 11
;; 554 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 541 554 7 9 11
;; 555 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 555 7 11
;; 556 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 557 558 559 561 562 563 564 565 566 567 568 569 570 571 572 7 8 9 10 11
;; 557 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 557 7 10 11
;; 558 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 558 7 10 11
;; 559 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 561 562 563 564 565 566 567 568 7 8 9 10 11
;; 561 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 561 562 563 7 8 9 10 11
;; 562 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 561 562 7 8 9 10 11
;; 563 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 561 563 7 8 9 10 11
;; 564 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 564 565 566 7 8 9 10 11
;; 565 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 564 565 7 8 9 10 11
;; 566 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 564 566 7 8 9 10 11
;; 567 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 567 7 9 10 11
;; 568 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 559 568 7 9 10 11
;; 569 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 569 570 571 7 8 10 11
;; 570 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 569 570 7 8 10 11
;; 571 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 569 571 7 8 10 11
;; 572 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 556 572 7 10 11
;; 573 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 573 7 11
;; 574 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 574 575 576 577 578 579 580 581 583 584 585 586 587 588 589 590 591 592 593 595 596 597 599 600 601 602 605 606 608 609 610 611 612 613 615 616 617 618 619 620 621 625 626 627 628 7 8 9 10 11 12 13
;; 575 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 574 575 576 577 578 579 580 581 583 584 585 586 587 588 589 590 591 592 593 595 596 597 599 600 601 602 605 606 608 609 610 611 612 613 615 616 617 618 619 620 621 625 626 627 628 629 630 631 632 633 634 635 7 8 9 10 11 12 13
;; 576 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 574 575 576 7 11 12 13
;; 577 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 574 575 577 578 579 580 581 583 584 585 586 587 588 589 590 591 592 593 595 596 597 599 600 601 602 605 606 608 609 610 611 612 613 615 616 617 618 619 620 621 7 8 9 10 11 12 13
;; 578 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 578 7 8 11 12 13
;; 579 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 579 7 8 11 12 13
;; 580 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 580 7 8 11 12 13
;; 581 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 581 7 8 11 12 13
;; 583 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 583 7 9 11 12 13
;; 584 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 584 7 9 11 12 13
;; 585 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 82 84 85 574 575 577 585 586 587 588 7 8 9 11 12 13
;; 586 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 84 85 574 575 577 585 586 7 8 9 11 12 13
;; 586 preferences: 10
;; 587 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 84 85 574 575 577 585 587 7 8 9 11 12 13
;; 587 preferences: 10
;; 588 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 84 85 574 575 577 585 588 7 8 9 11 12 13
;; 588 preferences: 10
;; 589 conflicts: 43 44 46 49 52 53 54 55 58 59 60 72 73 76 77 78 79 80 81 84 85 574 575 577 589 590 591 7 9 10 11 12 13
;; 589 preferences: 8
;; 590 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 589 590 7 9 10 11 12 13
;; 590 preferences: 8
;; 591 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 589 591 592 593 595 596 597 599 600 601 602 7 8 9 10 11 12 13
;; 592 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 592 7 9 10 11 12 13
;; 592 preferences: 8
;; 593 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 593 7 8 10 11 12 13
;; 593 preferences: 9
;; 595 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 595 596 597 7 8 9 10 11 12 13
;; 596 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 595 596 7 8 9 10 11 12 13
;; 597 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 595 597 599 600 601 7 8 9 10 11 12 13
;; 599 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 597 599 7 8 9 10 11 12 13
;; 600 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 597 600 7 8 9 10 11 12 13
;; 601 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 597 601 7 8 9 10 11 12 13
;; 602 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 591 602 7 9 10 11 12 13
;; 605 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 605 7 9 11 12 13
;; 605 preferences: 8 10
;; 606 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 606 7 8 11 12 13
;; 606 preferences: 9 10
;; 608 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 608 609 7 8 9 11 12 13
;; 609 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 608 609 7 8 9 11 12 13
;; 610 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 610 7 9 11 12 13
;; 611 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 611 7 9 11 12 13
;; 612 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 612 7 9 11 12 13
;; 613 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 615 616 617 618 619 620 7 8 9 10 11 12 13
;; 615 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 615 7 8 9 11 12 13
;; 616 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 616 7 8 9 11 12 13
;; 617 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 617 618 619 7 8 9 10 11 12 13
;; 618 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 617 618 7 8 9 10 11 12 13
;; 619 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 617 619 7 8 9 10 11 12 13
;; 620 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 613 620 7 8 9 11 12 13
;; 621 conflicts: 43 44 46 49 52 53 54 55 58 59 60 73 76 77 78 79 80 81 84 85 574 575 577 621 625 626 627 7 9 11 12 13
;; 625 conflicts: 43 44 46 49 52 53 54 55 58 59 60 76 77 78 79 80 81 84 85 574 575 621 625 7 9 11 12 13
;; 625 preferences: 8
;; 626 conflicts: 43 44 46 49 52 53 54 55 58 59 60 76 77 78 79 80 81 84 85 574 575 621 626 7 9 11 12 13
;; 626 preferences: 8
;; 627 conflicts: 43 44 46 49 52 53 54 55 58 59 60 76 77 78 79 80 81 84 85 574 575 621 627 7 9 11 12 13
;; 627 preferences: 8
;; 628 conflicts: 43 44 46 49 52 53 54 55 58 59 60 76 77 78 79 80 81 84 85 574 575 628 7 9 12 13
;; 628 preferences: 8
;; 629 conflicts: 43 44 46 49 52 53 54 55 58 59 60 76 77 78 79 80 81 84 85 575 629 7 12 13
;; 629 preferences: 8
;; 630 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 575 630 631 632 633 634 635 637 638 639 640 641 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 7 8 9 10 11 12
;; 631 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 575 630 631 7 8 11 12
;; 632 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 575 630 632 7 8 11 12
;; 633 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 575 630 633 7 8 11 12
;; 634 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 575 630 634 7 8 11 12
;; 635 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 575 630 635 637 638 639 7 8 11 12
;; 637 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 635 637 7 8 11 12
;; 638 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 635 638 7 8 11 12
;; 639 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 635 639 7 8 11 12
;; 640 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 640 7 8 11
;; 641 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 641 7 8 11
;; 643 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 7 8 9 10 11
;; 644 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 644 7 10 11
;; 645 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 646 647 648 649 650 651 652 653 654 655 656 7 8 9 10 11
;; 646 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 646 7 8 10 11
;; 647 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 647 7 8 10 11
;; 648 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 648 7 8 10 11
;; 649 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 649 650 7 8 9 10 11
;; 650 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 649 650 7 8 9 10 11
;; 651 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 651 652 653 7 8 9 10 11
;; 652 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 651 652 7 8 9 10 11
;; 653 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 651 653 7 8 9 10 11
;; 654 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 79 80 81 84 85 630 643 645 654 7 8 10 11
;; 655 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 630 643 645 655 7 8 10 11
;; 656 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 630 643 645 656 7 8 10 11
;; 657 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 630 643 657 7 10 11
;; 657 preferences: 8
;; 658 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 643 658 7 11
;; 658 preferences: 8
;; 659 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 643 659 7 8
;; 660 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 643 660 662 663 664 665 7 8 9 10
;; 662 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 660 662 663 664 7 8 9 10
;; 663 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 660 662 663 7 8 9 10
;; 664 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 660 662 664 7 8 9 10
;; 665 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 660 665 7 9 10
;; 666 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 666 7 10
;; 666 preferences: 9
;; 667 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 668 669 670 671 672 673 674 675 7 8 9 10
;; 668 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 668 7 9 10
;; 669 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 669 670 671 7 8 9 10
;; 670 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 669 670 7 8 9 10
;; 671 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 669 671 7 8 9 10
;; 672 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 672 673 674 7 8 9 10
;; 673 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 672 673 7 8 9 10
;; 674 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 672 674 7 8 9 10
;; 675 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 667 675 7 9 10
;; 676 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 676 7 10
;; 677 conflicts: 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 677 7 8
;; 678 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 679 680 681 683 684 685 686 687 688 689 690 691 7 8 9 10 11
;; 679 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 679 7 9 11
;; 680 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 680 7 9 11
;; 681 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 681 683 684 685 686 687 7 8 9 10 11
;; 683 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 681 683 684 685 7 8 9 10 11
;; 684 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 681 683 684 7 8 9 10 11
;; 685 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 681 683 685 7 8 9 10 11
;; 686 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 681 686 7 8 9 11
;; 687 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 681 687 7 8 9 11
;; 688 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 688 689 690 7 8 9 11
;; 689 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 688 689 7 8 9 11
;; 690 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 688 690 7 8 9 11
;; 691 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 678 691 7 9 11
;; 691 preferences: 8 10
;; 692 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 692 7 11
;; 692 preferences: 8 10
;; 693 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 694 695 696 698 699 700 701 702 703 704 705 706 707 708 709 7 8 9 10 11
;; 694 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 694 7 10 11
;; 695 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 695 7 10 11
;; 696 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 696 698 699 700 701 702 703 704 705 7 8 9 10 11
;; 698 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 696 698 699 700 7 8 9 10 11
;; 699 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 696 698 699 7 8 9 10 11
;; 700 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 696 698 700 7 8 9 10 11
;; 701 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 696 701 702 703 7 8 9 10 11
;; 702 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 85 693 696 701 702 7 8 9 10 11
;; 703 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 696 701 703 7 8 9 10 11
;; 704 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 696 704 7 9 10 11
;; 705 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 696 705 7 9 10 11
;; 706 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 706 707 708 7 8 10 11
;; 707 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 706 707 7 8 10 11
;; 708 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 706 708 7 8 10 11
;; 709 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 693 709 7 10 11
;; 709 preferences: 8
;; 710 conflicts: 43 44 46 49 52 53 54 55 60 76 77 78 80 84 710 7 11
;; 710 preferences: 8 10
;; 711 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 84 711 712 713 714 716 717 718 719 720 721 722 723 725 726 727 728 729 730 731 732 733 734 735 736 738 739 740 741 742 743 744 745 7 8 9 10 11
;; 711 preferences: 13
;; 712 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 84 711 712 713 714 7 8 9 11
;; 713 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 84 711 712 713 7 8 9 11
;; 714 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 711 712 714 716 717 718 7 8 9 11
;; 716 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 711 714 716 7 8 9 11
;; 717 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 711 714 717 7 8 9 11
;; 718 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 711 714 718 7 8 9 11
;; 719 conflicts: 43 44 46 49 52 53 54 55 76 77 78 80 711 719 720 721 7 8 9 11
;; 720 conflicts: 43 44 46 49 52 53 54 55 76 77 78 711 719 720 7 8 9 11
;; 721 conflicts: 43 44 46 49 52 53 54 55 76 77 78 711 719 721 7 8 9 11
;; 722 conflicts: 43 44 46 49 52 53 54 55 76 77 78 711 722 7 9 11
;; 722 preferences: 8
;; 723 conflicts: 43 44 46 49 52 53 54 55 76 77 78 711 723 7 8 11
;; 725 conflicts: 43 44 46 49 52 54 55 76 77 78 711 725 726 7 8 9 11
;; 725 preferences: 10
;; 726 conflicts: 43 44 46 49 52 55 76 77 78 711 725 726 7 8 9 11
;; 726 preferences: 10
;; 727 conflicts: 43 44 46 49 52 55 76 77 78 711 727 7 9 11
;; 727 preferences: 8 10
;; 728 conflicts: 43 44 46 49 52 55 76 77 78 711 728 7 9 11
;; 728 preferences: 8 10
;; 729 conflicts: 43 44 46 49 52 55 76 77 78 711 729 7 9 11
;; 729 preferences: 8 10
;; 730 conflicts: 43 44 46 49 52 55 77 78 711 730 731 732 733 734 735 7 8 9 11
;; 730 preferences: 10
;; 731 conflicts: 43 44 46 49 52 55 77 78 711 730 731 7 8 9 11
;; 732 conflicts: 43 44 46 49 52 55 77 78 711 730 732 7 8 9 11
;; 733 conflicts: 43 44 46 49 52 55 78 711 730 733 7 8 9 11
;; 734 conflicts: 43 44 46 49 52 55 78 711 730 734 7 8 9 11
;; 735 conflicts: 43 46 49 52 55 78 711 730 735 7 8 9 11
;; 735 preferences: 10
;; 736 conflicts: 43 46 49 52 55 78 711 736 738 739 740 741 742 743 744 7 8 9 10 11
;; 738 conflicts: 43 46 49 55 78 711 736 738 739 740 7 8 9 10 11
;; 739 conflicts: 43 49 55 78 711 736 738 739 7 8 9 10 11
;; 739 preferences: 12 14 15
;; 740 conflicts: 43 49 78 711 736 738 740 7 8 9 10 11
;; 740 preferences: 12 14 15
;; 741 conflicts: 43 49 78 711 736 741 7 8 9 11
;; 741 preferences: 10 12 14 15
;; 742 conflicts: 43 49 711 736 742 7 8 9 11
;; 742 preferences: 10 12 14 15
;; 743 conflicts: 43 49 711 736 743 7 8 9 11
;; 743 preferences: 10 12 14 15
;; 744 conflicts: 49 711 736 744 7 8 9 11
;; 744 preferences: 10 12 14 15
;; 745 conflicts: 49 711 745 7 9 11
;; 745 preferences: 8 10 12 13 14 15
;; 746 conflicts: 49 746 7 11
;; 746 preferences: 8 9 10 12 13 14 15

Spilling for insn 4.
Spilling for insn 6.
Using reg 8 for reload 0
Spilling for insn 8.
Using reg 8 for reload 0
Spilling for insn 10.
Using reg 8 for reload 0
Spilling for insn 12.
Using reg 8 for reload 0
Spilling for insn 16.
Using reg 8 for reload 0
Spilling for insn 18.
Spilling for insn 27.
Spilling for insn 39.
Using reg 8 for reload 0
Spilling for insn 50.
Spilling for insn 51.
Spilling for insn 53.
Using reg 8 for reload 0
Spilling for insn 54.
Spilling for insn 55.
Spilling for insn 57.
Using reg 8 for reload 0
Spilling for insn 58.
Spilling for insn 59.
Spilling for insn 61.
Spilling for insn 62.
Spilling for insn 64.
Spilling for insn 72.
Spilling for insn 82.
Spilling for insn 89.
Spilling for insn 99.
Using reg 8 for reload 0
Spilling for insn 112.
Spilling for insn 113.
Spilling for insn 115.
Spilling for insn 117.
Using reg 9 for reload 0
Spilling for insn 130.
Spilling for insn 131.
Spilling for insn 135.
Spilling for insn 140.
Using reg 8 for reload 0
Spilling for insn 141.
Using reg 8 for reload 0
Spilling for insn 143.
Spilling for insn 145.
Using reg 8 for reload 0
Spilling for insn 146.
Using reg 8 for reload 0
Spilling for insn 147.
Using reg 8 for reload 0
Spilling for insn 148.
Spilling for insn 149.
Using reg 9 for reload 0
Spilling for insn 164.
Spilling for insn 165.
Using reg 0 for reload 0
Spilling for insn 170.
Spilling for insn 174.
Using reg 8 for reload 0
Spilling for insn 177.
Spilling for insn 178.
Spilling for insn 183.
Spilling for insn 191.
Spilling for insn 192.
Using reg 0 for reload 0
Spilling for insn 197.
Using reg 8 for reload 0
Spilling for insn 205.
Using reg 8 for reload 0
Spilling for insn 215.
Spilling for insn 216.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 222.
Spilling for insn 224.
Spilling for insn 229.
Using reg 0 for reload 0
Spilling for insn 237.
Spilling for insn 239.
Spilling for insn 244.
Using reg 0 for reload 0
Spilling for insn 248.
Spilling for insn 249.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 257.
Spilling for insn 258.
Spilling for insn 259.
Spilling for insn 260.
Spilling for insn 262.
Spilling for insn 263.
Spilling for insn 264.
Spilling for insn 266.
Using reg 8 for reload 0
Spilling for insn 267.
Spilling for insn 270.
Spilling for insn 271.
Spilling for insn 272.
Spilling for insn 275.
Using reg 0 for reload 0
Spilling for insn 276.
Using reg 8 for reload 0
Spilling for insn 277.
Using reg 8 for reload 0
Spilling for insn 278.
Spilling for insn 279.
Spilling for insn 282.
Spilling for insn 283.
Spilling for insn 284.
Spilling for insn 292.
Spilling for insn 293.
Spilling for insn 294.
Spilling for insn 295.
Spilling for insn 296.
Spilling for insn 297.
Spilling for insn 300.
Spilling for insn 301.
Spilling for insn 306.
Spilling for insn 314.
Spilling for insn 315.
Using reg 0 for reload 0
Spilling for insn 320.
Using reg 8 for reload 0
Spilling for insn 327.
Spilling for insn 337.
Using reg 9 for reload 0
Spilling for insn 338.
Using reg 9 for reload 0
Spilling for insn 339.
Spilling for insn 345.
Spilling for insn 351.
Spilling for insn 352.
Spilling for insn 353.
Spilling for insn 360.
Spilling for insn 361.
Spilling for insn 362.
Using reg 8 for reload 0
Spilling for insn 363.
Spilling for insn 364.
Spilling for insn 365.
Spilling for insn 366.
Spilling for insn 369.
Spilling for insn 370.
Spilling for insn 371.
Spilling for insn 375.
Spilling for insn 376.
Spilling for insn 378.
Spilling for insn 379.
Spilling for insn 380.
Spilling for insn 388.
Spilling for insn 389.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 396.
Spilling for insn 397.
Spilling for insn 398.
Spilling for insn 400.
Spilling for insn 402.
Spilling for insn 403.
Spilling for insn 405.
Spilling for insn 407.
Spilling for insn 408.
Spilling for insn 410.
Spilling for insn 412.
Spilling for insn 413.
Spilling for insn 414.
Spilling for insn 416.
Spilling for insn 418.
Spilling for insn 420.
Spilling for insn 421.
Spilling for insn 422.
Spilling for insn 424.
Spilling for insn 427.
Spilling for insn 429.
Spilling for insn 431.
Spilling for insn 433.
Spilling for insn 437.
Spilling for insn 439.
Spilling for insn 440.
Spilling for insn 442.
Spilling for insn 444.
Spilling for insn 447.
Spilling for insn 448.
Spilling for insn 449.
Spilling for insn 450.
Using reg 9 for reload 0
Spilling for insn 452.
Spilling for insn 455.
Spilling for insn 456.
Spilling for insn 461.
Spilling for insn 462.
Spilling for insn 465.
Spilling for insn 467.
Using reg 9 for reload 0
Spilling for insn 469.
Spilling for insn 477.
Spilling for insn 480.
Spilling for insn 482.
Spilling for insn 484.
Spilling for insn 492.
Spilling for insn 493.
Spilling for insn 494.
Using reg 8 for reload 0
Spilling for insn 495.
Spilling for insn 496.
Spilling for insn 497.
Spilling for insn 498.
Spilling for insn 499.
Spilling for insn 501.
Spilling for insn 503.
Spilling for insn 506.
Spilling for insn 507.
Spilling for insn 511.
Spilling for insn 513.
Spilling for insn 515.
Spilling for insn 517.
Spilling for insn 520.
Spilling for insn 521.
Spilling for insn 525.
Spilling for insn 527.
Spilling for insn 529.
Spilling for insn 531.
Spilling for insn 532.
Spilling for insn 533.
Spilling for insn 535.
Spilling for insn 537.
Spilling for insn 540.
Spilling for insn 541.
Spilling for insn 543.
Spilling for insn 546.
Spilling for insn 548.
Spilling for insn 550.
Spilling for insn 556.
Spilling for insn 558.
Spilling for insn 559.
Spilling for insn 561.
Spilling for insn 563.
Spilling for insn 565.
Spilling for insn 568.
Spilling for insn 570.
Spilling for insn 572.
Using reg 9 for reload 0
Spilling for insn 574.
Spilling for insn 577.
Spilling for insn 578.
Spilling for insn 586.
Spilling for insn 587.
Spilling for insn 590.
Spilling for insn 592.
Using reg 9 for reload 0
Spilling for insn 594.
Spilling for insn 605.
Spilling for insn 608.
Spilling for insn 610.
Spilling for insn 612.
Spilling for insn 617.
Spilling for insn 618.
Using reg 0 for reload 1
Using reg 8 for reload 0
Spilling for insn 625.
Using reg 8 for reload 0
Spilling for insn 626.
Using reg 8 for reload 0
Spilling for insn 627.
Spilling for insn 628.
Spilling for insn 630.
Using reg 8 for reload 0
Spilling for insn 631.
Using reg 8 for reload 0
Spilling for insn 632.
Spilling for insn 633.
Spilling for insn 637.
Spilling for insn 638.
Spilling for insn 642.
Using reg 0 for reload 1
Using reg 8 for reload 0
Spilling for insn 647.
Spilling for insn 648.
Spilling for insn 649.
Spilling for insn 650.
Using reg 8 for reload 0
Spilling for insn 655.
Spilling for insn 656.
Spilling for insn 657.
Spilling for insn 658.
Spilling for insn 659.
Spilling for insn 662.
Spilling for insn 663.
Using reg 8 for reload 0
Spilling for insn 673.
Spilling for insn 674.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 678.
Using reg 8 for reload 0
Spilling for insn 680.
Spilling for insn 681.
Spilling for insn 683.
Spilling for insn 687.
Using reg 8 for reload 0
Spilling for insn 688.
Spilling for insn 689.
Spilling for insn 690.
Spilling for insn 691.
Spilling for insn 692.
Spilling for insn 694.
Spilling for insn 698.
Spilling for insn 699.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 704.
Spilling for insn 705.
Spilling for insn 706.
Spilling for insn 707.
Using reg 8 for reload 0
Spilling for insn 712.
Spilling for insn 713.
Spilling for insn 714.
Spilling for insn 715.
Spilling for insn 716.
Spilling for insn 719.
Spilling for insn 720.
Using reg 8 for reload 0
Spilling for insn 724.
Spilling for insn 725.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 729.
Using reg 8 for reload 0
Spilling for insn 730.
Using reg 8 for reload 0
Spilling for insn 731.
Spilling for insn 734.
Spilling for insn 735.
Spilling for insn 739.
Using reg 8 for reload 0
Spilling for insn 740.
Using reg 8 for reload 0
Spilling for insn 741.
Spilling for insn 744.
Spilling for insn 745.
Spilling for insn 746.
Spilling for insn 747.
Spilling for insn 749.
Spilling for insn 755.
Spilling for insn 756.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 760.
Spilling for insn 761.
Spilling for insn 764.
Spilling for insn 765.
Spilling for insn 766.
Spilling for insn 770.
Spilling for insn 775.
Spilling for insn 776.
Spilling for insn 777.
Spilling for insn 781.
Spilling for insn 784.
Spilling for insn 785.
Spilling for insn 790.
Spilling for insn 791.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 795.
Spilling for insn 796.
Spilling for insn 797.
Spilling for insn 800.
Spilling for insn 801.
Spilling for insn 802.
Spilling for insn 806.
Spilling for insn 811.
Spilling for insn 812.
Spilling for insn 813.
Spilling for insn 816.
Spilling for insn 817.
Spilling for insn 822.
Spilling for insn 823.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 828.
Using reg 0 for reload 0
Spilling for insn 833.
Spilling for insn 834.
Spilling for insn 835.
Spilling for insn 837.
Spilling for insn 838.
Using reg 8 for reload 0
Spilling for insn 842.
Spilling for insn 843.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 848.
Spilling for insn 849.
Spilling for insn 850.
Spilling for insn 856.
Spilling for insn 857.
Spilling for insn 858.
Spilling for insn 859.
Spilling for insn 860.
Spilling for insn 863.
Spilling for insn 869.
Using reg 8 for reload 0
Spilling for insn 870.
Using reg 8 for reload 0
Spilling for insn 871.
Spilling for insn 872.
Spilling for insn 873.
Spilling for insn 874.
Spilling for insn 877.
Spilling for insn 880.
Spilling for insn 881.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 887.
Using reg 8 for reload 0
Spilling for insn 888.
Using reg 8 for reload 0
Spilling for insn 891.
Spilling for insn 892.
Spilling for insn 895.
Spilling for insn 900.
Using reg 8 for reload 0
Spilling for insn 904.
Spilling for insn 905.
Spilling for insn 906.
Spilling for insn 907.
Spilling for insn 911.
Spilling for insn 915.
Spilling for insn 916.
Using reg 8 for reload 0
Spilling for insn 917.
Spilling for insn 918.
Spilling for insn 919.
Spilling for insn 921.
Spilling for insn 923.
Spilling for insn 925.
Spilling for insn 927.
Spilling for insn 931.
Spilling for insn 932.
Spilling for insn 933.
Spilling for insn 935.
Spilling for insn 936.
Spilling for insn 938.
Spilling for insn 940.
Spilling for insn 942.
Spilling for insn 945.
Spilling for insn 946.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 952.
Spilling for insn 953.
Spilling for insn 954.
Spilling for insn 956.
Spilling for insn 957.
Spilling for insn 958.
Spilling for insn 960.
Spilling for insn 961.
Spilling for insn 962.
Spilling for insn 965.
Spilling for insn 967.
Spilling for insn 969.
Spilling for insn 974.
Spilling for insn 975.
Spilling for insn 976.
Spilling for insn 977.
Spilling for insn 978.
Spilling for insn 979.
Spilling for insn 980.
Spilling for insn 981.
Spilling for insn 984.
Spilling for insn 985.
Spilling for insn 986.
Spilling for insn 988.
Spilling for insn 989.
Spilling for insn 990.
Spilling for insn 991.
Spilling for insn 994.
Spilling for insn 998.
Spilling for insn 1002.
Spilling for insn 1003.
Spilling for insn 1004.
Spilling for insn 1005.
Spilling for insn 1006.
Spilling for insn 1008.
Spilling for insn 1010.
Spilling for insn 1014.
Spilling for insn 1015.
Spilling for insn 1016.
Spilling for insn 1018.
Spilling for insn 1019.
Spilling for insn 1023.
Spilling for insn 1026.
Spilling for insn 1027.
Using reg 0 for reload 1
Using reg 12 for reload 0
Spilling for insn 1037.
Spilling for insn 1040.
Spilling for insn 1045.
Spilling for insn 1046.
Spilling for insn 1047.
Spilling for insn 1048.
Spilling for insn 1049.
Spilling for insn 1051.
Spilling for insn 1052.
Spilling for insn 1056.
Spilling for insn 1060.
Spilling for insn 1061.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1066.
Spilling for insn 1067.
Spilling for insn 1068.
Spilling for insn 1069.
Spilling for insn 1072.
Spilling for insn 1073.
Spilling for insn 1074.
Spilling for insn 1076.
Spilling for insn 1078.
Spilling for insn 1079.
Spilling for insn 1083.
Spilling for insn 1088.
Spilling for insn 1089.
Spilling for insn 1090.
Spilling for insn 1091.
Spilling for insn 1094.
Spilling for insn 1095.
Spilling for insn 1096.
Spilling for insn 1098.
Spilling for insn 1099.
Spilling for insn 1101.
Spilling for insn 1103.
Spilling for insn 1104.
Spilling for insn 1108.
Spilling for insn 1112.
Spilling for insn 1113.
Spilling for insn 1114.
Spilling for insn 1115.
Spilling for insn 1116.
Spilling for insn 1117.
Spilling for insn 1121.
Spilling for insn 1126.
Spilling for insn 1127.
Spilling for insn 1128.
Spilling for insn 1129.
Spilling for insn 1130.
Spilling for insn 1131.
Spilling for insn 1133.
Spilling for insn 1134.
Spilling for insn 1136.
Spilling for insn 1138.
Spilling for insn 1142.
Spilling for insn 1143.
Spilling for insn 1144.
Spilling for insn 1146.
Spilling for insn 1147.
Spilling for insn 1148.
Spilling for insn 1153.
Spilling for insn 1155.
Spilling for insn 1159.
Spilling for insn 1160.
Spilling for insn 1162.
Spilling for insn 1163.
Spilling for insn 1164.
Spilling for insn 1167.
Spilling for insn 1168.
Spilling for insn 1169.
Spilling for insn 1170.
Spilling for insn 1171.
Spilling for insn 1178.
Spilling for insn 1179.
Spilling for insn 1183.
Spilling for insn 1186.
Spilling for insn 1188.
Spilling for insn 1189.
Spilling for insn 1190.
Spilling for insn 1191.
Spilling for insn 1192.
Spilling for insn 1194.
Spilling for insn 1195.
Spilling for insn 1196.
Spilling for insn 1200.
Spilling for insn 1204.
Spilling for insn 1205.
Spilling for insn 1206.
Spilling for insn 1207.
Spilling for insn 1208.
Spilling for insn 1209.
Spilling for insn 1210.
Spilling for insn 1211.
Spilling for insn 1213.
Spilling for insn 1214.
Spilling for insn 1216.
Spilling for insn 1217.
Spilling for insn 1221.
Spilling for insn 1224.
Spilling for insn 1225.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1230.
Spilling for insn 1232.
Spilling for insn 1233.
Spilling for insn 1234.
Spilling for insn 1238.
Spilling for insn 1243.
Spilling for insn 1244.
Spilling for insn 1245.
Spilling for insn 1246.
Spilling for insn 1247.
Spilling for insn 1249.
Spilling for insn 1250.
Spilling for insn 1254.
Spilling for insn 1258.
Spilling for insn 1259.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1264.
Spilling for insn 1265.
Spilling for insn 1266.
Spilling for insn 1267.
Spilling for insn 1270.
Spilling for insn 1271.
Spilling for insn 1272.
Spilling for insn 1274.
Spilling for insn 1276.
Spilling for insn 1277.
Spilling for insn 1281.
Spilling for insn 1286.
Spilling for insn 1287.
Spilling for insn 1288.
Spilling for insn 1289.
Spilling for insn 1292.
Spilling for insn 1293.
Spilling for insn 1294.
Spilling for insn 1296.
Spilling for insn 1297.
Spilling for insn 1299.
Spilling for insn 1301.
Spilling for insn 1302.
Spilling for insn 1306.
Spilling for insn 1310.
Spilling for insn 1311.
Spilling for insn 1312.
Spilling for insn 1313.
Spilling for insn 1315.
Spilling for insn 1316.
Spilling for insn 1317.
Spilling for insn 1319.
Spilling for insn 1320.
Spilling for insn 1322.
Spilling for insn 1324.
Spilling for insn 1328.
Spilling for insn 1329.
Spilling for insn 1331.
Spilling for insn 1332.
Spilling for insn 1333.
Spilling for insn 1334.
Spilling for insn 1335.
Spilling for insn 1336.
Spilling for insn 1337.
Spilling for insn 1338.
Spilling for insn 1342.
Spilling for insn 1343.
Spilling for insn 1344.
Spilling for insn 1346.
Spilling for insn 1347.
Spilling for insn 1348.
Spilling for insn 1352.
Spilling for insn 4.
Spilling for insn 6.
Using reg 8 for reload 0
Spilling for insn 8.
Using reg 8 for reload 0
Spilling for insn 10.
Using reg 8 for reload 0
Spilling for insn 12.
Using reg 8 for reload 0
Spilling for insn 16.
Using reg 8 for reload 0
Spilling for insn 18.
Spilling for insn 27.
Spilling for insn 39.
Using reg 8 for reload 0
Spilling for insn 50.
Spilling for insn 51.
Spilling for insn 53.
Using reg 8 for reload 0
Spilling for insn 54.
Spilling for insn 55.
Spilling for insn 57.
Using reg 8 for reload 0
Spilling for insn 58.
Spilling for insn 59.
Spilling for insn 61.
Spilling for insn 62.
Spilling for insn 64.
Spilling for insn 72.
Spilling for insn 82.
Spilling for insn 89.
Spilling for insn 99.
Using reg 8 for reload 0
Spilling for insn 112.
Spilling for insn 113.
Spilling for insn 115.
Spilling for insn 117.
Using reg 9 for reload 0
Spilling for insn 130.
Spilling for insn 131.
Spilling for insn 135.
Spilling for insn 140.
Using reg 8 for reload 0
Spilling for insn 141.
Using reg 8 for reload 0
Spilling for insn 143.
Spilling for insn 145.
Using reg 8 for reload 0
Spilling for insn 146.
Using reg 8 for reload 0
Spilling for insn 147.
Using reg 8 for reload 0
Spilling for insn 148.
Spilling for insn 149.
Using reg 9 for reload 0
Spilling for insn 164.
Spilling for insn 165.
Using reg 0 for reload 0
Spilling for insn 170.
Spilling for insn 174.
Using reg 8 for reload 0
Spilling for insn 177.
Spilling for insn 178.
Spilling for insn 183.
Spilling for insn 191.
Spilling for insn 192.
Using reg 0 for reload 0
Spilling for insn 197.
Using reg 8 for reload 0
Spilling for insn 205.
Using reg 8 for reload 0
Spilling for insn 215.
Spilling for insn 216.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 222.
Spilling for insn 224.
Spilling for insn 229.
Using reg 0 for reload 0
Spilling for insn 237.
Spilling for insn 239.
Spilling for insn 244.
Using reg 0 for reload 0
Spilling for insn 248.
Spilling for insn 249.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 257.
Spilling for insn 258.
Spilling for insn 259.
Spilling for insn 260.
Spilling for insn 262.
Spilling for insn 263.
Spilling for insn 264.
Spilling for insn 266.
Using reg 8 for reload 0
Spilling for insn 267.
Spilling for insn 270.
Spilling for insn 271.
Spilling for insn 272.
Spilling for insn 275.
Using reg 0 for reload 0
Spilling for insn 276.
Using reg 8 for reload 0
Spilling for insn 277.
Using reg 8 for reload 0
Spilling for insn 278.
Spilling for insn 279.
Spilling for insn 282.
Spilling for insn 283.
Spilling for insn 284.
Spilling for insn 292.
Spilling for insn 293.
Spilling for insn 294.
Spilling for insn 295.
Spilling for insn 296.
Spilling for insn 297.
Spilling for insn 300.
Spilling for insn 301.
Spilling for insn 306.
Spilling for insn 314.
Spilling for insn 315.
Using reg 0 for reload 0
Spilling for insn 320.
Using reg 8 for reload 0
Spilling for insn 327.
Spilling for insn 337.
Using reg 9 for reload 0
Spilling for insn 338.
Using reg 9 for reload 0
Spilling for insn 339.
Spilling for insn 345.
Spilling for insn 351.
Spilling for insn 352.
Spilling for insn 353.
Spilling for insn 360.
Spilling for insn 361.
Spilling for insn 362.
Using reg 8 for reload 0
Spilling for insn 363.
Spilling for insn 364.
Spilling for insn 365.
Spilling for insn 366.
Spilling for insn 369.
Spilling for insn 370.
Spilling for insn 371.
Spilling for insn 375.
Spilling for insn 376.
Spilling for insn 378.
Spilling for insn 379.
Spilling for insn 380.
Spilling for insn 388.
Spilling for insn 389.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 396.
Spilling for insn 397.
Spilling for insn 398.
Spilling for insn 400.
Spilling for insn 402.
Spilling for insn 403.
Spilling for insn 405.
Spilling for insn 407.
Spilling for insn 408.
Spilling for insn 410.
Spilling for insn 412.
Spilling for insn 413.
Spilling for insn 414.
Spilling for insn 416.
Spilling for insn 418.
Spilling for insn 420.
Spilling for insn 421.
Spilling for insn 422.
Spilling for insn 424.
Spilling for insn 427.
Spilling for insn 429.
Spilling for insn 431.
Spilling for insn 433.
Spilling for insn 437.
Spilling for insn 439.
Spilling for insn 440.
Spilling for insn 442.
Spilling for insn 444.
Spilling for insn 447.
Spilling for insn 448.
Spilling for insn 449.
Spilling for insn 450.
Using reg 9 for reload 0
Spilling for insn 452.
Spilling for insn 455.
Spilling for insn 456.
Spilling for insn 461.
Spilling for insn 462.
Spilling for insn 465.
Spilling for insn 467.
Using reg 9 for reload 0
Spilling for insn 469.
Spilling for insn 477.
Spilling for insn 480.
Spilling for insn 482.
Spilling for insn 484.
Spilling for insn 492.
Spilling for insn 493.
Spilling for insn 494.
Using reg 8 for reload 0
Spilling for insn 495.
Spilling for insn 496.
Spilling for insn 497.
Spilling for insn 498.
Spilling for insn 499.
Spilling for insn 501.
Spilling for insn 503.
Spilling for insn 506.
Spilling for insn 507.
Spilling for insn 511.
Spilling for insn 513.
Spilling for insn 515.
Spilling for insn 517.
Spilling for insn 520.
Spilling for insn 521.
Spilling for insn 525.
Spilling for insn 527.
Spilling for insn 529.
Spilling for insn 531.
Spilling for insn 532.
Spilling for insn 533.
Spilling for insn 535.
Spilling for insn 537.
Spilling for insn 540.
Spilling for insn 541.
Spilling for insn 543.
Spilling for insn 546.
Spilling for insn 548.
Spilling for insn 550.
Spilling for insn 556.
Spilling for insn 558.
Spilling for insn 559.
Spilling for insn 561.
Spilling for insn 563.
Spilling for insn 565.
Spilling for insn 568.
Spilling for insn 570.
Spilling for insn 572.
Using reg 9 for reload 0
Spilling for insn 574.
Spilling for insn 577.
Spilling for insn 578.
Spilling for insn 586.
Spilling for insn 587.
Spilling for insn 590.
Spilling for insn 592.
Using reg 9 for reload 0
Spilling for insn 594.
Spilling for insn 605.
Spilling for insn 608.
Spilling for insn 610.
Spilling for insn 612.
Spilling for insn 617.
Spilling for insn 618.
Using reg 0 for reload 1
Using reg 8 for reload 0
Spilling for insn 625.
Using reg 8 for reload 0
Spilling for insn 626.
Using reg 8 for reload 0
Spilling for insn 627.
Spilling for insn 628.
Spilling for insn 630.
Using reg 8 for reload 0
Spilling for insn 631.
Using reg 8 for reload 0
Spilling for insn 632.
Spilling for insn 633.
Spilling for insn 637.
Spilling for insn 638.
Spilling for insn 642.
Using reg 0 for reload 1
Using reg 8 for reload 0
Spilling for insn 647.
Spilling for insn 648.
Spilling for insn 649.
Spilling for insn 650.
Using reg 8 for reload 0
Spilling for insn 655.
Spilling for insn 656.
Spilling for insn 657.
Spilling for insn 658.
Spilling for insn 659.
Spilling for insn 662.
Spilling for insn 663.
Using reg 8 for reload 0
Spilling for insn 673.
Spilling for insn 674.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 678.
Using reg 8 for reload 0
Spilling for insn 680.
Spilling for insn 681.
Spilling for insn 683.
Spilling for insn 687.
Using reg 8 for reload 0
Spilling for insn 688.
Spilling for insn 689.
Spilling for insn 690.
Spilling for insn 691.
Spilling for insn 692.
Spilling for insn 694.
Spilling for insn 698.
Spilling for insn 699.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 704.
Spilling for insn 705.
Spilling for insn 706.
Spilling for insn 707.
Using reg 8 for reload 0
Spilling for insn 712.
Spilling for insn 713.
Spilling for insn 714.
Spilling for insn 715.
Spilling for insn 716.
Spilling for insn 719.
Spilling for insn 720.
Using reg 8 for reload 0
Spilling for insn 724.
Spilling for insn 725.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 729.
Using reg 8 for reload 0
Spilling for insn 730.
Using reg 8 for reload 0
Spilling for insn 731.
Spilling for insn 734.
Spilling for insn 735.
Spilling for insn 739.
Using reg 8 for reload 0
Spilling for insn 740.
Using reg 8 for reload 0
Spilling for insn 741.
Spilling for insn 744.
Spilling for insn 745.
Spilling for insn 746.
Spilling for insn 747.
Spilling for insn 749.
Spilling for insn 755.
Spilling for insn 756.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 760.
Spilling for insn 761.
Spilling for insn 764.
Spilling for insn 765.
Spilling for insn 766.
Spilling for insn 770.
Spilling for insn 775.
Spilling for insn 776.
Spilling for insn 777.
Spilling for insn 781.
Spilling for insn 784.
Spilling for insn 785.
Spilling for insn 790.
Spilling for insn 791.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 795.
Spilling for insn 796.
Spilling for insn 797.
Spilling for insn 800.
Spilling for insn 801.
Spilling for insn 802.
Spilling for insn 806.
Spilling for insn 811.
Spilling for insn 812.
Spilling for insn 813.
Spilling for insn 816.
Spilling for insn 817.
Spilling for insn 822.
Spilling for insn 823.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 828.
Using reg 0 for reload 0
Spilling for insn 833.
Spilling for insn 834.
Spilling for insn 835.
Spilling for insn 837.
Spilling for insn 838.
Using reg 8 for reload 0
Spilling for insn 842.
Spilling for insn 843.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 848.
Spilling for insn 849.
Spilling for insn 850.
Spilling for insn 856.
Spilling for insn 857.
Spilling for insn 858.
Spilling for insn 859.
Spilling for insn 860.
Spilling for insn 863.
Spilling for insn 869.
Using reg 8 for reload 0
Spilling for insn 870.
Using reg 8 for reload 0
Spilling for insn 871.
Spilling for insn 872.
Spilling for insn 873.
Spilling for insn 874.
Spilling for insn 877.
Spilling for insn 880.
Spilling for insn 881.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 887.
Using reg 8 for reload 0
Spilling for insn 888.
Using reg 8 for reload 0
Spilling for insn 891.
Spilling for insn 892.
Spilling for insn 895.
Spilling for insn 900.
Using reg 8 for reload 0
Spilling for insn 904.
Spilling for insn 905.
Spilling for insn 906.
Spilling for insn 907.
Spilling for insn 911.
Spilling for insn 915.
Spilling for insn 916.
Using reg 8 for reload 0
Spilling for insn 917.
Spilling for insn 918.
Spilling for insn 919.
Spilling for insn 921.
Spilling for insn 923.
Spilling for insn 925.
Spilling for insn 927.
Spilling for insn 931.
Spilling for insn 932.
Spilling for insn 933.
Spilling for insn 935.
Spilling for insn 936.
Spilling for insn 938.
Spilling for insn 940.
Spilling for insn 942.
Spilling for insn 945.
Spilling for insn 946.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 952.
Spilling for insn 953.
Spilling for insn 954.
Spilling for insn 956.
Spilling for insn 957.
Spilling for insn 958.
Spilling for insn 960.
Spilling for insn 961.
Spilling for insn 962.
Spilling for insn 965.
Spilling for insn 967.
Spilling for insn 969.
Spilling for insn 974.
Spilling for insn 975.
Spilling for insn 976.
Spilling for insn 977.
Spilling for insn 978.
Spilling for insn 979.
Spilling for insn 980.
Spilling for insn 981.
Spilling for insn 984.
Spilling for insn 985.
Spilling for insn 986.
Spilling for insn 988.
Spilling for insn 989.
Spilling for insn 990.
Spilling for insn 991.
Spilling for insn 994.
Spilling for insn 998.
Spilling for insn 1002.
Spilling for insn 1003.
Spilling for insn 1004.
Spilling for insn 1005.
Spilling for insn 1006.
Spilling for insn 1008.
Spilling for insn 1010.
Spilling for insn 1014.
Spilling for insn 1015.
Spilling for insn 1016.
Spilling for insn 1018.
Spilling for insn 1019.
Spilling for insn 1023.
Spilling for insn 1026.
Spilling for insn 1027.
Using reg 0 for reload 1
Using reg 12 for reload 0
Spilling for insn 1037.
Spilling for insn 1040.
Spilling for insn 1045.
Spilling for insn 1046.
Spilling for insn 1047.
Spilling for insn 1048.
Spilling for insn 1049.
Spilling for insn 1051.
Spilling for insn 1052.
Spilling for insn 1056.
Spilling for insn 1060.
Spilling for insn 1061.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1066.
Spilling for insn 1067.
Spilling for insn 1068.
Spilling for insn 1069.
Spilling for insn 1072.
Spilling for insn 1073.
Spilling for insn 1074.
Spilling for insn 1076.
Spilling for insn 1078.
Spilling for insn 1079.
Spilling for insn 1083.
Spilling for insn 1088.
Spilling for insn 1089.
Spilling for insn 1090.
Spilling for insn 1091.
Spilling for insn 1094.
Spilling for insn 1095.
Spilling for insn 1096.
Spilling for insn 1098.
Spilling for insn 1099.
Spilling for insn 1101.
Spilling for insn 1103.
Spilling for insn 1104.
Spilling for insn 1108.
Spilling for insn 1112.
Spilling for insn 1113.
Spilling for insn 1114.
Spilling for insn 1115.
Spilling for insn 1116.
Spilling for insn 1117.
Spilling for insn 1121.
Spilling for insn 1126.
Spilling for insn 1127.
Spilling for insn 1128.
Spilling for insn 1129.
Spilling for insn 1130.
Spilling for insn 1131.
Spilling for insn 1133.
Spilling for insn 1134.
Spilling for insn 1136.
Spilling for insn 1138.
Spilling for insn 1142.
Spilling for insn 1143.
Spilling for insn 1144.
Spilling for insn 1146.
Spilling for insn 1147.
Spilling for insn 1148.
Spilling for insn 1153.
Spilling for insn 1155.
Spilling for insn 1159.
Spilling for insn 1160.
Spilling for insn 1162.
Spilling for insn 1163.
Spilling for insn 1164.
Spilling for insn 1167.
Spilling for insn 1168.
Spilling for insn 1169.
Spilling for insn 1170.
Spilling for insn 1171.
Spilling for insn 1178.
Spilling for insn 1179.
Spilling for insn 1183.
Spilling for insn 1186.
Spilling for insn 1188.
Spilling for insn 1189.
Spilling for insn 1190.
Spilling for insn 1191.
Spilling for insn 1192.
Spilling for insn 1194.
Spilling for insn 1195.
Spilling for insn 1196.
Spilling for insn 1200.
Spilling for insn 1204.
Spilling for insn 1205.
Spilling for insn 1206.
Spilling for insn 1207.
Spilling for insn 1208.
Spilling for insn 1209.
Spilling for insn 1210.
Spilling for insn 1211.
Spilling for insn 1213.
Spilling for insn 1214.
Spilling for insn 1216.
Spilling for insn 1217.
Spilling for insn 1221.
Spilling for insn 1224.
Spilling for insn 1225.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1230.
Spilling for insn 1232.
Spilling for insn 1233.
Spilling for insn 1234.
Spilling for insn 1238.
Spilling for insn 1243.
Spilling for insn 1244.
Spilling for insn 1245.
Spilling for insn 1246.
Spilling for insn 1247.
Spilling for insn 1249.
Spilling for insn 1250.
Spilling for insn 1254.
Spilling for insn 1258.
Spilling for insn 1259.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 1264.
Spilling for insn 1265.
Spilling for insn 1266.
Spilling for insn 1267.
Spilling for insn 1270.
Spilling for insn 1271.
Spilling for insn 1272.
Spilling for insn 1274.
Spilling for insn 1276.
Spilling for insn 1277.
Spilling for insn 1281.
Spilling for insn 1286.
Spilling for insn 1287.
Spilling for insn 1288.
Spilling for insn 1289.
Spilling for insn 1292.
Spilling for insn 1293.
Spilling for insn 1294.
Spilling for insn 1296.
Spilling for insn 1297.
Spilling for insn 1299.
Spilling for insn 1301.
Spilling for insn 1302.
Spilling for insn 1306.
Spilling for insn 1310.
Spilling for insn 1311.
Spilling for insn 1312.
Spilling for insn 1313.
Spilling for insn 1315.
Spilling for insn 1316.
Spilling for insn 1317.
Spilling for insn 1319.
Spilling for insn 1320.
Spilling for insn 1322.
Spilling for insn 1324.
Spilling for insn 1328.
Spilling for insn 1329.
Spilling for insn 1331.
Spilling for insn 1332.
Spilling for insn 1333.
Spilling for insn 1334.
Spilling for insn 1335.
Spilling for insn 1336.
Spilling for insn 1337.
Spilling for insn 1338.
Spilling for insn 1342.
Spilling for insn 1343.
Spilling for insn 1344.
Spilling for insn 1346.
Spilling for insn 1347.
Spilling for insn 1348.
Spilling for insn 1352.
;; Register dispositions:
42 in 2  49 in 5  62 in 13  63 in 10  65 in 15  69 in 10  
70 in 10  71 in 3  72 in 15  73 in 14  75 in 12  86 in 3  
87 in 2  88 in 2  93 in 8  94 in 8  95 in 8  96 in 10  
97 in 8  98 in 8  99 in 9  100 in 8  105 in 8  112 in 0  
113 in 8  114 in 8  118 in 0  121 in 8  125 in 8  126 in 9  
127 in 8  129 in 9  130 in 8  132 in 8  133 in 8  134 in 8  
135 in 8  136 in 9  137 in 8  138 in 8  139 in 9  140 in 9  
141 in 8  142 in 8  143 in 8  144 in 8  145 in 9  146 in 8  
147 in 8  149 in 8  150 in 8  152 in 9  153 in 8  155 in 8  
157 in 8  158 in 9  160 in 10  161 in 8  164 in 9  165 in 9  
166 in 9  167 in 8  168 in 8  169 in 8  170 in 8  172 in 9  
173 in 8  174 in 8  175 in 8  176 in 8  177 in 13  178 in 8  
179 in 8  180 in 8  181 in 8  182 in 8  183 in 8  184 in 9  
185 in 8  186 in 8  187 in 9  188 in 8  189 in 10  190 in 8  
191 in 12  192 in 10  193 in 8  194 in 8  196 in 9  197 in 8  
198 in 8  199 in 8  202 in 8  203 in 9  204 in 8  205 in 11  
206 in 9  207 in 8  208 in 8  209 in 8  210 in 8  211 in 8  
212 in 8  213 in 8  214 in 8  217 in 8  218 in 12  219 in 9  
220 in 8  222 in 13  223 in 8  224 in 8  230 in 8  231 in 10  
233 in 11  234 in 10  235 in 8  236 in 14  237 in 12  239 in 14  
240 in 8  242 in 8  243 in 8  244 in 11  247 in 9  248 in 8  
250 in 8  251 in 9  252 in 8  253 in 9  254 in 8  255 in 10  
258 in 9  259 in 8  261 in 8  262 in 9  263 in 8  264 in 9  
265 in 8  266 in 8  267 in 13  268 in 9  269 in 8  270 in 8  
272 in 8  273 in 15  274 in 11  275 in 8  276 in 8  278 in 9  
279 in 8  280 in 8  284 in 10  285 in 8  286 in 10  287 in 12  
288 in 8  289 in 10  290 in 8  291 in 8  294 in 8  296 in 13  
297 in 8  298 in 8  299 in 8  300 in 8  303 in 8  308 in 14  
309 in 9  310 in 8  312 in 9  313 in 8  314 in 8  324 in 8  
325 in 11  327 in 12  328 in 11  329 in 8  330 in 10  331 in 8  
332 in 8  333 in 9  334 in 8  335 in 8  338 in 8  339 in 8  
340 in 10  341 in 10  342 in 8  343 in 9  344 in 9  345 in 8  
346 in 10  347 in 8  348 in 8  349 in 9  350 in 8  351 in 8  
352 in 9  353 in 9  354 in 8  355 in 8  356 in 9  357 in 8  
358 in 8  359 in 8  360 in 10  361 in 10  362 in 8  363 in 9  
364 in 9  365 in 8  366 in 10  367 in 8  368 in 8  369 in 8  
371 in 8  372 in 8  374 in 9  375 in 9  376 in 9  377 in 8  
378 in 8  380 in 8  381 in 8  382 in 9  383 in 8  384 in 8  
386 in 8  387 in 9  388 in 8  389 in 9  391 in 8  392 in 8  
393 in 8  394 in 8  396 in 8  397 in 8  398 in 9  399 in 8  
400 in 8  402 in 8  403 in 9  404 in 8  405 in 8  406 in 8  
407 in 8  408 in 8  409 in 9  410 in 9  411 in 8  412 in 8  
413 in 8  414 in 8  415 in 10  416 in 10  417 in 8  418 in 9  
419 in 9  420 in 8  421 in 10  423 in 8  424 in 10  425 in 9  
426 in 8  428 in 8  429 in 8  433 in 9  434 in 8  436 in 8  
437 in 11  438 in 8  439 in 8  440 in 9  441 in 8  442 in 8  
444 in 9  446 in 13  447 in 8  448 in 8  449 in 9  450 in 8  
451 in 8  452 in 8  453 in 9  454 in 8  456 in 8  457 in 9  
458 in 9  460 in 8  461 in 8  462 in 8  463 in 8  464 in 9  
465 in 8  466 in 8  468 in 10  469 in 10  470 in 10  472 in 8  
473 in 8  474 in 8  476 in 9  477 in 9  478 in 9  479 in 8  
480 in 8  481 in 8  482 in 10  483 in 8  484 in 11  485 in 10  
486 in 10  487 in 10  488 in 8  489 in 8  490 in 8  491 in 8  
493 in 9  494 in 9  495 in 9  496 in 8  497 in 9  498 in 9  
499 in 9  500 in 9  501 in 8  502 in 8  503 in 8  504 in 10  
505 in 11  506 in 10  507 in 9  508 in 9  509 in 8  510 in 8  
511 in 9  512 in 8  514 in 8  515 in 11  516 in 8  517 in 8  
518 in 9  519 in 9  520 in 8  521 in 8  522 in 8  528 in 8  
529 in 8  530 in 10  531 in 9  532 in 9  533 in 8  534 in 8  
535 in 9  536 in 8  537 in 8  538 in 9  539 in 10  540 in 8  
541 in 11  542 in 9  543 in 9  544 in 9  546 in 8  547 in 10  
548 in 10  549 in 8  550 in 8  551 in 9  552 in 8  553 in 8  
554 in 9  555 in 11  556 in 11  557 in 10  558 in 10  559 in 10  
561 in 9  562 in 8  563 in 8  564 in 9  565 in 8  566 in 8  
567 in 9  568 in 9  569 in 10  570 in 8  571 in 8  572 in 10  
573 in 11  574 in 13  575 in 12  576 in 11  577 in 11  578 in 8  
579 in 8  580 in 8  581 in 8  583 in 9  584 in 9  585 in 9  
586 in 8  587 in 8  588 in 8  589 in 9  590 in 10  591 in 10  
592 in 9  593 in 8  595 in 8  596 in 9  597 in 9  599 in 8  
600 in 8  601 in 8  602 in 9  605 in 9  606 in 8  608 in 9  
609 in 8  610 in 9  611 in 9  612 in 9  613 in 9  615 in 8  
616 in 8  617 in 8  618 in 10  619 in 10  620 in 8  621 in 9  
625 in 11  626 in 11  627 in 11  628 in 9  629 in 13  630 in 11  
631 in 8  632 in 8  633 in 8  634 in 8  635 in 8  637 in 12  
638 in 12  639 in 12  640 in 8  641 in 8  643 in 12  644 in 10  
645 in 10  646 in 8  647 in 8  648 in 8  649 in 8  650 in 9  
651 in 8  652 in 9  653 in 9  654 in 8  655 in 8  656 in 8  
657 in 10  658 in 11  659 in 8  660 in 10  662 in 9  663 in 8  
664 in 8  665 in 9  666 in 10  667 in 10  668 in 9  669 in 9  
670 in 8  671 in 8  672 in 9  673 in 8  674 in 8  675 in 9  
676 in 10  677 in 8  678 in 11  679 in 9  680 in 9  681 in 9  
683 in 8  684 in 10  685 in 10  686 in 8  687 in 8  688 in 9  
689 in 8  690 in 8  691 in 9  692 in 11  693 in 11  694 in 10  
695 in 10  696 in 10  698 in 9  699 in 8  700 in 8  701 in 9  
702 in 8  703 in 8  704 in 9  705 in 9  706 in 10  707 in 8  
708 in 8  709 in 10  710 in 11  711 in 11  712 in 8  713 in 9  
714 in 9  716 in 8  717 in 8  718 in 8  719 in 9  720 in 8  
721 in 8  722 in 9  723 in 8  725 in 9  726 in 8  727 in 9  
728 in 9  729 in 9  730 in 9  731 in 8  732 in 8  733 in 8  
734 in 8  735 in 8  736 in 9  738 in 8  739 in 10  740 in 10  
741 in 8  742 in 8  743 in 8  744 in 8  745 in 9  746 in 11  


;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

(note 2 0 1358 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 1358 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 1358 6 (set (reg/v:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 6 4 1423 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1423 6 8 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 8 1423 1426 (set (reg:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1426 8 10 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 10 1426 1429 (set (reg:DF 12 st(4))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 28 [0x1c])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1429 10 12 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 12 1429 1432 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 36 [0x24])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1432 12 14 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 14 1432 16 NOTE_INSN_DELETED 0)

(insn 16 14 1435 (set (reg:DF 9 st(1))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 52 [0x34])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1435 16 18 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 18 1435 19 (set (reg/v:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 60 [0x3c])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 60 [0x3c])) 0)
        (nil)))

(note 19 18 22 NOTE_INSN_FUNCTION_BEG 0)

(note 22 19 27 0x40325940 NOTE_INSN_BLOCK_BEG 0)

(insn 27 22 31 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 31 27 33 NOTE_INSN_DELETED 0)

(insn 33 31 35 (set (reg:SI 2 ecx)
        (plus:SI (mult:SI (reg/v:SI 2 ecx)
                (const_int 2 [0x2]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (insn_list 4 (nil))
    (nil))

(insn 35 33 1438 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 33 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 2 ecx)
            (const_int 96 [0x60]))
        (nil)))

(insn 1438 35 39 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 39 1438 1441 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem/f:DF (plus:SI (reg:SI 6 ebp)
                    (const_int 44 [0x2c])) 0))) 314 {*fop_df_comm} (insn_list 6 (nil))
    (nil))

(note 1441 39 1444 NOTE_INSN_DELETED 0)

(insn 1444 1441 50 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 50 1444 51 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem/s:DF (plus:SI (plus:SI (reg:SI 2 ecx)
                        (reg:SI 3 ebx))
                    (const_int 40 [0x28])) 0))) 314 {*fop_df_comm} (insn_list 8 (insn_list 27 (insn_list 35 (nil))))
    (nil))

(insn 51 50 1447 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 12 st(4))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 39 (insn_list 50 (nil)))
    (nil))

(insn 1447 51 53 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 53 1447 1450 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 16 (nil))
    (nil))

(note 1450 53 1453 NOTE_INSN_DELETED 0)

(note 1453 1450 54 NOTE_INSN_DELETED 0)

(insn 54 1453 55 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 51 (nil))
    (nil))

(insn 55 54 1456 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 53 (insn_list 54 (nil)))
    (nil))

(insn 1456 55 1459 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1459 1456 57 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 57 1459 1462 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1462 57 1465 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1465 1462 58 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 58 1465 59 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 59 58 1468 (set (reg:DF 8 st(0))
        (minus:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -80 [0xffffffb0])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 57 (insn_list 58 (nil)))
    (nil))

(insn 1468 59 1471 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1471 1468 61 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 61 1471 1474 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 12 (nil))
    (nil))

(insn 1474 61 62 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 62 1474 63 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 63 62 1477 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 61 (insn_list 62 (nil)))
    (nil))

(insn 1477 63 64 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 64 1477 65 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 65 64 68 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 63 (insn_list 64 (nil)))
    (nil))

(note 68 65 70 0x40302500 NOTE_INSN_BLOCK_BEG 0)

(note/i 70 68 71 0x40302520 NOTE_INSN_BLOCK_BEG 0)

(note/i 71 70 72 NOTE_INSN_DELETED 0)

(insn/i 72 71 1480 (parallel[ 
            (set (reg:DF 8 st(0))
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 65 (nil))
    (nil))

(insn 1480 72 75 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note/i 75 1480 78 0x40302520 NOTE_INSN_BLOCK_END 0)

(note 78 75 1483 0x40302500 NOTE_INSN_BLOCK_END 0)

(insn 1483 78 82 (set (reg:DF 8 st(0))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 82 1483 85 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 85 82 87 0x40302840 NOTE_INSN_BLOCK_BEG 0)

(note/i 87 85 88 0x40302860 NOTE_INSN_BLOCK_BEG 0)

(note/i 88 87 89 NOTE_INSN_DELETED 0)

(insn/i 89 88 1486 (parallel[ 
            (set (reg:DF 8 st(0))
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 82 (nil))
    (nil))

(insn 1486 89 92 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note/i 92 1486 95 0x40302860 NOTE_INSN_BLOCK_END 0)

(note 95 92 98 0x40302840 NOTE_INSN_BLOCK_END 0)

(note 98 95 1489 NOTE_INSN_DELETED 0)

(insn 1489 98 99 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 99 1489 1492 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC98")) 0))) 314 {*fop_df_comm} (insn_list 10 (nil))
    (nil))

(insn 1492 99 2682 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2682 1492 2683 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 72 [0x48])) 0)) -1 (nil)
    (nil))

(insn 2683 2682 113 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 76 [0x4c])) 0)) -1 (nil)
    (nil))

(insn 113 2683 2685 (parallel[ 
            (set (reg:SI 1 edx)
                (xor:SI (reg:SI 1 edx)
                    (const_int -2147483648 [0x80000000])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (insn_list 112 (nil))
    (expr_list:REG_EQUAL (neg:DF (mem/s:DF (plus:SI (plus:SI (reg:SI 2 ecx)
                        (reg:SI 3 ebx))
                    (const_int 72 [0x48])) 0))
        (nil)))

(insn 2685 113 2686 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2686 2685 115 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -108 [0xffffff94])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 115 2686 116 (set (reg:DF 8 st(0))
        (mem/f:DF (symbol_ref:SI ("pi")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (symbol_ref:SI ("pi")) 0)
        (nil)))

(insn 116 115 1498 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 115 (nil))
    (nil))

(insn 1498 116 117 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 117 1498 1501 (set (reg:DF 12 st(4))
        (div:DF (reg:DF 12 st(4))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 113 (insn_list 116 (nil)))
    (nil))

(insn 1501 117 2687 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)
        (reg:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2687 1501 2688 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 80 [0x50])) 0)) -1 (nil)
    (nil))

(insn 2688 2687 131 (set (reg:SI 1 edx)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 2 ecx)
                    (reg:SI 3 ebx))
                (const_int 84 [0x54])) 0)) -1 (nil)
    (nil))

(insn 131 2688 2690 (parallel[ 
            (set (reg:SI 1 edx)
                (xor:SI (reg:SI 1 edx)
                    (const_int -2147483648 [0x80000000])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (insn_list 130 (nil))
    (expr_list:REG_EQUAL (neg:DF (mem/s:DF (plus:SI (plus:SI (reg:SI 2 ecx)
                        (reg:SI 3 ebx))
                    (const_int 80 [0x50])) 0))
        (nil)))

(insn 2690 131 2691 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2691 2690 135 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -116 [0xffffff8c])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 135 2691 1507 (set (reg:DF 8 st(0))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 131 (nil))
    (nil))

(insn 1507 135 138 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 138 1507 1510 NOTE_INSN_DELETED 0)

(insn 1510 138 140 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 140 1510 1513 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -80 [0xffffffb0])) 0))) 314 {*fop_df_comm} (insn_list 59 (insn_list 72 (nil)))
    (nil))

(insn 1513 140 141 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -152 [0xffffff68])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 141 1513 1516 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 140 (nil))
    (nil))

(insn 1516 141 143 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -160 [0xffffff60])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 143 1516 1519 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -224 [0xffffff20])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1519 143 145 (set (reg:DF 9 st(1))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 145 1519 1522 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (insn_list 143 (nil))
    (nil))

(insn 1522 145 1525 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -232 [0xffffff18])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1525 1522 146 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 146 1525 1528 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 1528 146 147 NOTE_INSN_DELETED 0)

(insn 147 1528 1531 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 146 (nil))
    (nil))

(insn 1531 147 1534 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -240 [0xffffff10])) 0)
        (reg:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1534 1531 148 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 148 1534 1537 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1537 148 149 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 149 1537 1540 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 148 (nil))
    (nil))

(insn 1540 149 154 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -248 [0xffffff08])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(note 154 1540 156 0x40305ca0 NOTE_INSN_BLOCK_BEG 0)

(insn/i 156 154 162 (set (reg:DF 8 st(0))
        (abs:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(note 162 156 164 0x40305ca0 NOTE_INSN_BLOCK_END 0)

(insn 164 162 2693 (set (reg:DF 9 st(1))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC100")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC100")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))

(insn 2693 164 2694 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 9 st(1)))
            ]  9)) -1 (nil)
    (nil))

(insn 2694 2693 2695 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2695 2694 2696 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2696 2695 2697 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 2697 2696 1359 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 173))) -1 (nil)
    (nil))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 82 83 84 85

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 82 83 84 85
(note 1359 2697 2680 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 2680 1359 2681 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(insn 2681 2680 171 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -212 [0xffffff2c])) 0)
        (const_int 0 [0x0])) -1 (nil)
    (nil))

(jump_insn 171 2681 172 (set (pc)
        (label_ref 175)) 296 {jump} (nil)
    (nil))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 81 82 83 84 85

(barrier 172 171 173)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 82 83 84 85
(code_label 173 172 1360 620 "" "" [1 uses])

(note 1360 173 1543 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 1543 1360 174 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 174 1543 1546 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1546 174 175 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 81 82 83 84 85

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 81 82 83 84 85
(code_label 175 1546 1361 621 "" "" [1 uses])

(note 1361 175 1549 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 1549 1361 177 (set (reg/v:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 177 1549 1552 (set (reg/v:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1552 177 178 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 178 1552 179 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 179 178 181 (set (reg/v:DF 10 st(2))
        (div:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 177 (insn_list 178 (nil)))
    (nil))

(note 181 179 1555 0x40306200 NOTE_INSN_BLOCK_BEG 0)

(insn 1555 181 183 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn/i 183 1555 189 (set (reg:DF 9 st(1))
        (abs:DF (reg:DF 9 st(1)))) -1 (nil)
    (nil))

(note 189 183 191 0x40306200 NOTE_INSN_BLOCK_END 0)

(insn 191 189 2675 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC100")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC100")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))

(insn 2675 191 2676 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2676 2675 2677 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2677 2676 2678 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2678 2677 2679 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 2679 2678 1362 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 200))) -1 (nil)
    (nil))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 70 81 82 83 84 85

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 81 82 83 84 85
(note 1362 2679 197 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 197 1362 1558 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (nil))

(insn 1558 197 198 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 198 1558 199 (set (pc)
        (label_ref 212)) 296 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85

(barrier 199 198 200)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 67 68 70 81 82 83 84 85
(code_label 200 199 1363 624 "" "" [1 uses])

(note 1363 200 201 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(note 201 1363 203 0x40306380 NOTE_INSN_BLOCK_BEG 0)

(note/i 203 201 204 0x403063a0 NOTE_INSN_BLOCK_BEG 0)

(note/i 204 203 1561 NOTE_INSN_DELETED 0)

(insn 1561 204 205 (set (reg:DF 8 st(0))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn/i 205 1561 1564 (parallel[ 
            (set (reg:DF 8 st(0))
                (asm_operands/v ("fld1; fpatan") ("=t") 0[ 
                        (reg:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 467))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (reg:QI 9 st(1)))
        ] ) -1 (nil)
    (nil))

(insn 1564 205 208 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85

(note/i 208 1564 211 0x403063a0 NOTE_INSN_BLOCK_END 0)

(note 211 208 212 0x40306380 NOTE_INSN_BLOCK_END 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85
(code_label 212 211 1364 625 "" "" [1 uses])

(note 1364 212 215 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 215 1364 1567 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1567 215 2669 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2669 1567 2670 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2670 2669 2671 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2671 2670 2672 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2672 2671 1365 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 234)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85
(note 1365 2672 221 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 221 1365 1570 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1570 221 222 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 222 1570 2661 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 2661 222 2662 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2662 2661 225 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 225 2662 227 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 227 225 1573 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1573 227 2663 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2663 1573 2664 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)) -1 (nil)
    (nil))

(insn 2664 2663 2665 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -276 [0xfffffeec])) 0)) -1 (nil)
    (nil))

(insn 2665 2664 2666 (set (reg:SI 3 ebx)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2666 2665 231 (set (reg:SI 4 esi)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 231 2666 232 (parallel[ 
            (set (reg:SI 4 esi)
                (xor:SI (reg:SI 4 esi)
                    (const_int -2147483648 [0x80000000])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (insn_list 229 (nil))
    (nil))

(jump_insn 232 231 233 (set (pc)
        (label_ref 245)) 296 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85

(barrier 233 232 234)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 81 82 83 84 85
(code_label 234 233 1366 629 "" "" [1 uses])

(note 1366 234 236 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 236 1366 1579 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1579 236 237 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 237 1579 2655 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2655 237 2656 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 2656 2655 240 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(call_insn 240 2656 242 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 242 240 1582 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 1582 242 2657 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2657 1582 2658 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)) -1 (nil)
    (nil))

(insn 2658 2657 2659 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -276 [0xfffffeec])) 0)) -1 (nil)
    (nil))

(insn 2659 2658 2660 (set (reg:SI 3 ebx)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2660 2659 245 (set (reg:SI 4 esi)
        (reg:SI 1 edx)) -1 (nil)
    (nil))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85
(code_label 245 2660 1367 630 "" "" [1 uses])

(note 1367 245 248 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 248 1367 1588 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1588 248 2651 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2651 1588 2652 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2652 2651 2653 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2653 2652 2654 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2654 2653 1368 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 288)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 71 81 82 83 84 85
(note 1368 2654 1591 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 1591 1368 257 (set (reg/v:DF 13 st(5))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 257 1591 258 (set (reg/v:DF 13 st(5))
        (neg:DF (reg/v:DF 13 st(5)))) -1 (nil)
    (nil))

(insn 258 257 259 (set (reg/v:DF 13 st(5))
        (mult:DF (reg/v:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (insn_list 257 (nil))
    (nil))

(insn 259 258 260 (set (reg/v:DF 13 st(5))
        (mult:DF (reg/v:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 258 (nil))
    (nil))

(insn 260 259 1594 (set (reg/v:DF 13 st(5))
        (div:DF (reg/v:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 319 {*fop_df_1} (insn_list 259 (nil))
    (nil))

(insn 1594 260 262 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 262 1594 1597 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1597 262 263 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 263 1597 264 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 264 263 265 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 319 {*fop_df_1} (insn_list 263 (nil))
    (nil))

(insn 265 264 2641 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 262 (insn_list 264 (nil)))
    (nil))

(insn 2641 265 2642 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 2642 2641 1603 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -276 [0xfffffeec])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 1603 2642 266 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 266 1603 267 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 265 (nil))
    (nil))

(insn 267 266 1606 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -104 [0xffffff98])) 0))) 314 {*fop_df_comm} (insn_list 266 (nil))
    (nil))

(insn 1606 267 1609 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1609 1606 270 (set (reg/v:DF 15 st(7))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 270 1609 271 (set (reg/v:DF 15 st(7))
        (neg:DF (reg/v:DF 15 st(7)))) -1 (nil)
    (nil))

(insn 271 270 272 (set (reg/v:DF 15 st(7))
        (mult:DF (reg/v:DF 15 st(7))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 270 (nil))
    (nil))

(insn 272 271 2644 (set (reg/v:DF 15 st(7))
        (div:DF (reg/v:DF 15 st(7))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 319 {*fop_df_1} (insn_list 271 (nil))
    (nil))

(insn 2644 272 2645 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) -1 (nil)
    (nil))

(insn 2645 2644 275 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) -1 (nil)
    (nil))

(insn 275 2645 2647 (parallel[ 
            (set (reg:SI 1 edx)
                (xor:SI (reg:SI 1 edx)
                    (const_int -2147483648 [0x80000000])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2647 275 2648 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2648 2647 1618 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -140 [0xffffff74])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 1618 2648 276 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 276 1618 1621 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (insn_list 275 (nil))
    (nil))

(note 1621 276 277 NOTE_INSN_DELETED 0)

(insn 277 1621 1624 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 276 (nil))
    (nil))

(insn 1624 277 1627 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1627 1624 278 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 278 1627 279 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -80 [0xffffffb0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 279 278 1630 (set (reg:DF 8 st(0))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -144 [0xffffff70])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 277 (insn_list 278 (nil)))
    (nil))

(insn 1630 279 1633 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 1633 1630 1636 NOTE_INSN_DELETED 0)

(insn 1636 1633 282 (set (reg:DF 8 st(0))
        (reg:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 282 1636 1639 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 1639 282 283 (set (reg/v:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 283 1639 284 (set (reg/v:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 282 (nil))
    (nil))

(insn 284 283 286 (set (reg/v:DF 10 st(2))
        (minus:DF (reg/v:DF 10 st(2))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 267 (insn_list 283 (nil)))
    (nil))

(jump_insn 286 284 287 (set (pc)
        (label_ref 385)) 296 {jump} (nil)
    (nil))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85

(barrier 287 286 288)

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 56 57 58 59 60 61 67 68 71 81 82 83 84 85
(code_label 288 287 1369 632 "" "" [1 uses])

(note 1369 288 1642 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 1642 1369 292 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 292 1642 293 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 293 292 1645 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -96 [0xffffffa0])) 0))) 314 {*fop_df_comm} (insn_list 292 (nil))
    (nil))

(insn 1645 293 294 (set (reg/v:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 294 1645 1648 (set (reg/v:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 293 (nil))
    (nil))

(insn 1648 294 295 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 295 1648 1651 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -96 [0xffffffa0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1651 295 296 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -96 [0xffffffa0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 296 1651 297 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 295 (nil))
    (nil))

(insn 297 296 298 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 296 (nil))
    (nil))

(insn 298 297 1654 (set (reg/v:DF 10 st(2))
        (plus:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 294 (insn_list 297 (nil)))
    (nil))

(insn 1654 298 300 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 300 1654 301 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 301 300 302 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 300 (nil))
    (nil))

(insn 302 301 304 (set (reg/v:DF 10 st(2))
        (div:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 298 (insn_list 301 (nil)))
    (nil))

(note 304 302 1657 0x403099a0 NOTE_INSN_BLOCK_BEG 0)

(insn 1657 304 306 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn/i 306 1657 312 (set (reg:DF 9 st(1))
        (abs:DF (reg:DF 9 st(1)))) -1 (nil)
    (nil))

(note 312 306 314 0x403099a0 NOTE_INSN_BLOCK_END 0)

(insn 314 312 2635 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC100")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC100")) 0) -805306368 [0xd0000000] 1997636705 [0x77118461] 1071950796 [0x3fe4abcc])
        (nil)))

(insn 2635 314 2636 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2636 2635 2637 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2637 2636 2638 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (plus:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2638 2637 2639 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 2639 2638 1370 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (pc)
            (label_ref 323))) -1 (nil)
    (nil))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 71 81 82 83 84 85
(note 1370 2639 320 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 320 1370 1660 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1660 320 321 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 321 1660 322 (set (pc)
        (label_ref 340)) 296 {jump} (nil)
    (nil))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 71 81 82 83 84 85

(barrier 322 321 323)

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 67 68 69 71 81 82 83 84 85
(code_label 323 322 1371 635 "" "" [1 uses])

(note 1371 323 324 [bb 13] NOTE_INSN_BASIC_BLOCK 0)

(note 324 1371 326 0x40309b20 NOTE_INSN_BLOCK_BEG 0)

(note/i 326 324 1663 0x40309b40 NOTE_INSN_BLOCK_BEG 0)

(insn 1663 326 327 (set (reg/v:DF 8 st(0))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn/i 327 1663 331 (parallel[ 
            (set (reg/v:DF 8 st(0))
                (asm_operands/v ("fld1; fpatan") ("=t") 0[ 
                        (reg/v:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 467))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
            (clobber (reg:QI 9 st(1)))
        ] ) -1 (nil)
    (nil))

(note/i 331 327 334 0x40309b40 NOTE_INSN_BLOCK_END 0)

(note 334 331 1666 0x40309b20 NOTE_INSN_BLOCK_END 0)

(insn 1666 334 337 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 337 1666 1669 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 1669 337 338 NOTE_INSN_DELETED 0)

(insn 338 1669 1672 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 337 (nil))
    (nil))

(note 1672 338 339 NOTE_INSN_DELETED 0)

(insn 339 1672 1675 (set (reg/v:DF 8 st(0))
        (mult:DF (reg/v:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 327 (insn_list 338 (nil)))
    (nil))

(insn 1675 339 340 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 71 81 82 83 84 85

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 66 67 68 71 81 82 83 84 85
(code_label 340 1675 1372 636 "" "" [1 uses])

(note 1372 340 343 [bb 14] NOTE_INSN_BASIC_BLOCK 0)

(insn 343 1372 2628 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 2628 343 2629 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -148 [0xffffff6c])) 0)) -1 (nil)
    (nil))

(insn 2629 2628 346 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -152 [0xffffff68])) 0)) -1 (nil)
    (nil))

(call_insn 346 2629 348 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 348 346 350 NOTE_INSN_DELETED 1077086864)

(note 350 348 1678 NOTE_INSN_DELETED 0)

(insn 1678 350 351 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 351 1678 1681 (set (reg:DF 9 st(1))
        (div:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0)
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1681 351 352 (set (reg/v:DF 15 st(7))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 352 1681 2630 (set (reg/v:DF 15 st(7))
        (mult:DF (reg/v:DF 15 st(7))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 351 (nil))
    (nil))

(insn 2630 352 2631 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)
        (reg:SI 3 ebx)) -1 (nil)
    (nil))

(insn 2631 2630 1687 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -276 [0xfffffeec])) 0)
        (reg:SI 4 esi)) -1 (nil)
    (nil))

(insn 1687 2631 353 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 353 1687 354 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 354 353 355 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 319 {*fop_df_1} (insn_list 348 (insn_list 353 (nil)))
    (nil))

(insn 355 354 360 (set (reg/v:DF 15 st(7))
        (mult:DF (reg/v:DF 15 st(7))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 352 (insn_list 354 (nil)))
    (nil))

(insn 360 355 361 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -72 [0xffffffb8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 361 360 1690 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 319 {*fop_df_1} (insn_list 360 (nil))
    (nil))

(note 1690 361 1693 NOTE_INSN_DELETED 0)

(insn 1693 1690 362 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 362 1693 363 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 361 (nil))
    (nil))

(insn 363 362 1696 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 362 (nil))
    (nil))

(note 1696 363 1699 NOTE_INSN_DELETED 0)

(insn 1699 1696 364 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 364 1699 365 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (insn_list 355 (nil))
    (nil))

(insn 365 364 366 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 364 (nil))
    (nil))

(insn 366 365 1702 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 363 (insn_list 365 (nil)))
    (nil))

(insn 1702 366 1705 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 1705 1702 1708 NOTE_INSN_DELETED 0)

(insn 1708 1705 369 (set (reg:DF 8 st(0))
        (reg:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 369 1708 1711 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 1711 369 370 (set (reg/v:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 370 1711 371 (set (reg/v:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 369 (nil))
    (nil))

(insn 371 370 374 (set (reg/v:DF 10 st(2))
        (minus:DF (reg/v:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -136 [0xffffff78])) 0))) 319 {*fop_df_1} (insn_list 366 (insn_list 370 (nil)))
    (nil))

(note 374 371 1714 NOTE_INSN_DELETED 0)

(insn 1714 374 375 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 375 1714 1717 (set (reg:DF 8 st(0))
        (div:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC102")) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1717 375 376 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 376 1717 377 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 377 376 1720 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 375 (insn_list 376 (nil)))
    (nil))

(insn 1720 377 378 (set (reg/v:DF 13 st(5))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 378 1720 1723 (set (reg/v:DF 13 st(5))
        (mult:DF (reg/v:DF 13 st(5))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 377 (nil))
    (nil))

(insn 1723 378 379 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 379 1723 380 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -144 [0xffffff70])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 380 379 381 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 379 (nil))
    (nil))

(insn 381 380 384 (set (reg/v:DF 13 st(5))
        (minus:DF (reg/v:DF 13 st(5))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 378 (insn_list 380 (nil)))
    (nil))

(insn 384 381 385 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 14, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85

;; Start of basic block 15, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85
(code_label 385 384 1373 634 "" "" [1 uses])

(note 1373 385 388 [bb 15] NOTE_INSN_BASIC_BLOCK 0)

(insn 388 1373 1726 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1726 388 2624 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2624 1726 2625 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2625 2624 2626 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2626 2625 2627 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2627 2626 1374 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 488)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 15, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85
(note 1374 2627 396 [bb 16] NOTE_INSN_BASIC_BLOCK 0)

(insn 396 1374 1729 (set (reg:DF 13 st(5))
        (mult:DF (reg/v:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1729 396 397 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 397 1729 398 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 396 (nil))
    (nil))

(insn 398 397 400 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -112 [0xffffff90])) 0))) 314 {*fop_df_comm} (insn_list 397 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 216 [0xd8])) 0)
        (nil)))

(insn 400 398 1732 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 216 [0xd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 398 (nil))
    (nil))

(insn 1732 400 402 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 402 1732 403 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 10 st(2)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 403 402 405 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -112 [0xffffff90])) 0))) 314 {*fop_df_comm} (insn_list 402 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 224 [0xe0])) 0)
        (nil)))

(insn 405 403 1735 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 224 [0xe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 403 (nil))
    (nil))

(insn 1735 405 407 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 407 1735 408 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 408 407 410 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -112 [0xffffff90])) 0))) 314 {*fop_df_comm} (insn_list 407 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 232 [0xe8])) 0)
        (nil)))

(insn 410 408 1738 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 232 [0xe8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 408 (nil))
    (nil))

(insn 1738 410 412 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 412 1738 1741 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1741 412 413 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 413 1741 414 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 414 413 415 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 413 (nil))
    (nil))

(insn 415 414 1744 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 412 (insn_list 414 (nil)))
    (nil))

(insn 1744 415 416 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 416 1744 418 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 415 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 240 [0xf0])) 0)
        (nil)))

(insn 418 416 1747 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 240 [0xf0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 416 (nil))
    (nil))

(insn 1747 418 420 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 420 1747 1750 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1750 420 421 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 421 1750 1753 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1753 421 422 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 422 1753 423 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 421 (nil))
    (nil))

(insn 423 422 1756 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 420 (insn_list 422 (nil)))
    (nil))

(insn 1756 423 424 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 424 1756 425 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 425 424 1759 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 423 (insn_list 424 (nil)))
    (nil))

(insn 1759 425 427 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 427 1759 428 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 428 427 429 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 425 (insn_list 427 (nil)))
    (nil))

(insn 429 428 431 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0))) 314 {*fop_df_comm} (insn_list 428 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 248 [0xf8])) 0)
        (nil)))

(insn 431 429 1762 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 248 [0xf8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 429 (nil))
    (nil))

(insn 1762 431 433 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 433 1762 436 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 436 433 1765 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 433 (nil))
    (nil))

(insn 1765 436 437 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 437 1765 438 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 438 437 1768 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 436 (insn_list 437 (nil)))
    (nil))

(insn 1768 438 439 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 439 1768 1771 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1771 439 440 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 440 1771 441 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 439 (nil))
    (nil))

(insn 441 440 442 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 438 (insn_list 440 (nil)))
    (nil))

(insn 442 441 444 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0))) 314 {*fop_df_comm} (insn_list 441 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 256 [0x100])) 0)
        (nil)))

(insn 444 442 1774 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 256 [0x100])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 442 (nil))
    (nil))

(insn 1774 444 447 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 447 1774 448 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 448 447 449 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 447 (nil))
    (nil))

(insn 449 448 1777 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 448 (nil))
    (nil))

(insn 1777 449 450 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) 63 {*movdf_integer} (nil)
    (nil))

(insn 450 1777 452 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 449 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 264 [0x108])) 0)
        (nil)))

(insn 452 450 1780 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 264 [0x108])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 450 (nil))
    (nil))

(insn 1780 452 455 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 455 1780 456 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 456 455 459 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 455 (nil))
    (nil))

(insn 459 456 1783 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 456 (nil))
    (nil))

(insn 1783 459 461 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 461 1783 1786 (set (reg:DF 12 st(4))
        (neg:DF (reg:DF 12 st(4)))) -1 (nil)
    (nil))

(insn 1786 461 462 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 462 1786 463 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 461 (nil))
    (nil))

(insn 463 462 465 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 459 (insn_list 462 (nil)))
    (nil))

(insn 465 463 466 (set (reg:DF 13 st(5))
        (mult:DF (reg:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 466 465 1789 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 319 {*fop_df_1} (insn_list 463 (insn_list 465 (nil)))
    (nil))

(insn 1789 466 467 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) 63 {*movdf_integer} (nil)
    (nil))

(insn 467 1789 469 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 466 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 272 [0x110])) 0)
        (nil)))

(insn 469 467 1792 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 272 [0x110])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 467 (nil))
    (nil))

(insn 1792 469 477 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 477 1792 478 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 478 477 480 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 477 (nil))
    (nil))

(insn 480 478 481 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 481 480 1795 (set (reg:DF 10 st(2))
        (minus:DF (reg:DF 10 st(2))
            (reg:DF 11 st(3)))) 319 {*fop_df_1} (insn_list 478 (insn_list 480 (nil)))
    (nil))

(insn 1795 481 482 (set (reg:DF 8 st(0))
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 482 1795 484 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 481 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 280 [0x118])) 0)
        (nil)))

(insn 484 482 486 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 280 [0x118])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 482 (nil))
    (nil))

(jump_insn 486 484 487 (set (pc)
        (label_ref 614)) 296 {jump} (nil)
    (nil))
;; End of basic block 16, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85

(barrier 487 486 488)

;; Start of basic block 17, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 81 82 83 84 85
(code_label 488 487 1375 640 "" "" [1 uses])

(note 1375 488 1798 [bb 17] NOTE_INSN_BASIC_BLOCK 0)

(insn 1798 1375 492 (set (reg:DF 14 st(6))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 492 1798 1801 (set (reg:DF 14 st(6))
        (mult:DF (reg:DF 14 st(6))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1801 492 493 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 493 1801 1804 (set (reg:DF 12 st(4))
        (plus:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1804 493 494 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 494 1804 1807 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 493 (nil))
    (nil))

(insn 1807 494 495 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -256 [0xffffff00])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 495 1807 1810 (set (reg:DF 14 st(6))
        (div:DF (reg:DF 14 st(6))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 492 (insn_list 494 (nil)))
    (nil))

(insn 1810 495 496 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -128 [0xffffff80])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 496 1810 497 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 14 st(6)))) 314 {*fop_df_comm} (insn_list 495 (nil))
    (nil))

(insn 497 496 1813 (set (reg/v:DF 13 st(5))
        (mult:DF (reg/v:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1813 497 498 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -264 [0xfffffef8])) 0)
        (reg/v:DF 13 st(5))) 63 {*movdf_integer} (nil)
    (nil))

(insn 498 1813 499 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 496 (insn_list 497 (nil)))
    (nil))

(insn 499 498 501 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -112 [0xffffff90])) 0))) 314 {*fop_df_comm} (insn_list 498 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 216 [0xd8])) 0)
        (nil)))

(insn 501 499 1816 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 216 [0xd8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 499 (nil))
    (nil))

(insn 1816 501 503 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 503 1816 1819 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1819 503 506 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -256 [0xffffff00])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 506 1819 1822 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 11 st(3))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 503 (nil))
    (nil))

(insn 1822 506 507 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 507 1822 509 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 509 507 510 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 507 (nil))
    (nil))

(insn 510 509 1825 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 506 (insn_list 509 (nil)))
    (nil))

(insn 1825 510 511 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 511 1825 512 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 10 st(2)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 512 511 1828 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 510 (insn_list 511 (nil)))
    (nil))

(insn 1828 512 513 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 513 1828 515 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 512 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 224 [0xe0])) 0)
        (nil)))

(insn 515 513 1831 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 224 [0xe0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 513 (nil))
    (nil))

(insn 1831 515 517 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 517 1831 1834 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1834 517 520 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -256 [0xffffff00])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 520 1834 1837 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 10 st(2))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 517 (nil))
    (nil))

(insn 1837 520 521 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 521 1837 523 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 523 521 524 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 521 (nil))
    (nil))

(insn 524 523 1840 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 520 (insn_list 523 (nil)))
    (nil))

(insn 1840 524 525 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 525 1840 526 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 526 525 1843 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 524 (insn_list 525 (nil)))
    (nil))

(insn 1843 526 527 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 527 1843 529 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 526 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 232 [0xe8])) 0)
        (nil)))

(insn 529 527 1846 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 232 [0xe8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 527 (nil))
    (nil))

(insn 1846 529 531 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 531 1846 1849 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1849 531 532 (set (reg:DF 13 st(5))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -136 [0xffffff78])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 532 1849 1852 (set (reg:DF 13 st(5))
        (mult:DF (reg:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1852 532 533 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 533 1852 534 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 532 (nil))
    (nil))

(insn 534 533 535 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 531 (insn_list 533 (nil)))
    (nil))

(insn 535 534 537 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0))) 314 {*fop_df_comm} (insn_list 534 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 240 [0xf0])) 0)
        (nil)))

(insn 537 535 1855 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 240 [0xf0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 535 (nil))
    (nil))

(insn 1855 537 540 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 540 1855 1858 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1858 540 541 (set (reg:DF 15 st(7))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 541 1858 542 (set (reg:DF 15 st(7))
        (mult:DF (reg:DF 15 st(7))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 540 (nil))
    (nil))

(insn 542 541 1861 (set (reg:DF 11 st(3))
        (div:DF (reg:DF 11 st(3))
            (reg:DF 15 st(7)))) 319 {*fop_df_1} (insn_list 541 (nil))
    (nil))

(insn 1861 542 543 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 543 1861 544 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 544 543 1864 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 542 (insn_list 543 (nil)))
    (nil))

(insn 1864 544 546 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -264 [0xfffffef8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 546 1864 547 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 547 546 548 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 544 (insn_list 546 (nil)))
    (nil))

(insn 548 547 550 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -120 [0xffffff88])) 0))) 314 {*fop_df_comm} (insn_list 547 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 248 [0xf8])) 0)
        (nil)))

(insn 550 548 555 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 248 [0xf8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 548 (nil))
    (nil))

(insn 555 550 1867 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (reg:DF 15 st(7)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1867 555 556 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 556 1867 557 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 557 556 1870 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 555 (insn_list 556 (nil)))
    (nil))

(insn 1870 557 558 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -144 [0xffffff70])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 558 1870 1873 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1873 558 559 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 559 1873 560 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 558 (nil))
    (nil))

(insn 560 559 1876 (set (reg:DF 10 st(2))
        (minus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 557 (insn_list 559 (nil)))
    (nil))

(insn 1876 560 561 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 561 1876 563 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 560 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 256 [0x100])) 0)
        (nil)))

(insn 563 561 1879 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 256 [0x100])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 561 (nil))
    (nil))

(insn 1879 563 565 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 565 1879 568 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 568 565 570 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -256 [0xffffff00])) 0))) 319 {*fop_df_1} (insn_list 565 (nil))
    (nil))

(insn 570 568 571 (set (reg:DF 13 st(5))
        (mult:DF (reg:DF 13 st(5))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 571 570 1882 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 319 {*fop_df_1} (insn_list 568 (insn_list 570 (nil)))
    (nil))

(insn 1882 571 572 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) 63 {*movdf_integer} (nil)
    (nil))

(insn 572 1882 574 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 571 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 264 [0x108])) 0)
        (nil)))

(insn 574 572 1885 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 264 [0x108])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 572 (nil))
    (nil))

(insn 1885 574 577 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 577 1885 578 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 578 577 581 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 577 (nil))
    (nil))

(insn 581 578 586 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 15 st(7)))) 319 {*fop_df_1} (insn_list 578 (nil))
    (nil))

(insn 586 581 1888 (set (reg:DF 14 st(6))
        (minus:DF (reg:DF 14 st(6))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -128 [0xffffff80])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1888 586 587 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 587 1888 588 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 14 st(6)))) 314 {*fop_df_comm} (insn_list 586 (nil))
    (nil))

(insn 588 587 1891 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 581 (insn_list 587 (nil)))
    (nil))

(insn 1891 588 590 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -264 [0xfffffef8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 590 1891 591 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 591 590 1894 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 588 (insn_list 590 (nil)))
    (nil))

(insn 1894 591 592 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) 63 {*movdf_integer} (nil)
    (nil))

(insn 592 1894 594 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 591 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 272 [0x110])) 0)
        (nil)))

(insn 594 592 1897 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 272 [0x110])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 592 (nil))
    (nil))

(insn 1897 594 605 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 605 1897 606 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 14 st(6)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 606 605 608 (set (reg:DF 11 st(3))
        (plus:DF (reg:DF 11 st(3))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 605 (nil))
    (nil))

(insn 608 606 609 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 609 608 1900 (set (reg:DF 11 st(3))
        (minus:DF (reg:DF 11 st(3))
            (reg:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 606 (insn_list 608 (nil)))
    (nil))

(insn 1900 609 610 (set (reg:DF 8 st(0))
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 610 1900 612 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 609 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 280 [0x118])) 0)
        (nil)))

(insn 612 610 614 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 280 [0x118])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 610 (nil))
    (nil))
;; End of basic block 17, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85

;; Start of basic block 18, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85
(code_label 614 612 1376 642 "" "" [1 uses])

(note 1376 614 617 [bb 18] NOTE_INSN_BASIC_BLOCK 0)

(insn 617 1376 1903 (set (reg:DF 10 st(2))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1903 617 2615 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2615 1903 2616 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 10 st(2)))
            ]  9)) -1 (nil)
    (nil))

(insn 2616 2615 2617 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2617 2616 2618 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2618 2617 1377 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 668)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 18, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 330

;; Start of basic block 19, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85 330
(note 1377 2618 1906 [bb 19] NOTE_INSN_BASIC_BLOCK 0)

(insn 1906 1377 625 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 625 1906 1909 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(note 1909 625 626 NOTE_INSN_DELETED 0)

(insn 626 1909 1912 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 625 (nil))
    (nil))

(note 1912 626 1915 NOTE_INSN_DELETED 0)

(insn 1915 1912 627 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 627 1915 628 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 628 627 1918 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 626 (insn_list 627 (nil)))
    (nil))

(insn 1918 628 1921 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -192 [0xffffff40])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1921 1918 630 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 630 1921 1924 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(note 1924 630 631 NOTE_INSN_DELETED 0)

(insn 631 1924 1927 (set (reg:DF 12 st(4))
        (div:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 319 {*fop_df_1} (insn_list 630 (nil))
    (nil))

(note 1927 631 1930 NOTE_INSN_DELETED 0)

(insn 1930 1927 632 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 632 1930 1933 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1933 632 633 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 633 1933 634 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 634 633 636 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 632 (insn_list 633 (nil)))
    (nil))

(note 636 634 637 NOTE_INSN_DELETED 0)

(insn 637 636 638 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0))) 319 {*fop_df_1} (insn_list 634 (nil))
    (nil))

(insn 638 637 1936 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 631 (insn_list 637 (nil)))
    (nil))

(insn 1936 638 1939 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1939 1936 2610 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2610 1939 2611 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 8 st(0))
                    (reg:DF 10 st(2)))
            ]  9)) -1 (nil)
    (nil))

(insn 2611 2610 2612 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2612 2611 2613 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2613 2612 1378 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 653)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 19, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85

;; Start of basic block 20, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85
(note 1378 2613 1942 [bb 20] NOTE_INSN_BASIC_BLOCK 0)

(insn 1942 1378 647 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 647 1942 648 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 648 647 649 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (insn_list 647 (nil))
    (nil))

(insn 649 648 1945 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 648 (nil))
    (nil))

(note 1945 649 650 NOTE_INSN_DELETED 0)

(insn 650 1945 1948 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -208 [0xffffff30])) 0))) 319 {*fop_df_1} (insn_list 649 (nil))
    (nil))

(insn 1948 650 651 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -200 [0xffffff38])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 651 1948 652 (set (pc)
        (label_ref 752)) 296 {jump} (nil)
    (nil))
;; End of basic block 20, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85

(barrier 652 651 653)

;; Start of basic block 21, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 80 81 82 83 84 85
(code_label 653 652 1379 645 "" "" [1 uses])

(note 1379 653 1951 [bb 21] NOTE_INSN_BASIC_BLOCK 0)

(insn 1951 1379 655 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 655 1951 656 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 656 655 1954 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (insn_list 655 (nil))
    (nil))

(insn 1954 656 657 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 657 1954 1957 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1957 657 658 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 658 1957 659 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 659 658 660 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 658 (nil))
    (nil))

(insn 660 659 661 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 657 (insn_list 659 (nil)))
    (nil))

(insn 661 660 662 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 656 (insn_list 660 (nil)))
    (nil))

(insn 662 661 1960 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 661 (nil))
    (nil))

(insn 1960 662 1963 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -200 [0xffffff38])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1963 1960 663 (set (reg:DF 9 st(1))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 663 1963 1966 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -208 [0xffffff30])) 0))) 319 {*fop_df_1} (insn_list 662 (nil))
    (nil))

(insn 1966 663 666 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -200 [0xffffff38])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 666 1966 667 (set (pc)
        (label_ref 752)) 296 {jump} (nil)
    (nil))
;; End of basic block 21, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85

(barrier 667 666 668)

;; Start of basic block 22, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85
(code_label 668 667 1380 643 "" "" [1 uses])

(note 1380 668 673 [bb 22] NOTE_INSN_BASIC_BLOCK 0)

(insn 673 1380 1969 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 1969 673 2604 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2604 1969 2605 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2605 2604 2606 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2606 2605 2607 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2607 2606 1381 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 686)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 22, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85

;; Start of basic block 23, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85
(note 1381 2607 1972 [bb 23] NOTE_INSN_BASIC_BLOCK 0)

(insn 1972 1381 678 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 678 1972 1975 (set (reg:DF 12 st(4))
        (div:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(note 1975 678 1978 NOTE_INSN_DELETED 0)

(insn 1978 1975 680 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 680 1978 1981 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 1981 680 681 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 681 1981 682 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 682 681 683 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 680 (insn_list 681 (nil)))
    (nil))

(insn 683 682 1984 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 678 (insn_list 682 (nil)))
    (nil))

(insn 1984 683 684 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 684 1984 685 (set (pc)
        (label_ref 695)) 296 {jump} (nil)
    (nil))
;; End of basic block 23, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85

(barrier 685 684 686)

;; Start of basic block 24, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 81 82 83 84 85
(code_label 686 685 1382 649 "" "" [1 uses])

(note 1382 686 1987 [bb 24] NOTE_INSN_BASIC_BLOCK 0)

(insn 1987 1382 687 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 687 1987 1990 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1990 687 1993 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1993 1990 688 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 688 1993 1996 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1996 688 689 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 689 1996 690 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 688 (nil))
    (nil))

(insn 690 689 1999 (set (reg:DF 9 st(1))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0)
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 689 (nil))
    (nil))

(insn 1999 690 691 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 691 1999 692 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 692 691 693 (set (reg:DF 8 st(0))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -72 [0xffffffb8])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 691 (nil))
    (nil))

(insn 693 692 694 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 690 (insn_list 692 (nil)))
    (nil))

(insn 694 693 2002 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -208 [0xffffff30])) 0))) 314 {*fop_df_comm} (insn_list 687 (insn_list 693 (nil)))
    (nil))

(insn 2002 694 695 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 24, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85

;; Start of basic block 25, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85
(code_label 695 2002 1383 650 "" "" [1 uses])

(note 1383 695 698 [bb 25] NOTE_INSN_BASIC_BLOCK 0)

(insn 698 1383 2005 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2005 698 2598 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2598 2005 2599 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2599 2598 2600 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2600 2599 2601 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2601 2600 1384 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 710)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 25, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85

;; Start of basic block 26, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85
(note 1384 2601 2008 [bb 26] NOTE_INSN_BASIC_BLOCK 0)

(insn 2008 1384 704 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 704 2008 705 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 705 704 706 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (insn_list 704 (nil))
    (nil))

(insn 706 705 2011 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 705 (nil))
    (nil))

(note 2011 706 707 NOTE_INSN_DELETED 0)

(insn 707 2011 2014 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -208 [0xffffff30])) 0))) 319 {*fop_df_1} (insn_list 706 (nil))
    (nil))

(insn 2014 707 708 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -200 [0xffffff38])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 708 2014 709 (set (pc)
        (label_ref 721)) 296 {jump} (nil)
    (nil))
;; End of basic block 26, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85

(barrier 709 708 710)

;; Start of basic block 27, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 80 81 82 83 84 85
(code_label 710 709 1385 652 "" "" [1 uses])

(note 1385 710 2017 [bb 27] NOTE_INSN_BASIC_BLOCK 0)

(insn 2017 1385 712 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 712 2017 713 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 713 712 2020 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (insn_list 712 (nil))
    (nil))

(insn 2020 713 714 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 714 2020 2023 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2023 714 715 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 715 2023 716 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 716 715 717 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 715 (nil))
    (nil))

(insn 717 716 718 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 714 (insn_list 716 (nil)))
    (nil))

(insn 718 717 719 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 713 (insn_list 717 (nil)))
    (nil))

(insn 719 718 2026 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 718 (nil))
    (nil))

(insn 2026 719 2029 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -200 [0xffffff38])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2029 2026 720 (set (reg:DF 12 st(4))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 720 2029 2032 (set (reg:DF 12 st(4))
        (minus:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -208 [0xffffff30])) 0))) 319 {*fop_df_1} (insn_list 719 (nil))
    (nil))

(insn 2032 720 721 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -200 [0xffffff38])) 0)
        (reg:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 27, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85

;; Start of basic block 28, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85
(code_label 721 2032 1386 653 "" "" [1 uses])

(note 1386 721 724 [bb 28] NOTE_INSN_BASIC_BLOCK 0)

(insn 724 1386 2035 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2035 724 2591 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2591 2035 2592 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2592 2591 2593 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2593 2592 2594 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2594 2593 1387 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 738)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 28, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85

;; Start of basic block 29, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85
(note 1387 2594 2038 [bb 29] NOTE_INSN_BASIC_BLOCK 0)

(insn 2038 1387 729 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 729 2038 2041 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2041 729 730 NOTE_INSN_DELETED 0)

(insn 730 2041 2044 (set (reg:DF 12 st(4))
        (div:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 729 (nil))
    (nil))

(note 2044 730 2047 NOTE_INSN_DELETED 0)

(insn 2047 2044 731 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 731 2047 733 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(note 733 731 734 NOTE_INSN_DELETED 0)

(insn 734 733 735 (set (reg:DF 8 st(0))
        (div:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 731 (nil))
    (nil))

(insn 735 734 2050 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 730 (insn_list 734 (nil)))
    (nil))

(insn 2050 735 736 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -192 [0xffffff40])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 736 2050 737 (set (pc)
        (label_ref 752)) 296 {jump} (nil)
    (nil))
;; End of basic block 29, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85

(barrier 737 736 738)

;; Start of basic block 30, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 79 80 81 82 83 84 85
(code_label 738 737 1388 655 "" "" [1 uses])

(note 1388 738 2053 [bb 30] NOTE_INSN_BASIC_BLOCK 0)

(insn 2053 1388 739 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 739 2053 2056 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2056 739 740 NOTE_INSN_DELETED 0)

(insn 740 2056 2059 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 739 (nil))
    (nil))

(insn 2059 740 2062 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -192 [0xffffff40])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2062 2059 741 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 741 2062 743 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(note 743 741 744 NOTE_INSN_DELETED 0)

(insn 744 743 2065 (set (reg:DF 8 st(0))
        (div:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 741 (nil))
    (nil))

(insn 2065 744 745 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 745 2065 746 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 746 745 747 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 745 (nil))
    (nil))

(insn 747 746 748 (set (reg:DF 9 st(1))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0)
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 746 (nil))
    (nil))

(insn 748 747 749 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 744 (insn_list 747 (nil)))
    (nil))

(insn 749 748 2068 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -192 [0xffffff40])) 0))) 314 {*fop_df_comm} (insn_list 740 (insn_list 748 (nil)))
    (nil))

(insn 2068 749 752 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -192 [0xffffff40])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 30, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85

;; Start of basic block 31, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85
(code_label 752 2068 1389 648 "" "" [3 uses])

(note 1389 752 755 [bb 31] NOTE_INSN_BASIC_BLOCK 0)

(insn 755 1389 2071 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2071 755 2586 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2586 2071 2587 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2587 2586 2588 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2588 2587 2589 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2589 2588 1390 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 774)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 31, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85

;; Start of basic block 32, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85
(note 1390 2589 2074 [bb 32] NOTE_INSN_BASIC_BLOCK 0)

(insn 2074 1390 760 (set (reg/v:DF 15 st(7))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 760 2074 761 (set (reg/v:DF 15 st(7))
        (mult:DF (reg/v:DF 15 st(7))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 761 760 2077 (set (reg/v:DF 15 st(7))
        (div:DF (reg/v:DF 15 st(7))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 319 {*fop_df_1} (insn_list 760 (nil))
    (nil))

(insn 2077 761 764 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 764 2077 765 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 765 764 2080 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (insn_list 764 (nil))
    (nil))

(insn 2080 765 766 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 766 2080 767 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 767 766 769 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 765 (insn_list 766 (nil)))
    (nil))

(note 769 767 770 NOTE_INSN_DELETED 0)

(insn 770 769 771 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0))) 319 {*fop_df_1} (insn_list 767 (nil))
    (nil))

(insn 771 770 772 (set (reg/v:DF 15 st(7))
        (mult:DF (reg/v:DF 15 st(7))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 761 (insn_list 770 (nil)))
    (nil))

(jump_insn 772 771 773 (set (pc)
        (label_ref 787)) 296 {jump} (nil)
    (nil))
;; End of basic block 32, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85

(barrier 773 772 774)

;; Start of basic block 33, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 78 79 80 81 82 83 84 85
(code_label 774 773 1391 658 "" "" [1 uses])

(note 1391 774 2083 [bb 33] NOTE_INSN_BASIC_BLOCK 0)

(insn 2083 1391 775 (set (reg/v:DF 15 st(7))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 775 2083 2086 (set (reg/v:DF 15 st(7))
        (div:DF (reg/v:DF 15 st(7))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 2086 775 776 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 776 2086 2089 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2089 776 777 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 777 2089 778 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 778 777 780 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 776 (insn_list 777 (nil)))
    (nil))

(note 780 778 2092 NOTE_INSN_DELETED 0)

(insn 2092 780 781 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -152 [0xffffff68])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 781 2092 782 (set (reg:DF 9 st(1))
        (div:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0)
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 782 781 783 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 778 (insn_list 781 (nil)))
    (nil))

(insn 783 782 2095 (set (reg/v:DF 15 st(7))
        (mult:DF (reg/v:DF 15 st(7))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 775 (insn_list 782 (nil)))
    (nil))

(insn 2095 783 784 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 784 2095 785 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -208 [0xffffff30])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 785 784 786 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 784 (nil))
    (nil))

(insn 786 785 787 (set (reg/v:DF 15 st(7))
        (minus:DF (reg/v:DF 15 st(7))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 783 (insn_list 785 (nil)))
    (nil))
;; End of basic block 33, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85

;; Start of basic block 34, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85
(code_label 787 786 1392 659 "" "" [1 uses])

(note 1392 787 790 [bb 34] NOTE_INSN_BASIC_BLOCK 0)

(insn 790 1392 2098 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2098 790 2581 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2581 2098 2582 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2582 2581 2583 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2583 2582 2584 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2584 2583 1393 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 810)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 34, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85

;; Start of basic block 35, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 57 58 59 60 67 68 72 78 79 80 81 82 83 84 85
(note 1393 2584 2101 [bb 35] NOTE_INSN_BASIC_BLOCK 0)

(insn 2101 1393 795 (set (reg/v:DF 14 st(6))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -104 [0xffffff98])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 795 2101 796 (set (reg/v:DF 14 st(6))
        (mult:DF (reg/v:DF 14 st(6))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 796 795 797 (set (reg/v:DF 14 st(6))
        (mult:DF (reg/v:DF 14 st(6))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 795 (nil))
    (nil))

(insn 797 796 2104 (set (reg/v:DF 14 st(6))
        (div:DF (reg/v:DF 14 st(6))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 319 {*fop_df_1} (insn_list 796 (nil))
    (nil))

(insn 2104 797 800 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 800 2104 801 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 801 800 2107 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 800 (nil))
    (nil))

(insn 2107 801 802 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 802 2107 803 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -152 [0xffffff68])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 803 802 805 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 801 (insn_list 802 (nil)))
    (nil))

(note 805 803 806 NOTE_INSN_DELETED 0)

(insn 806 805 807 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC101")) 0))) 319 {*fop_df_1} (insn_list 803 (nil))
    (nil))

(insn 807 806 808 (set (reg/v:DF 14 st(6))
        (mult:DF (reg/v:DF 14 st(6))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 797 (insn_list 806 (nil)))
    (nil))

(jump_insn 808 807 809 (set (pc)
        (label_ref 819)) 296 {jump} (nil)
    (nil))
;; End of basic block 35, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85

(barrier 809 808 810)

;; Start of basic block 36, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 68 72 78 79 80 81 82 83 84 85
(code_label 810 809 1394 661 "" "" [1 uses])

(note 1394 810 2110 [bb 36] NOTE_INSN_BASIC_BLOCK 0)

(insn 2110 1394 811 (set (reg/v:DF 14 st(6))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 811 2110 2113 (set (reg/v:DF 14 st(6))
        (div:DF (reg/v:DF 14 st(6))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 2113 811 812 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 812 2113 2116 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -72 [0xffffffb8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2116 812 813 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 813 2116 814 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -160 [0xffffff60])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 814 813 815 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 812 (insn_list 813 (nil)))
    (nil))

(insn 815 814 2119 (set (reg/v:DF 14 st(6))
        (mult:DF (reg/v:DF 14 st(6))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 811 (insn_list 814 (nil)))
    (nil))

(insn 2119 815 816 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 816 2119 817 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -192 [0xffffff40])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 817 816 818 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 319 {*fop_df_1} (insn_list 816 (nil))
    (nil))

(insn 818 817 819 (set (reg/v:DF 14 st(6))
        (minus:DF (reg/v:DF 14 st(6))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 815 (insn_list 817 (nil)))
    (nil))
;; End of basic block 36, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85

;; Start of basic block 37, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85
(code_label 819 818 1395 662 "" "" [1 uses])

(note 1395 819 822 [bb 37] NOTE_INSN_BASIC_BLOCK 0)

(insn 822 1395 2122 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2122 822 2576 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2576 2122 2577 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2577 2576 2578 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2578 2577 2579 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2579 2578 1396 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 831)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 37, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85

;; Start of basic block 38, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85
(note 1396 2579 2125 [bb 38] NOTE_INSN_BASIC_BLOCK 0)

(insn 2125 1396 2570 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)
        (reg/v:DF 14 st(6))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2570 2125 2571 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -280 [0xfffffee8])) 0)) -1 (nil)
    (nil))

(insn 2571 2570 828 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -276 [0xfffffeec])) 0)) -1 (nil)
    (nil))

(insn 828 2571 2573 (parallel[ 
            (set (reg:SI 1 edx)
                (xor:SI (reg:SI 1 edx)
                    (const_int -2147483648 [0x80000000])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2573 828 2574 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -168 [0xffffff58])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 2574 2573 829 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -164 [0xffffff5c])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(jump_insn 829 2574 830 (set (pc)
        (label_ref 839)) 296 {jump} (nil)
    (nil))
;; End of basic block 38, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85

(barrier 830 829 831)

;; Start of basic block 39, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 78 79 80 81 82 83 84 85
(code_label 831 830 1397 664 "" "" [1 uses])

(note 1397 831 2134 [bb 39] NOTE_INSN_BASIC_BLOCK 0)

(insn 2134 1397 833 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 833 2134 2137 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 2137 833 834 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 834 2137 835 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 835 834 836 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 834 (nil))
    (nil))

(insn 836 835 837 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 833 (insn_list 835 (nil)))
    (nil))

(insn 837 836 2140 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -40 [0xffffffd8])) 0))) 314 {*fop_df_comm} (insn_list 836 (nil))
    (nil))

(note 2140 837 838 NOTE_INSN_DELETED 0)

(insn 838 2140 2143 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg/v:DF 14 st(6)))) 319 {*fop_df_1} (insn_list 837 (nil))
    (nil))

(insn 2143 838 839 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -168 [0xffffff58])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 39, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85

;; Start of basic block 40, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85
(code_label 839 2143 1398 665 "" "" [1 uses])

(note 1398 839 842 [bb 40] NOTE_INSN_BASIC_BLOCK 0)

(insn 842 1398 2146 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2146 842 2565 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2565 2146 2566 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2566 2565 2567 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2567 2566 2568 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2568 2567 1399 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 854)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 40, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85

;; Start of basic block 41, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85
(note 1399 2568 2149 [bb 41] NOTE_INSN_BASIC_BLOCK 0)

(insn 2149 1399 848 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 848 2149 849 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 849 848 2152 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (insn_list 848 (nil))
    (nil))

(insn 2152 849 850 (set (reg/v:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 850 2152 851 (set (reg/v:DF 12 st(4))
        (mult:DF (reg/v:DF 12 st(4))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 849 (nil))
    (nil))

(insn 851 850 852 (set (reg/v:DF 12 st(4))
        (minus:DF (reg/v:DF 12 st(4))
            (reg/v:DF 15 st(7)))) 319 {*fop_df_1} (insn_list 850 (nil))
    (nil))

(jump_insn 852 851 853 (set (pc)
        (label_ref 865)) 296 {jump} (nil)
    (nil))
;; End of basic block 41, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 78 79 80 81 82 83 84 85

(barrier 853 852 854)

;; Start of basic block 42, registers live: 6 [bp] 7 [sp] 43 44 45 46 48 49 52 53 54 55 58 59 60 72 73 74 78 79 80 81 82 83 84 85
(code_label 854 853 1400 667 "" "" [1 uses])

(note 1400 854 2155 [bb 42] NOTE_INSN_BASIC_BLOCK 0)

(insn 2155 1400 856 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 856 2155 857 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 857 856 2158 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (insn_list 856 (nil))
    (nil))

(insn 2158 857 858 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 858 2158 2161 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2161 858 859 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 859 2161 860 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 860 859 861 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 859 (nil))
    (nil))

(insn 861 860 862 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 858 (insn_list 860 (nil)))
    (nil))

(insn 862 861 2164 (set (reg:DF 10 st(2))
        (minus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 857 (insn_list 861 (nil)))
    (nil))

(insn 2164 862 863 (set (reg/v:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 863 2164 864 (set (reg/v:DF 12 st(4))
        (mult:DF (reg/v:DF 12 st(4))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 862 (nil))
    (nil))

(insn 864 863 865 (set (reg/v:DF 12 st(4))
        (minus:DF (reg/v:DF 12 st(4))
            (reg/v:DF 15 st(7)))) 319 {*fop_df_1} (insn_list 863 (nil))
    (nil))
;; End of basic block 42, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 78 79 80 81 82 83 84 85

;; Start of basic block 43, registers live: 6 [bp] 7 [sp] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 78 79 80 81 82 83 84 85
(code_label 865 864 1401 668 "" "" [1 uses])

(note 1401 865 2167 [bb 43] NOTE_INSN_BASIC_BLOCK 0)

(insn 2167 1401 869 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 869 2167 2170 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2170 869 870 NOTE_INSN_DELETED 0)

(insn 870 2170 2173 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (insn_list 869 (nil))
    (nil))

(insn 2173 870 2176 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -176 [0xffffff50])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2176 2173 871 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 871 2176 2179 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2179 871 872 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 872 2179 2182 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 871 (nil))
    (nil))

(insn 2182 872 873 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 873 2182 2185 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2185 873 874 (set (reg:DF 8 st(0))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 874 2185 876 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 872 (insn_list 873 (nil)))
    (nil))

(insn 876 874 877 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 874 (nil))
    (nil))

(insn 877 876 2188 (set (reg:DF 8 st(0))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 870 (insn_list 876 (nil)))
    (nil))

(insn 2188 877 880 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -176 [0xffffff50])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 880 2188 2191 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2191 880 2558 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2558 2191 2559 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2559 2558 2560 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2560 2559 2561 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 2561 2560 1402 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 898)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 43, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 424

;; Start of basic block 44, registers live: 6 [bp] 7 [sp] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85 424
(note 1402 2561 2194 [bb 44] NOTE_INSN_BASIC_BLOCK 0)

(insn 2194 1402 887 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 887 2194 2197 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2197 887 888 NOTE_INSN_DELETED 0)

(insn 888 2197 2200 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (insn_list 887 (nil))
    (nil))

(insn 2200 888 2203 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -184 [0xffffff48])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2203 2200 891 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 891 2203 2206 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2206 891 892 (set (reg:DF 8 st(0))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 892 2206 894 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 891 (nil))
    (nil))

(insn 894 892 895 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 892 (nil))
    (nil))

(insn 895 894 2209 (set (reg:DF 8 st(0))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 888 (insn_list 894 (nil)))
    (nil))

(insn 2209 895 896 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -184 [0xffffff48])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(jump_insn 896 2209 897 (set (pc)
        (label_ref 901)) 296 {jump} (nil)
    (nil))
;; End of basic block 44, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85

(barrier 897 896 898)

;; Start of basic block 45, registers live: 6 [bp] 7 [sp] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 78 79 80 81 82 83 84 85
(code_label 898 897 1403 670 "" "" [1 uses])

(note 1403 898 900 [bb 45] NOTE_INSN_BASIC_BLOCK 0)

(insn 900 1403 2212 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2212 900 901 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -184 [0xffffff48])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 45, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85

;; Start of basic block 46, registers live: 6 [bp] 7 [sp] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 83 84 85
(code_label 901 2212 1404 671 "" "" [1 uses])

(note 1404 901 2215 [bb 46] NOTE_INSN_BASIC_BLOCK 0)

(insn 2215 1404 904 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 904 2215 2218 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2218 904 905 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -224 [0xffffff20])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 905 2218 906 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 906 905 2221 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 905 (nil))
    (nil))

(insn 2221 906 907 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 907 2221 908 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 908 907 909 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 906 (insn_list 907 (nil)))
    (nil))

(insn 909 908 911 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 904 (insn_list 908 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 288 [0x120])) 0)
        (nil)))

(insn 911 909 2224 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 288 [0x120])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 909 (nil))
    (nil))

(insn 2224 911 915 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -232 [0xffffff18])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 915 2224 2227 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -80 [0xffffffb0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2227 915 916 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 916 2227 2230 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2230 916 2233 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -272 [0xfffffef0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 2233 2230 917 (set (reg:DF 13 st(5))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 917 2233 2236 (set (reg:DF 13 st(5))
        (mult:DF (reg:DF 13 st(5))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (nil)
    (nil))

(note 2236 917 918 NOTE_INSN_DELETED 0)

(insn 918 2236 919 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 916 (insn_list 917 (nil)))
    (nil))

(insn 919 918 920 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 314 {*fop_df_comm} (insn_list 918 (nil))
    (nil))

(insn 920 919 2239 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 915 (insn_list 919 (nil)))
    (nil))

(insn 2239 920 921 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -232 [0xffffff18])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 921 2239 922 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 922 921 923 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg/v:DF 14 st(6)))) 314 {*fop_df_comm} (insn_list 921 (nil))
    (nil))

(insn 923 922 924 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 922 (nil))
    (nil))

(insn 924 923 2242 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 920 (insn_list 923 (nil)))
    (nil))

(insn 2242 924 925 (set (reg:DF 8 st(0))
        (reg:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 925 2242 927 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 924 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 296 [0x128])) 0)
        (nil)))

(insn 927 925 2245 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 296 [0x128])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 925 (nil))
    (nil))

(insn 2245 927 931 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 931 2245 2248 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2248 931 932 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 932 2248 933 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 931 (nil))
    (nil))

(insn 933 932 935 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 932 (nil))
    (nil))

(insn 935 933 936 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 936 935 937 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 935 (nil))
    (nil))

(insn 937 936 938 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg/v:DF 14 st(6)))) 319 {*fop_df_1} (insn_list 936 (nil))
    (nil))

(insn 938 937 939 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 937 (nil))
    (nil))

(insn 939 938 2251 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 933 (insn_list 938 (nil)))
    (nil))

(insn 2251 939 940 (set (reg:DF 8 st(0))
        (reg:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 940 2251 942 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 939 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 304 [0x130])) 0)
        (nil)))

(insn 942 940 945 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 304 [0x130])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 940 (nil))
    (nil))

(insn 945 942 2254 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2254 945 2552 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2552 2254 2553 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2553 2552 2554 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2554 2553 2555 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2555 2554 1405 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 972)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 46, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446

;; Start of basic block 47, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85 437 445 446
(note 1405 2555 2257 [bb 47] NOTE_INSN_BASIC_BLOCK 0)

(insn 2257 1405 952 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 952 2257 953 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 953 952 954 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 952 (nil))
    (nil))

(insn 954 953 2260 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 953 (nil))
    (nil))

(insn 2260 954 956 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 956 2260 957 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 957 956 958 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 956 (nil))
    (nil))

(insn 958 957 2263 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 957 (nil))
    (nil))

(insn 2263 958 960 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -224 [0xffffff20])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 960 2263 961 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -272 [0xfffffef0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 961 960 962 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 960 (nil))
    (nil))

(insn 962 961 963 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 961 (nil))
    (nil))

(insn 963 962 964 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 958 (insn_list 962 (nil)))
    (nil))

(insn 964 963 965 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 963 (nil))
    (nil))

(insn 965 964 966 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 964 (nil))
    (nil))

(insn 966 965 2266 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 954 (insn_list 965 (nil)))
    (nil))

(insn 2266 966 967 (set (reg:DF 8 st(0))
        (reg:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 967 2266 969 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 966 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 312 [0x138])) 0)
        (nil)))

(insn 969 967 970 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 312 [0x138])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 967 (nil))
    (nil))

(jump_insn 970 969 971 (set (pc)
        (label_ref 999)) 296 {jump} (nil)
    (nil))
;; End of basic block 47, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

(barrier 971 970 972)

;; Start of basic block 48, registers live: 6 [bp] 7 [sp] 43 44 46 48 49 52 53 54 55 58 59 60 72 73 74 75 76 77 78 79 80 81 82 84 85
(code_label 972 971 1406 673 "" "" [1 uses])

(note 1406 972 2269 [bb 48] NOTE_INSN_BASIC_BLOCK 0)

(insn 2269 1406 974 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 974 2269 2272 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2272 974 975 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 975 2272 976 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 976 975 977 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 975 (nil))
    (nil))

(insn 977 976 2275 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 976 (nil))
    (nil))

(insn 2275 977 978 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 978 2275 979 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 979 978 980 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 978 (nil))
    (nil))

(insn 980 979 981 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 979 (nil))
    (nil))

(insn 981 980 2278 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 980 (nil))
    (nil))

(insn 2278 981 984 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 984 2278 985 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 985 984 986 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 984 (nil))
    (nil))

(insn 986 985 987 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -248 [0xffffff08])) 0))) 319 {*fop_df_1} (insn_list 985 (nil))
    (nil))

(insn 987 986 2281 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 981 (insn_list 986 (nil)))
    (nil))

(insn 2281 987 988 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 988 2281 989 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 989 988 990 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -224 [0xffffff20])) 0))) 314 {*fop_df_comm} (insn_list 988 (nil))
    (nil))

(insn 990 989 991 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 989 (nil))
    (nil))

(insn 991 990 992 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 990 (nil))
    (nil))

(insn 992 991 993 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 987 (insn_list 991 (nil)))
    (nil))

(insn 993 992 994 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 319 {*fop_df_1} (insn_list 992 (nil))
    (nil))

(insn 994 993 995 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 993 (nil))
    (nil))

(insn 995 994 996 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 977 (insn_list 994 (nil)))
    (nil))

(insn 996 995 998 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 974 (insn_list 995 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 312 [0x138])) 0)
        (nil)))

(insn 998 996 999 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 312 [0x138])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 996 (nil))
    (nil))
;; End of basic block 48, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

;; Start of basic block 49, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85
(code_label 999 998 1407 674 "" "" [1 uses])

(note 1407 999 2284 [bb 49] NOTE_INSN_BASIC_BLOCK 0)

(insn 2284 1407 1002 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1002 2284 2287 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 2287 1002 1003 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1003 2287 1004 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1004 1003 2290 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1003 (nil))
    (nil))

(insn 2290 1004 1005 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -168 [0xffffff58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1005 2290 1006 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1006 1005 1007 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1005 (nil))
    (nil))

(insn 1007 1006 2293 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1004 (insn_list 1006 (nil)))
    (nil))

(insn 2293 1007 1008 (set (reg:DF 8 st(0))
        (reg:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1008 2293 1010 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1002 (insn_list 1007 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 320 [0x140])) 0)
        (nil)))

(insn 1010 1008 2296 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 320 [0x140])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1008 (nil))
    (nil))

(insn 2296 1010 1014 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1014 2296 2299 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2299 1014 1015 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -240 [0xffffff10])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1015 2299 2302 (set (reg:DF 11 st(3))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 319 {*fop_df_1} (insn_list 1014 (nil))
    (nil))

(insn 2302 1015 1016 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1016 2302 1017 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1017 1016 2305 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 11 st(3))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1015 (insn_list 1016 (nil)))
    (nil))

(insn 2305 1017 1018 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1018 2305 1019 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1019 1018 1020 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1018 (nil))
    (nil))

(insn 1020 1019 1021 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1017 (insn_list 1019 (nil)))
    (nil))

(insn 1021 1020 1023 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1020 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 328 [0x148])) 0)
        (nil)))

(insn 1023 1021 1026 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 328 [0x148])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1021 (nil))
    (nil))

(insn 1026 1023 2308 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2308 1026 2545 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2545 2308 2546 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 12 st(4))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2546 2545 2547 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2547 2546 2548 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2548 2547 1408 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1043)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 49, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 519

;; Start of basic block 50, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85 506 515 519
(note 1408 2548 2311 [bb 50] NOTE_INSN_BASIC_BLOCK 0)

(insn 2311 1408 1037 (set (reg:DF 8 st(0))
        (reg:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1037 2311 1038 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1038 1037 1040 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1037 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 336 [0x150])) 0)
        (nil)))

(insn 1040 1038 1041 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 336 [0x150])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1038 (nil))
    (nil))

(jump_insn 1041 1040 1042 (set (pc)
        (label_ref 1057)) 296 {jump} (nil)
    (nil))
;; End of basic block 50, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

(barrier 1042 1041 1043)

;; Start of basic block 51, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85
(code_label 1043 1042 1409 676 "" "" [1 uses])

(note 1409 1043 2314 [bb 51] NOTE_INSN_BASIC_BLOCK 0)

(insn 2314 1409 1045 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1045 2314 2317 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 2317 1045 1046 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1046 2317 1047 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1047 1046 2320 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1046 (nil))
    (nil))

(insn 2320 1047 1048 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1048 2320 1049 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1049 1048 1050 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -248 [0xffffff08])) 0))) 319 {*fop_df_1} (insn_list 1048 (nil))
    (nil))

(insn 1050 1049 2323 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1047 (insn_list 1049 (nil)))
    (nil))

(insn 2323 1050 1051 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1051 2323 1052 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1052 1051 1053 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1051 (nil))
    (nil))

(insn 1053 1052 1054 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1050 (insn_list 1052 (nil)))
    (nil))

(insn 1054 1053 1056 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1045 (insn_list 1053 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 336 [0x150])) 0)
        (nil)))

(insn 1056 1054 1057 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 336 [0x150])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (insn_list 1054 (nil))
    (nil))
;; End of basic block 51, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

;; Start of basic block 52, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85
(code_label 1057 1056 1410 677 "" "" [1 uses])

(note 1410 1057 1060 [bb 52] NOTE_INSN_BASIC_BLOCK 0)

(insn 1060 1410 2326 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2326 1060 2538 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2538 2326 2539 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2539 2538 2540 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2540 2539 2541 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2541 2540 1411 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1086)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 52, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

;; Start of basic block 53, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85
(note 1411 2541 2329 [bb 53] NOTE_INSN_BASIC_BLOCK 0)

(insn 2329 1411 1066 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1066 2329 2332 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2332 1066 1067 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1067 2332 1068 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1068 1067 1069 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1067 (nil))
    (nil))

(insn 1069 1068 2335 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0))) 314 {*fop_df_comm} (insn_list 1068 (nil))
    (nil))

(insn 2335 1069 1072 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1072 2335 2338 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2338 1072 1073 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1073 2338 1074 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1074 1073 1075 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 1073 (nil))
    (nil))

(insn 1075 1074 1076 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 319 {*fop_df_1} (insn_list 1072 (insn_list 1074 (nil)))
    (nil))

(insn 1076 1075 1077 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1075 (nil))
    (nil))

(insn 1077 1076 2341 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1069 (insn_list 1076 (nil)))
    (nil))

(insn 2341 1077 1078 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1078 2341 1079 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 14 st(6)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1079 1078 1080 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1078 (nil))
    (nil))

(insn 1080 1079 1081 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1077 (insn_list 1079 (nil)))
    (nil))

(insn 1081 1080 1083 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1066 (insn_list 1080 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 344 [0x158])) 0)
        (nil)))

(insn 1083 1081 1084 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 344 [0x158])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 1081 (nil))
    (nil))

(jump_insn 1084 1083 1085 (set (pc)
        (label_ref 1109)) 296 {jump} (nil)
    (nil))
;; End of basic block 53, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

(barrier 1085 1084 1086)

;; Start of basic block 54, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85
(code_label 1086 1085 1412 679 "" "" [1 uses])

(note 1412 1086 2344 [bb 54] NOTE_INSN_BASIC_BLOCK 0)

(insn 2344 1412 1088 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1088 2344 2347 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2347 1088 1089 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1089 2347 1090 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1090 1089 1091 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1089 (nil))
    (nil))

(insn 1091 1090 2350 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0))) 314 {*fop_df_comm} (insn_list 1090 (nil))
    (nil))

(insn 2350 1091 1094 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1094 2350 2353 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2353 1094 1095 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1095 2353 1096 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1096 1095 1097 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 1095 (nil))
    (nil))

(insn 1097 1096 2356 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1094 (insn_list 1096 (nil)))
    (nil))

(insn 2356 1097 1098 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1098 2356 1099 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1099 1098 1100 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -248 [0xffffff08])) 0))) 319 {*fop_df_1} (insn_list 1098 (nil))
    (nil))

(insn 1100 1099 1101 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1097 (insn_list 1099 (nil)))
    (nil))

(insn 1101 1100 1102 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1100 (nil))
    (nil))

(insn 1102 1101 2359 (set (reg:DF 10 st(2))
        (minus:DF (reg:DF 10 st(2))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 1091 (insn_list 1101 (nil)))
    (nil))

(insn 2359 1102 1103 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1103 2359 1104 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 14 st(6)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1104 1103 1105 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1103 (nil))
    (nil))

(insn 1105 1104 1106 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1102 (insn_list 1104 (nil)))
    (nil))

(insn 1106 1105 1108 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1088 (insn_list 1105 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 344 [0x158])) 0)
        (nil)))

(insn 1108 1106 1109 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 344 [0x158])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 1106 (nil))
    (nil))
;; End of basic block 54, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85

;; Start of basic block 55, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 58 59 60 72 73 74 76 77 78 79 80 81 82 84 85
(code_label 1109 1108 1413 680 "" "" [1 uses])

(note 1413 1109 2362 [bb 55] NOTE_INSN_BASIC_BLOCK 0)

(insn 2362 1413 1112 (set (reg:DF 13 st(5))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) 63 {*movdf_integer} (nil)
    (nil))

(insn 1112 2362 2365 (set (reg:DF 13 st(5))
        (neg:DF (reg:DF 13 st(5)))) -1 (nil)
    (nil))

(insn 2365 1112 1113 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1113 2365 2368 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2368 1113 1114 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1114 2368 1115 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 1113 (nil))
    (nil))

(insn 1115 1114 2371 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1114 (nil))
    (nil))

(insn 2371 1115 1116 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -168 [0xffffff58])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1116 2371 1117 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1117 1116 1118 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1116 (nil))
    (nil))

(insn 1118 1117 1119 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 1115 (insn_list 1117 (nil)))
    (nil))

(insn 1119 1118 1121 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 1112 (insn_list 1118 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 352 [0x160])) 0)
        (nil)))

(insn 1121 1119 2374 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 352 [0x160])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1119 (nil))
    (nil))

(insn 2374 1121 1126 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1126 2374 1127 (set (reg:DF 9 st(1))
        (neg:DF (reg:DF 9 st(1)))) -1 (nil)
    (nil))

(insn 1127 1126 1128 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1126 (nil))
    (nil))

(insn 1128 1127 2377 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1127 (nil))
    (nil))

(insn 2377 1128 1129 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -224 [0xffffff20])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1129 2377 1130 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1130 1129 1131 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1129 (nil))
    (nil))

(insn 1131 1130 1132 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1130 (nil))
    (nil))

(insn 1132 1131 2380 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1128 (insn_list 1131 (nil)))
    (nil))

(insn 2380 1132 1133 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1133 2380 1134 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg/v:DF 15 st(7)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1134 1133 1135 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1133 (nil))
    (nil))

(insn 1135 1134 2383 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1132 (insn_list 1134 (nil)))
    (nil))

(insn 2383 1135 1136 (set (reg:DF 8 st(0))
        (reg:DF 13 st(5))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1136 2383 1138 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1135 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 360 [0x168])) 0)
        (nil)))

(insn 1138 1136 2386 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 360 [0x168])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1136 (nil))
    (nil))

(insn 2386 1138 1142 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1142 2386 2389 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2389 1142 1143 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1143 2389 1144 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1142 (nil))
    (nil))

(insn 1144 1143 1146 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1143 (nil))
    (nil))

(insn 1146 1144 1147 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1147 1146 1148 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1146 (nil))
    (nil))

(insn 1148 1147 1149 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1147 (nil))
    (nil))

(insn 1149 1148 1152 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1144 (insn_list 1148 (nil)))
    (nil))

(insn 1152 1149 2392 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1149 (nil))
    (nil))

(insn 2392 1152 1153 (set (reg:DF 8 st(0))
        (reg:DF 13 st(5))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1153 2392 1155 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1152 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 368 [0x170])) 0)
        (nil)))

(insn 1155 1153 2395 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 368 [0x170])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1153 (nil))
    (nil))

(insn 2395 1155 1159 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1159 2395 2398 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2398 1159 1160 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1160 2398 1161 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1161 1160 1162 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1159 (insn_list 1160 (nil)))
    (nil))

(insn 1162 1161 1163 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1161 (nil))
    (nil))

(insn 1163 1162 1164 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1162 (nil))
    (nil))

(insn 1164 1163 2401 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0))) 314 {*fop_df_comm} (insn_list 1163 (nil))
    (nil))

(insn 2401 1164 1167 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1167 2401 1168 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1168 1167 1169 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1167 (nil))
    (nil))

(insn 1169 1168 2404 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1168 (nil))
    (nil))

(insn 2404 1169 1170 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1170 2404 1171 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1171 1170 1172 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 1170 (nil))
    (nil))

(insn 1172 1171 1173 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 319 {*fop_df_1} (insn_list 1169 (insn_list 1171 (nil)))
    (nil))

(insn 1173 1172 1177 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1164 (insn_list 1172 (nil)))
    (nil))

(insn 1177 1173 1178 (set (reg:DF 11 st(3))
        (minus:DF (reg:DF 11 st(3))
            (reg/v:DF 14 st(6)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1178 1177 1179 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1177 (nil))
    (nil))

(insn 1179 1178 1180 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1178 (nil))
    (nil))

(insn 1180 1179 1181 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 11 st(3)))) 319 {*fop_df_1} (insn_list 1173 (insn_list 1179 (nil)))
    (nil))

(insn 1181 1180 1183 (set (reg:DF 13 st(5))
        (mult:DF (reg:DF 13 st(5))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1180 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 376 [0x178])) 0)
        (nil)))

(insn 1183 1181 2407 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 376 [0x178])) 0)
        (reg:DF 13 st(5))) 63 {*movdf_integer} (insn_list 1181 (nil))
    (nil))

(insn 2407 1183 1186 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -112 [0xffffff90])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1186 2407 2410 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2410 1186 1188 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1188 2410 1189 (set (reg:DF 8 st(0))
        (neg:DF (reg:DF 8 st(0)))) -1 (nil)
    (nil))

(insn 1189 1188 1190 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1188 (nil))
    (nil))

(insn 1190 1189 1191 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1189 (nil))
    (nil))

(insn 1191 1190 1192 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1190 (nil))
    (nil))

(insn 1192 1191 1194 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1191 (nil))
    (nil))

(insn 1194 1192 1195 (set (reg:DF 12 st(4))
        (div:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1195 1194 1196 (set (reg:DF 12 st(4))
        (minus:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -192 [0xffffff40])) 0))) 319 {*fop_df_1} (insn_list 1194 (nil))
    (nil))

(insn 1196 1195 1197 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1195 (nil))
    (nil))

(insn 1197 1196 1198 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 1192 (insn_list 1196 (nil)))
    (nil))

(insn 1198 1197 1200 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 1186 (insn_list 1197 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 384 [0x180])) 0)
        (nil)))

(insn 1200 1198 2413 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 384 [0x180])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1198 (nil))
    (nil))

(insn 2413 1200 1204 (set (reg:DF 12 st(4))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1204 2413 2416 (set (reg:DF 12 st(4))
        (mult:DF (reg:DF 12 st(4))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2416 1204 1205 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1205 2416 1206 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 1204 (nil))
    (nil))

(insn 1206 1205 2419 (set (reg:DF 10 st(2))
        (div:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1205 (nil))
    (nil))

(insn 2419 1206 1207 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1207 2419 1208 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1208 1207 1209 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1207 (nil))
    (nil))

(insn 1209 1208 1210 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1208 (nil))
    (nil))

(insn 1210 1209 2422 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1209 (nil))
    (nil))

(insn 2422 1210 1211 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1211 2422 1212 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 319 {*fop_df_1} (nil)
    (nil))

(insn 1212 1211 2425 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 1210 (insn_list 1211 (nil)))
    (nil))

(insn 2425 1212 1213 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1213 2425 1214 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1214 1213 1215 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1213 (nil))
    (nil))

(insn 1215 1214 1216 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1212 (insn_list 1214 (nil)))
    (nil))

(insn 1216 1215 1217 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -200 [0xffffff38])) 0))) 319 {*fop_df_1} (insn_list 1215 (nil))
    (nil))

(insn 1217 1216 1218 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1216 (nil))
    (nil))

(insn 1218 1217 1219 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1206 (insn_list 1217 (nil)))
    (nil))

(insn 1219 1218 1221 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1218 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 392 [0x188])) 0)
        (nil)))

(insn 1221 1219 1224 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 392 [0x188])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 1219 (nil))
    (nil))

(insn 1224 1221 2428 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2428 1224 2531 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2531 2428 2532 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2532 2531 2533 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2533 2532 2534 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2534 2533 1414 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1241)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 55, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 643

;; Start of basic block 56, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85 643
(note 1414 2534 2431 [bb 56] NOTE_INSN_BASIC_BLOCK 0)

(insn 2431 1414 1230 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1230 2431 2434 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 2434 1230 1232 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -240 [0xffffff10])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1232 2434 2437 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 12 st(4))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (nil)
    (nil))

(insn 2437 1232 1233 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1233 2437 1234 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1234 1233 1235 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1233 (nil))
    (nil))

(insn 1235 1234 1236 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1232 (insn_list 1234 (nil)))
    (nil))

(insn 1236 1235 1238 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1230 (insn_list 1235 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 400 [0x190])) 0)
        (nil)))

(insn 1238 1236 1239 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 400 [0x190])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (insn_list 1236 (nil))
    (nil))

(jump_insn 1239 1238 1240 (set (pc)
        (label_ref 1255)) 296 {jump} (nil)
    (nil))
;; End of basic block 56, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85

(barrier 1240 1239 1241)

;; Start of basic block 57, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85
(code_label 1241 1240 1415 682 "" "" [1 uses])

(note 1415 1241 2440 [bb 57] NOTE_INSN_BASIC_BLOCK 0)

(insn 2440 1415 1243 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1243 2440 2443 (set (reg:DF 10 st(2))
        (neg:DF (reg:DF 10 st(2)))) -1 (nil)
    (nil))

(insn 2443 1243 1244 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1244 2443 1245 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1245 1244 2446 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1244 (nil))
    (nil))

(insn 2446 1245 1246 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1246 2446 1247 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1247 1246 1248 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -248 [0xffffff08])) 0))) 319 {*fop_df_1} (insn_list 1246 (nil))
    (nil))

(insn 1248 1247 2449 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1245 (insn_list 1247 (nil)))
    (nil))

(insn 2449 1248 1249 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1249 2449 1250 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1250 1249 1251 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1249 (nil))
    (nil))

(insn 1251 1250 1252 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1248 (insn_list 1250 (nil)))
    (nil))

(insn 1252 1251 1254 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1243 (insn_list 1251 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 400 [0x190])) 0)
        (nil)))

(insn 1254 1252 1255 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 400 [0x190])) 0)
        (reg:DF 10 st(2))) 63 {*movdf_integer} (insn_list 1252 (nil))
    (nil))
;; End of basic block 57, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85

;; Start of basic block 58, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 81 84 85
(code_label 1255 1254 1416 683 "" "" [1 uses])

(note 1416 1255 1258 [bb 58] NOTE_INSN_BASIC_BLOCK 0)

(insn 1258 1416 2452 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 2452 1258 2520 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -216 [0xffffff28])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 2520 2452 2521 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 2521 2520 2522 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 2522 2521 2523 (parallel[ 
            (set (reg:CCNO 17 flags)
                (compare:CCNO (xor:SI (zero_extract:SI (reg:HI 0 ax)
                            (const_int 8 [0x8])
                            (const_int 8 [0x8]))
                        (const_int 64 [0x40]))
                    (const_int 0 [0x0])))
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (xor:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 64 [0x40])))
        ] ) -1 (nil)
    (nil))

(jump_insn 2523 2522 1417 (set (pc)
        (if_then_else (ne (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 1284)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 58, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 84 85

;; Start of basic block 59, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 84
(note 1417 2523 2455 [bb 59] NOTE_INSN_BASIC_BLOCK 0)

(insn 2455 1417 1264 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1264 2455 2458 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2458 1264 1265 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1265 2458 1266 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -80 [0xffffffb0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1266 1265 1267 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1265 (nil))
    (nil))

(insn 1267 1266 2461 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0))) 314 {*fop_df_comm} (insn_list 1266 (nil))
    (nil))

(insn 2461 1267 1270 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1270 2461 2464 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2464 1270 1271 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1271 2464 1272 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1272 1271 1273 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 1271 (nil))
    (nil))

(insn 1273 1272 1274 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 319 {*fop_df_1} (insn_list 1270 (insn_list 1272 (nil)))
    (nil))

(insn 1274 1273 1275 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1273 (nil))
    (nil))

(insn 1275 1274 2467 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1267 (insn_list 1274 (nil)))
    (nil))

(insn 2467 1275 1276 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -192 [0xffffff40])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1276 2467 1277 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1277 1276 1278 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1276 (nil))
    (nil))

(insn 1278 1277 1279 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1275 (insn_list 1277 (nil)))
    (nil))

(insn 1279 1278 1281 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1264 (insn_list 1278 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 408 [0x198])) 0)
        (nil)))

(insn 1281 1279 1282 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 408 [0x198])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 1279 (nil))
    (nil))

(jump_insn 1282 1281 1283 (set (pc)
        (label_ref 1307)) 296 {jump} (nil)
    (nil))
;; End of basic block 59, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 60 76 77 78 80 84

(barrier 1283 1282 1284)

;; Start of basic block 60, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 59 60 76 77 78 80 84 85
(code_label 1284 1283 1418 685 "" "" [1 uses])

(note 1418 1284 2470 [bb 60] NOTE_INSN_BASIC_BLOCK 0)

(insn 2470 1418 1286 (set (reg:DF 11 st(3))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -120 [0xffffff88])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1286 2470 2473 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2473 1286 1287 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1287 2473 1288 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -80 [0xffffffb0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1288 1287 1289 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1287 (nil))
    (nil))

(insn 1289 1288 2476 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0))) 314 {*fop_df_comm} (insn_list 1288 (nil))
    (nil))

(insn 2476 1289 1292 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1292 2476 2479 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2479 1292 1293 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1293 2479 1294 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1294 1293 1295 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 1293 (nil))
    (nil))

(insn 1295 1294 2482 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1292 (insn_list 1294 (nil)))
    (nil))

(insn 2482 1295 1296 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1296 2482 1297 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1297 1296 1298 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -248 [0xffffff08])) 0))) 319 {*fop_df_1} (insn_list 1296 (nil))
    (nil))

(insn 1298 1297 1299 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1295 (insn_list 1297 (nil)))
    (nil))

(insn 1299 1298 1300 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1298 (nil))
    (nil))

(insn 1300 1299 2485 (set (reg:DF 10 st(2))
        (minus:DF (reg:DF 10 st(2))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 1289 (insn_list 1299 (nil)))
    (nil))

(insn 2485 1300 1301 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -192 [0xffffff40])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1301 2485 1302 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1302 1301 1303 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1301 (nil))
    (nil))

(insn 1303 1302 1304 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1300 (insn_list 1302 (nil)))
    (nil))

(insn 1304 1303 1306 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 1286 (insn_list 1303 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 408 [0x198])) 0)
        (nil)))

(insn 1306 1304 1307 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 408 [0x198])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 1304 (nil))
    (nil))
;; End of basic block 60, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 46 49 52 53 54 55 60 76 77 78 80 84

;; Start of basic block 61, registers live: 6 [bp] 7 [sp] 43 44 46 49 52 53 54 55 60 76 77 78 80 84
(code_label 1307 1306 1419 686 "" "" [1 uses])

(note 1419 1307 2488 [bb 61] NOTE_INSN_BASIC_BLOCK 0)

(insn 2488 1419 1310 (set (reg:DF 11 st(3))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC99")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) 63 {*movdf_integer} (nil)
    (nil))

(insn 1310 2488 2491 (set (reg:DF 11 st(3))
        (neg:DF (reg:DF 11 st(3)))) -1 (nil)
    (nil))

(insn 2491 1310 1311 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1311 2491 2494 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2494 1311 1312 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1312 2494 1313 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1311 (nil))
    (nil))

(insn 1313 1312 1315 (set (reg:DF 9 st(1))
        (div:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -240 [0xffffff10])) 0))) 319 {*fop_df_1} (insn_list 1312 (nil))
    (nil))

(insn 1315 1313 1316 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1316 1315 1317 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1315 (nil))
    (nil))

(insn 1317 1316 1318 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1316 (nil))
    (nil))

(insn 1318 1317 2497 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1313 (insn_list 1317 (nil)))
    (nil))

(insn 2497 1318 1319 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -208 [0xffffff30])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1319 2497 1320 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1320 1319 1321 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1319 (nil))
    (nil))

(insn 1321 1320 2500 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1318 (insn_list 1320 (nil)))
    (nil))

(insn 2500 1321 1322 (set (reg:DF 8 st(0))
        (reg:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 1322 2500 1324 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1310 (insn_list 1321 (nil)))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 416 [0x1a0])) 0)
        (nil)))

(insn 1324 1322 2503 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 416 [0x1a0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 1322 (nil))
    (nil))

(insn 2503 1324 1328 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1328 2503 2506 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2506 1328 1329 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1329 2506 1330 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1330 1329 1331 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1328 (insn_list 1329 (nil)))
    (nil))

(insn 1331 1330 1332 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1330 (nil))
    (nil))

(insn 1332 1331 1333 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1331 (nil))
    (nil))

(insn 1333 1332 2509 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -176 [0xffffff50])) 0))) 314 {*fop_df_comm} (insn_list 1332 (nil))
    (nil))

(insn 2509 1333 1334 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1334 2509 1335 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1335 1334 1336 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 1334 (nil))
    (nil))

(insn 1336 1335 1337 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -184 [0xffffff48])) 0))) 314 {*fop_df_comm} (insn_list 1335 (nil))
    (nil))

(insn 1337 1336 1338 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1336 (nil))
    (nil))

(insn 1338 1337 1339 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -32 [0xffffffe0])) 0))) 314 {*fop_df_comm} (insn_list 1337 (nil))
    (nil))

(insn 1339 1338 2512 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 1333 (insn_list 1338 (nil)))
    (nil))

(insn 2512 1339 1342 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1342 2512 2515 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 2515 1342 1343 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 1343 2515 1344 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -48 [0xffffffd0])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 1344 1343 1345 (set (reg:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -88 [0xffffffa8])) 0))) 314 {*fop_df_comm} (insn_list 1343 (nil))
    (nil))

(insn 1345 1344 1346 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (reg:DF 10 st(2)))) 319 {*fop_df_1} (insn_list 1342 (insn_list 1344 (nil)))
    (nil))

(insn 1346 1345 1347 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -192 [0xffffff40])) 0))) 319 {*fop_df_1} (insn_list 1345 (nil))
    (nil))

(insn 1347 1346 1348 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1346 (nil))
    (nil))

(insn 1348 1347 1349 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 314 {*fop_df_comm} (insn_list 1347 (nil))
    (nil))

(insn 1349 1348 1350 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 1339 (insn_list 1348 (nil)))
    (nil))

(insn 1350 1349 1352 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 1349 (nil))
    (expr_list:REG_EQUIV (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 424 [0x1a8])) 0)
        (nil)))

(insn 1352 1350 1354 (set (mem/s:DF (plus:SI (reg/v:SI 5 edi)
                (const_int 424 [0x1a8])) 0)
        (reg:DF 11 st(3))) 63 {*movdf_integer} (insn_list 1350 (nil))
    (nil))
;; End of basic block 61, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 1354 1352 1420 0x40325940 NOTE_INSN_BLOCK_END 0)

(note 1420 1354 0 NOTE_INSN_DELETED 0)


;; Function OutPut

;; 1 regs to allocate: 42
;; 42 conflicts: 42 44 45 0 4 7
;; 43 conflicts: 43 0 7
;; 44 conflicts: 42 44 45 48 49 50 55 58 61 64 67 70 73 76 0 3 4 7
;; 45 conflicts: 42 44 45 48 49 0 3 4 7
;; 48 conflicts: 44 45 48 0 3 4 7
;; 49 conflicts: 44 45 49 50 55 58 61 64 67 70 73 76 0 3 4 7
;; 50 conflicts: 44 49 50 0 3 4 7
;; 55 conflicts: 44 49 55 0 3 4 7
;; 58 conflicts: 44 49 58 0 3 4 7
;; 61 conflicts: 44 49 61 0 3 4 7
;; 64 conflicts: 44 49 64 0 3 4 7
;; 67 conflicts: 44 49 67 0 3 4 7
;; 70 conflicts: 44 49 70 0 3 4 7
;; 73 conflicts: 44 49 73 0 3 4 7
;; 76 conflicts: 44 49 76 0 3 4 7

Spilling for insn 12.
Spilling for insn 14.
Spilling for insn 19.
Spilling for insn 364.
Spilling for insn 40.
Spilling for insn 42.
Spilling for insn 44.
Spilling for insn 58.
Spilling for insn 60.
Spilling for insn 62.
Spilling for insn 78.
Spilling for insn 80.
Spilling for insn 82.
Spilling for insn 96.
Spilling for insn 98.
Spilling for insn 100.
Spilling for insn 116.
Spilling for insn 118.
Spilling for insn 120.
Spilling for insn 134.
Spilling for insn 136.
Spilling for insn 138.
Spilling for insn 154.
Spilling for insn 156.
Spilling for insn 158.
Spilling for insn 172.
Spilling for insn 174.
Spilling for insn 176.
Spilling for insn 192.
Spilling for insn 194.
Spilling for insn 196.
Spilling for insn 210.
Spilling for insn 212.
Spilling for insn 214.
Spilling for insn 232.
Spilling for insn 244.
Spilling for insn 256.
Spilling for insn 268.
Spilling for insn 280.
Spilling for insn 292.
Spilling for insn 304.
Spilling for insn 316.
Spilling for insn 328.
Spilling for insn 332.
Spilling for insn 334.
Spilling for insn 336.
Spilling for insn 27.
Spilling for insn 357.
;; Register dispositions:
42 in 3  43 in 0  44 in 4  45 in 0  48 in 3  49 in 3  
50 in 0  55 in 0  58 in 0  61 in 0  64 in 0  67 in 0  
70 in 0  73 in 0  76 in 0  

;; Hard regs used:  0 3 4 6 7 16 17 20

(note 2 0 3 NOTE_INSN_DELETED 0)

(note 3 2 6 NOTE_INSN_FUNCTION_BEG 0)

(note 6 3 369 0x4037dba0 NOTE_INSN_BLOCK_BEG 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 369 6 10 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 10 369 12 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 12 10 14 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC37"))) 27 {pushsi2} (insn_list 10 (nil))
    (nil))

(insn 14 12 15 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("outfault"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 15 14 17 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fopen")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 17 15 19 NOTE_INSN_DELETED 1077421344)

(insn 19 17 22 (set (mem/f:SI (symbol_ref:SI ("fault_fp")) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 17 (nil))
    (nil))

(insn 22 19 24 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 24 22 364 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 364 24 365 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("nfaults")) 0))) 2 {*cmpsi_1_insn} (insn_list 22 (nil))
    (nil))

(jump_insn 365 364 25 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 352)
            (pc))) 288 {*jcc_1} (insn_list 364 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42

(note 25 365 31 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42
(code_label 31 25 370 710 "" "" [1 uses])

(note 370 31 36 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 36 370 38 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -4 [0xfffffffc])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 38 36 40 (set (reg:SI 4 esi)
        (plus:SI (reg/v:SI 3 ebx)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 40 38 42 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 4 esi)) 27 {pushsi2} (insn_list 36 (insn_list 38 (nil)))
    (nil))

(insn 42 40 44 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC104"))) 27 {pushsi2} (nil)
    (nil))

(insn 44 42 45 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 45 44 48 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 48 45 52 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(note 52 48 54 NOTE_INSN_DELETED 0)

(insn 54 52 56 (set (reg:SI 3 ebx)
        (plus:SI (mult:SI (reg/v:SI 3 ebx)
                (const_int 2 [0x2]))
            (reg/v:SI 3 ebx))) 113 {*lea_0} (nil)
    (nil))

(insn 56 54 374 (parallel[ 
            (set (reg:SI 3 ebx)
                (ashift:SI (reg:SI 3 ebx)
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 54 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 3 ebx)
            (const_int 96 [0x60]))
        (nil)))

(insn 374 56 375 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 28 [0x1c])) 0)) -1 (nil)
    (nil))

(insn 375 374 60 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 24 [0x18])) 0)) -1 (nil)
    (nil))

(insn 60 375 62 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC105"))) 27 {pushsi2} (nil)
    (nil))

(insn 62 60 63 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 63 62 66 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 66 63 68 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 68 66 376 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 376 68 377 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 20 [0x14])) 0)) -1 (nil)
    (nil))

(insn 377 376 80 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 16 [0x10])) 0)) -1 (nil)
    (nil))

(insn 80 377 82 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC106"))) 27 {pushsi2} (nil)
    (nil))

(insn 82 80 83 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 83 82 86 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 86 83 378 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 378 86 379 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 36 [0x24])) 0)) -1 (nil)
    (nil))

(insn 379 378 98 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 32 [0x20])) 0)) -1 (nil)
    (nil))

(insn 98 379 100 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC107"))) 27 {pushsi2} (nil)
    (nil))

(insn 100 98 101 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 101 100 104 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 104 101 106 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 106 104 380 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 380 106 381 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(insn 381 380 118 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 48 [0x30])) 0)) -1 (nil)
    (nil))

(insn 118 381 120 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC108"))) 27 {pushsi2} (nil)
    (nil))

(insn 120 118 121 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 121 120 124 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 124 121 382 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 382 124 383 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 44 [0x2c])) 0)) -1 (nil)
    (nil))

(insn 383 382 136 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 40 [0x28])) 0)) -1 (nil)
    (nil))

(insn 136 383 138 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC109"))) 27 {pushsi2} (nil)
    (nil))

(insn 138 136 139 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 139 138 142 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 142 139 144 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 144 142 384 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 384 144 385 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 68 [0x44])) 0)) -1 (nil)
    (nil))

(insn 385 384 156 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)) -1 (nil)
    (nil))

(insn 156 385 158 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC110"))) 27 {pushsi2} (nil)
    (nil))

(insn 158 156 159 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 159 158 162 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 162 159 386 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 386 162 387 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)) -1 (nil)
    (nil))

(insn 387 386 174 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 174 387 176 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC111"))) 27 {pushsi2} (nil)
    (nil))

(insn 176 174 177 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 177 176 180 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 180 177 182 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 182 180 388 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 388 182 389 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 76 [0x4c])) 0)) -1 (nil)
    (nil))

(insn 389 388 194 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 72 [0x48])) 0)) -1 (nil)
    (nil))

(insn 194 389 196 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC112"))) 27 {pushsi2} (nil)
    (nil))

(insn 196 194 197 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 197 196 200 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 200 197 390 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 390 200 391 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 84 [0x54])) 0)) -1 (nil)
    (nil))

(insn 391 390 212 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 80 [0x50])) 0)) -1 (nil)
    (nil))

(insn 212 391 214 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC113"))) 27 {pushsi2} (nil)
    (nil))

(insn 214 212 215 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 215 214 218 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 218 215 220 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 220 218 222 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 218 (nil))
    (nil))

(insn 222 220 392 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("the_flt")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("the_flt")) 0)
        (nil)))

(insn 392 222 393 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 84 [0x54])) 0)) -1 (nil)
    (nil))

(insn 393 392 394 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 80 [0x50])) 0)) -1 (nil)
    (nil))

(insn 394 393 395 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 76 [0x4c])) 0)) -1 (nil)
    (nil))

(insn 395 394 396 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 72 [0x48])) 0)) -1 (nil)
    (nil))

(insn 396 395 397 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 60 [0x3c])) 0)) -1 (nil)
    (nil))

(insn 397 396 398 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 56 [0x38])) 0)) -1 (nil)
    (nil))

(insn 398 397 399 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 68 [0x44])) 0)) -1 (nil)
    (nil))

(insn 399 398 400 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 64 [0x40])) 0)) -1 (nil)
    (nil))

(insn 400 399 401 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 44 [0x2c])) 0)) -1 (nil)
    (nil))

(insn 401 400 402 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 40 [0x28])) 0)) -1 (nil)
    (nil))

(insn 402 401 403 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 52 [0x34])) 0)) -1 (nil)
    (nil))

(insn 403 402 404 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 48 [0x30])) 0)) -1 (nil)
    (nil))

(insn 404 403 405 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 36 [0x24])) 0)) -1 (nil)
    (nil))

(insn 405 404 406 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 32 [0x20])) 0)) -1 (nil)
    (nil))

(insn 406 405 407 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 20 [0x14])) 0)) -1 (nil)
    (nil))

(insn 407 406 408 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 16 [0x10])) 0)) -1 (nil)
    (nil))

(insn 408 407 409 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 28 [0x1c])) 0)) -1 (nil)
    (nil))

(insn 409 408 332 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/s:SI (plus:SI (plus:SI (reg:SI 3 ebx)
                    (reg:SI 0 eax))
                (const_int 24 [0x18])) 0)) -1 (nil)
    (nil))

(insn 332 409 334 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 4 esi)) 27 {pushsi2} (nil)
    (nil))

(insn 334 332 336 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC114"))) 27 {pushsi2} (nil)
    (nil))

(insn 336 334 337 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("fault_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 337 336 341 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 96 [0x60]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 341 337 342 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 342 341 345 NOTE_INSN_LOOP_CONT 0)

(insn 345 342 368 (set (reg/v:SI 3 ebx)
        (reg:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(note 368 345 27 NOTE_INSN_LOOP_VTOP 0)

(insn 27 368 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("nfaults")) 0))) 2 {*cmpsi_1_insn} (insn_list 345 (nil))
    (nil))

(jump_insn 28 27 351 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 31)
            (pc))) 288 {*jcc_1} (insn_list 27 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42

(note 351 28 352 NOTE_INSN_LOOP_END 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp]
(code_label 352 351 371 708 "" "" [1 uses])

(note 371 352 355 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 355 371 357 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 357 355 358 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("fault_fp")) 0)) 27 {pushsi2} (insn_list 355 (nil))
    (nil))

(call_insn 358 357 360 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fclose")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 360 358 372 0x4037dba0 NOTE_INSN_BLOCK_END 0)

(note 372 360 0 NOTE_INSN_DELETED 0)


;; Function GetStats

;; 25 regs to allocate: 50 52 120 51 119 111 110 109 118 53 (2) 117 113 (2) 54 (2) 55 (2) 47 114 112 96 48 42 116 (2) 49 115 43 (2) 44
;; 42 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 57 59 61 63 65 66 67 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 117 118 119 120 0 1 7 8 9
;; 43 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 57 59 61 63 65 66 67 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 102 104 105 107 108 109 110 111 112 113 114 115 116 117 118 119 120 0 1 2 3 7 8 9
;; 44 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 57 59 61 63 65 66 67 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 102 104 105 107 108 109 110 111 112 113 114 115 116 117 118 119 120 0 1 2 3 7 8 9
;; 47 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 61 63 65 66 67 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 117 118 119 120 0 1 7 8 9
;; 48 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 65 66 67 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 117 118 119 120 0 1 7 8 9
;; 49 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 117 118 119 120 0 1 7 8 9
;; 50 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 69 70 73 74 75 76 81 87 88 89 90 92 93 94 95 96 102 104 105 107 108 109 110 111 112 113 114 115 116 117 118 119 120 0 1 2 3 7 8 9
;; 51 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 117 118 119 120 0 1 7 8 9
;; 52 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 53 conflicts: 42 43 44 47 48 49 50 51 53 54 55 57 59 61 63 65 66 67 69 70 119 120 0 7
;; 54 conflicts: 42 43 44 47 48 49 50 51 53 54 55 57 59 61 63 65 66 67 69 70 72 73 74 75 76 81 117 118 119 120 0 7 8
;; 55 conflicts: 42 43 44 47 48 49 50 51 52 53 54 55 57 59 61 63 65 66 67 69 70 72 73 74 75 76 81 83 86 87 88 89 90 92 93 94 95 96 97 98 99 100 109 110 111 112 113 114 115 116 117 118 119 120 0 1 7 8 9
;; 56 conflicts: 56 7 8
;; 57 conflicts: 42 43 44 53 54 55 57 0 7
;; 59 conflicts: 42 43 44 53 54 55 59 0 7
;; 61 conflicts: 42 43 44 47 53 54 55 61 0 7
;; 63 conflicts: 42 43 44 47 53 54 55 63 0 7
;; 65 conflicts: 42 43 44 47 48 53 54 55 65 0 7
;; 66 conflicts: 42 43 44 47 48 53 54 55 66 0 7
;; 67 conflicts: 42 43 44 47 48 53 54 55 67 0 7
;; 69 conflicts: 42 43 44 47 48 49 50 51 53 54 55 69 119 120 0 7
;; 70 conflicts: 42 43 44 47 48 49 50 51 53 54 55 70 119 120 0 7
;; 72 conflicts: 42 43 44 47 48 49 51 54 55 72 7 8
;; 73 conflicts: 42 43 44 47 48 49 50 51 54 55 73 117 118 0 7
;; 74 conflicts: 42 43 44 47 48 49 50 51 54 55 74 117 118 0 7
;; 75 conflicts: 42 43 44 47 48 49 50 51 54 55 75 117 118 7 8
;; 76 conflicts: 42 43 44 47 48 49 50 51 54 55 76 117 118 7 8
;; 81 conflicts: 42 43 44 47 48 49 50 51 54 55 81 117 118 7 8
;; 83 conflicts: 42 43 44 47 48 49 51 55 83 7 8
;; 86 conflicts: 42 43 44 47 48 49 51 55 86 7 8
;; 87 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 96 109 110 111 112 113 114 115 116 0 1 7 9
;; 88 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 96 109 110 111 112 113 114 115 116 0 1 7
;; 89 conflicts: 42 43 44 47 48 49 50 51 52 55 87 89 92 93 94 96 109 110 111 112 113 114 115 116 1 7 8 9
;; 90 conflicts: 42 43 44 47 48 49 50 51 52 55 87 90 96 109 110 111 112 113 114 115 116 1 7 9
;; 92 conflicts: 42 43 44 47 48 49 50 51 52 55 89 92 96 109 110 111 112 113 114 115 116 1 7 9
;; 93 conflicts: 42 43 44 47 48 49 50 51 52 55 89 93 96 109 110 111 112 113 114 115 116 7 8 9
;; 94 conflicts: 42 43 44 47 48 49 50 51 52 55 89 94 96 109 110 111 112 113 114 115 116 7 8 9
;; 95 conflicts: 42 43 44 47 48 49 50 51 52 55 95 96 109 110 111 112 113 114 115 116 7 9
;; 96 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 97 conflicts: 42 43 44 47 48 49 51 52 55 96 97 98 99 100 101 111 112 113 114 115 116 0 7 8
;; 98 conflicts: 42 43 44 47 48 49 51 52 55 96 97 98 111 112 113 114 115 116 0 7 8
;; 99 conflicts: 42 43 44 47 48 49 51 52 55 96 97 99 111 112 113 114 115 116 0 7 8
;; 100 conflicts: 42 43 44 47 48 49 51 52 55 96 97 100 111 112 113 114 115 116 0 7 8
;; 101 conflicts: 42 43 44 47 48 49 51 52 96 97 101 111 112 113 114 115 116 0 7 8
;; 102 conflicts: 43 44 50 102 104 105 107 108 0 1 2 3 7
;; 104 conflicts: 43 44 50 102 104 2 3 7
;; 105 conflicts: 43 44 50 102 105 107 108 0 1 2 3 7
;; 107 conflicts: 43 44 50 102 105 107 0 2 3 7
;; 108 conflicts: 43 44 50 102 105 108 0 1 2 3 7
;; 109 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 110 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 111 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 112 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 113 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 114 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 115 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 116 conflicts: 42 43 44 47 48 49 50 51 52 55 87 88 89 90 92 93 94 95 96 97 98 99 100 101 109 110 111 112 113 114 115 116 0 1 7 8 9
;; 117 conflicts: 42 43 44 47 48 49 50 51 54 55 73 74 75 76 81 117 118 0 7 8
;; 118 conflicts: 42 43 44 47 48 49 50 51 54 55 73 74 75 76 81 117 118 0 7 8
;; 119 conflicts: 42 43 44 47 48 49 50 51 53 54 55 69 70 119 120 0 7
;; 120 conflicts: 42 43 44 47 48 49 50 51 53 54 55 69 70 119 120 0 7

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 6.
Using reg 8 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 20.
Using reg 8 for reload 0
Spilling for insn 22.
Using reg 8 for reload 1
Spilling for insn 24.
Using reg 8 for reload 1
Spilling for insn 35.
Spilling for insn 37.
Spilling for insn 40.
Spilling for insn 53.
Spilling for insn 55.
Spilling for insn 58.
Spilling for insn 66.
Spilling for insn 69.
Spilling for insn 71.
Spilling for insn 74.
Spilling for insn 411.
Spilling for insn 416.
Spilling for insn 494.
Spilling for insn 497.
Spilling for insn 102.
Spilling for insn 105.
Using reg 5 for reload 0
Using reg 8 for reload 1
Spilling for insn 120.
Spilling for insn 122.
Using reg 0 for reload 0
Spilling for insn 125.
Spilling for insn 127.
Spilling for insn 129.
Spilling for insn 421.
Spilling for insn 488.
Spilling for insn 491.
Spilling for insn 144.
Spilling for insn 148.
Using reg 5 for reload 0
Spilling for insn 149.
Using reg 0 for reload 0
Spilling for insn 157.
Spilling for insn 172.
Spilling for insn 187.
Using reg 0 for reload 0
Spilling for insn 190.
Spilling for insn 192.
Spilling for insn 194.
Spilling for insn 198.
Using reg 8 for reload 0
Spilling for insn 200.
Using reg 8 for reload 1
Spilling for insn 84.
Spilling for insn 426.
Spilling for insn 479.
Using reg 0 for reload 0
Spilling for insn 482.
Using reg 0 for reload 0
Spilling for insn 485.
Spilling for insn 467.
Using reg 0 for reload 0
Spilling for insn 470.
Spilling for insn 473.
Using reg 0 for reload 1
Spilling for insn 463.
Using reg 0 for reload 1
Spilling for insn 466.
Spilling for insn 249.
Spilling for insn 253.
Using reg 0 for reload 0
Spilling for insn 254.
Using reg 0 for reload 0
Spilling for insn 259.
Using reg 0 for reload 0
Spilling for insn 260.
Using reg 0 for reload 0
Spilling for insn 262.
Spilling for insn 243.
Spilling for insn 278.
Spilling for insn 280.
Using reg 1 for reload 0
Spilling for insn 281.
Using reg 1 for reload 0
Spilling for insn 282.
Spilling for insn 284.
Using reg 1 for reload 0
Spilling for insn 287.
Spilling for insn 221.
Spilling for insn 441.
Spilling for insn 327.
Spilling for insn 331.
Spilling for insn 339.
Spilling for insn 340.
Spilling for insn 318.
Spilling for insn 358.
Spilling for insn 360.
Spilling for insn 364.
Spilling for insn 366.
Spilling for insn 368.
Spilling for insn 376.
Spilling for insn 384.
Spilling for insn 386.
Spilling for insn 392.
Spilling for insn 394.
Spilling for insn 400.
Spilling for insn 402.
Spilling for insn 404.
 Register 88 now on stack.

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 6.
Using reg 8 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 20.
Using reg 8 for reload 0
Spilling for insn 22.
Using reg 8 for reload 1
Spilling for insn 24.
Using reg 8 for reload 1
Spilling for insn 35.
Spilling for insn 37.
Spilling for insn 40.
Spilling for insn 53.
Spilling for insn 55.
Spilling for insn 58.
Spilling for insn 66.
Spilling for insn 69.
Spilling for insn 71.
Spilling for insn 74.
Spilling for insn 411.
Spilling for insn 416.
Spilling for insn 494.
Spilling for insn 497.
Spilling for insn 102.
Spilling for insn 105.
Using reg 5 for reload 0
Using reg 8 for reload 1
Spilling for insn 120.
Spilling for insn 122.
Using reg 0 for reload 0
Spilling for insn 125.
Spilling for insn 127.
Spilling for insn 129.
Spilling for insn 421.
Spilling for insn 488.
Spilling for insn 491.
Spilling for insn 144.
Spilling for insn 148.
Using reg 5 for reload 0
Spilling for insn 149.
Using reg 0 for reload 0
Spilling for insn 157.
Spilling for insn 172.
Spilling for insn 187.
Using reg 0 for reload 0
Spilling for insn 190.
Spilling for insn 192.
Spilling for insn 194.
Spilling for insn 198.
Using reg 8 for reload 0
Spilling for insn 200.
Using reg 8 for reload 1
Spilling for insn 84.
Spilling for insn 426.
Spilling for insn 479.
Using reg 0 for reload 0
Spilling for insn 482.
Using reg 0 for reload 0
Spilling for insn 485.
Spilling for insn 467.
Using reg 0 for reload 0
Spilling for insn 470.
Spilling for insn 473.
Using reg 0 for reload 1
Spilling for insn 463.
Using reg 0 for reload 1
Spilling for insn 466.
Spilling for insn 249.
Spilling for insn 251.
Using reg 0 for reload 0
Spilling for insn 253.
Using reg 0 for reload 0
Using reg 5 for reload 1
Spilling for insn 254.
Using reg 0 for reload 0
Spilling for insn 259.
Using reg 0 for reload 0
Spilling for insn 260.
Using reg 0 for reload 0
Spilling for insn 262.
Spilling for insn 243.
Spilling for insn 278.
Spilling for insn 280.
Using reg 1 for reload 0
Spilling for insn 281.
Using reg 1 for reload 0
Spilling for insn 282.
Spilling for insn 284.
Using reg 1 for reload 0
Spilling for insn 287.
Spilling for insn 221.
Spilling for insn 441.
Spilling for insn 327.
Spilling for insn 331.
Spilling for insn 339.
Spilling for insn 340.
Spilling for insn 318.
Spilling for insn 358.
Spilling for insn 360.
Spilling for insn 364.
Spilling for insn 366.
Spilling for insn 368.
Spilling for insn 376.
Spilling for insn 384.
Spilling for insn 386.
Spilling for insn 392.
Spilling for insn 394.
Spilling for insn 400.
Spilling for insn 402.
Spilling for insn 404.
 Register 111 now on stack.

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 6.
Using reg 8 for reload 0
Spilling for insn 8.
Using reg 0 for reload 0
Spilling for insn 20.
Using reg 8 for reload 0
Spilling for insn 22.
Using reg 8 for reload 1
Spilling for insn 24.
Using reg 8 for reload 1
Spilling for insn 35.
Spilling for insn 37.
Spilling for insn 40.
Spilling for insn 53.
Spilling for insn 55.
Spilling for insn 58.
Spilling for insn 66.
Spilling for insn 69.
Spilling for insn 71.
Spilling for insn 74.
Spilling for insn 411.
Spilling for insn 416.
Spilling for insn 494.
Spilling for insn 497.
Spilling for insn 102.
Spilling for insn 105.
Using reg 5 for reload 0
Using reg 8 for reload 1
Spilling for insn 120.
Spilling for insn 122.
Using reg 0 for reload 0
Spilling for insn 125.
Spilling for insn 127.
Spilling for insn 129.
Spilling for insn 421.
Spilling for insn 488.
Spilling for insn 491.
Spilling for insn 144.
Spilling for insn 148.
Using reg 5 for reload 0
Spilling for insn 149.
Using reg 0 for reload 0
Spilling for insn 157.
Spilling for insn 172.
Spilling for insn 187.
Using reg 0 for reload 0
Spilling for insn 190.
Spilling for insn 192.
Spilling for insn 194.
Spilling for insn 198.
Using reg 8 for reload 0
Spilling for insn 200.
Using reg 8 for reload 1
Spilling for insn 84.
Spilling for insn 426.
Spilling for insn 479.
Using reg 0 for reload 0
Spilling for insn 482.
Using reg 0 for reload 0
Spilling for insn 485.
Spilling for insn 467.
Using reg 0 for reload 0
Spilling for insn 470.
Using reg 0 for reload 1
Spilling for insn 473.
Using reg 0 for reload 1
Spilling for insn 436.
Spilling for insn 463.
Using reg 0 for reload 1
Spilling for insn 466.
Using reg 0 for reload 1
Spilling for insn 249.
Spilling for insn 251.
Using reg 0 for reload 0
Spilling for insn 253.
Using reg 0 for reload 0
Using reg 5 for reload 1
Spilling for insn 254.
Using reg 0 for reload 0
Spilling for insn 259.
Using reg 0 for reload 0
Spilling for insn 260.
Using reg 0 for reload 0
Spilling for insn 262.
Spilling for insn 243.
Spilling for insn 278.
Spilling for insn 280.
Using reg 1 for reload 0
Spilling for insn 281.
Using reg 1 for reload 0
Spilling for insn 282.
Spilling for insn 284.
Using reg 1 for reload 0
Spilling for insn 287.
Spilling for insn 221.
Spilling for insn 441.
Spilling for insn 327.
Spilling for insn 331.
Spilling for insn 339.
Spilling for insn 340.
Spilling for insn 318.
Spilling for insn 358.
Spilling for insn 360.
Spilling for insn 364.
Spilling for insn 366.
Spilling for insn 368.
Spilling for insn 376.
Spilling for insn 384.
Spilling for insn 386.
Spilling for insn 392.
Spilling for insn 394.
Spilling for insn 400.
Spilling for insn 402.
Spilling for insn 404.
;; Register dispositions:
50 in 4  51 in 3  52 in 2  56 in 8  57 in 0  59 in 0  
61 in 0  63 in 0  65 in 0  66 in 0  67 in 0  69 in 0  
70 in 0  72 in 8  73 in 0  74 in 0  75 in 8  76 in 8  
81 in 8  83 in 8  86 in 8  87 in 1  88 in 0  89 in 9  
90 in 9  92 in 1  93 in 8  94 in 8  95 in 9  97 in 0  
98 in 8  99 in 8  100 in 8  101 in 8  102 in 3  104 in 2  
105 in 2  107 in 0  108 in 0  113 in 10  116 in 11  117 in 2  
118 in 1  119 in 2  120 in 1  

;; Hard regs used:  0 1 2 3 4 5 6 7 8 9 10 11 16 17 18 19 20

(note 2 0 446 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 446 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(note 4 446 6 NOTE_INSN_DELETED 0)

(insn 6 4 506 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 506 6 8 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 8 506 13 NOTE_INSN_DELETED 0)

(note 13 8 16 NOTE_INSN_FUNCTION_BEG 0)

(note 16 13 20 0x40394c60 NOTE_INSN_BLOCK_BEG 0)

(insn 20 16 509 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC115")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (nil))

(insn 509 20 22 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 22 509 512 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 20 (nil))
    (nil))

(note 512 22 24 NOTE_INSN_DELETED 0)

(insn 24 512 27 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 27 24 29 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 29 27 33 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 33 29 35 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 29 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 35 33 37 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 27 (insn_list 33 (nil)))
    (nil))

(insn 37 35 38 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 38 37 40 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 40 38 45 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 38 (nil))
    (expr_list:REG_NOALIAS (reg:SI 60)
        (nil)))

(insn 45 40 47 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 47 45 51 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 51 47 53 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 47 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg:SI 0 eax)
            (const_int 8 [0x8]))
        (nil)))

(insn 53 51 55 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 45 (insn_list 51 (nil)))
    (nil))

(insn 55 53 56 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 56 55 58 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 58 56 63 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 56 (nil))
    (expr_list:REG_NOALIAS (reg:SI 64)
        (nil)))

(insn 63 58 65 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 65 63 66 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("ndim")) 0)
        (nil)))

(insn 66 65 67 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (mem/f:SI (symbol_ref:SI ("ndim")) 0)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 65 (nil))
    (nil))

(insn 67 66 69 (parallel[ 
            (set (reg:SI 0 eax)
                (ashift:SI (reg:SI 0 eax)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (insn_list 66 (nil))
    (nil))

(insn 69 67 71 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg:SI 0 eax)) 27 {pushsi2} (insn_list 63 (insn_list 67 (nil)))
    (nil))

(insn 71 69 72 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 1 [0x1])) 27 {pushsi2} (nil)
    (nil))

(call_insn 72 71 74 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("calloc")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 74 72 79 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (insn_list 72 (nil))
    (expr_list:REG_NOALIAS (reg:SI 68)
        (nil)))

(insn 79 74 81 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 81 79 411 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 411 81 412 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 79 (nil))
    (nil))

(jump_insn 412 411 82 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 215)
            (pc))) 288 {*jcc_1} (insn_list 411 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 53 54 55

(note 82 412 88 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 53 54 55
(code_label 88 82 447 716 "" "" [1 uses])

(note 447 88 93 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 93 447 416 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 416 93 417 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("numtrials")) 0))) 2 {*cmpsi_1_insn} (insn_list 93 (nil))
    (nil))

(jump_insn 417 416 498 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 288 {*jcc_1} (insn_list 416 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 53 54 55

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 50 51 53 54 55
(note 498 417 494 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 494 498 497 (set (reg/v:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 497 494 94 (set (reg/v:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("numtrials")) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 53 54 55 119 120

(note 94 497 100 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 50 51 53 54 55 119 120
(code_label 100 94 448 720 "" "" [1 uses])

(note 448 100 515 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 515 448 102 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 102 515 104 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 104 102 521 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 102 (nil))
    (nil))

(insn 521 104 518 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 518 521 105 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 105 518 524 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 5 edi)) 0))) 314 {*fop_df_comm} (insn_list 104 (nil))
    (nil))

(insn 524 105 107 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 107 524 110 NOTE_INSN_LOOP_CONT 0)

(insn 110 107 420 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 420 110 96 NOTE_INSN_LOOP_VTOP 0)

(insn 96 420 97 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (reg/v:SI 1 edx))) 2 {*cmpsi_1_insn} (insn_list 110 (nil))
    (nil))

(jump_insn 97 96 116 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 100)
            (pc))) 288 {*jcc_1} (insn_list 96 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 53 54 55 119 120

(note 116 97 117 NOTE_INSN_LOOP_END 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 53 54 55
(code_label 117 116 449 718 "" "" [1 uses])

(note 449 117 119 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(note 119 449 527 NOTE_INSN_DELETED 0)

(insn 527 119 120 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 120 527 530 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (float:DF (mem/f:SI (symbol_ref:SI ("numtrials")) 0)))) 321 {*fop_df_3} (nil)
    (nil))

(insn 530 120 122 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 122 530 616 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 120 (nil))
    (nil))

(insn 616 122 617 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 617 616 127 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 8 st(0))) -1 (nil)
    (nil))

(insn 127 617 129 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 3 ebx)) 27 {pushsi2} (nil)
    (nil))

(insn 129 127 130 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC116"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 130 129 133 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 133 130 135 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 135 133 421 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 421 135 422 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("numtrials")) 0))) 2 {*cmpsi_1_insn} (insn_list 133 (nil))
    (nil))

(jump_insn 422 421 499 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 169)
            (pc))) 288 {*jcc_1} (insn_list 421 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 54 55

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 50 51 54 55
(note 499 422 488 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 488 499 491 (set (reg/v:SI 2 ecx)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 491 488 136 (set (reg/v:SI 1 edx)
        (mem/f:SI (symbol_ref:SI ("numtrials")) 0)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 54 55 117 118

(note 136 491 142 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 50 51 54 55 117 118
(code_label 142 136 450 725 "" "" [1 uses])

(note 450 142 533 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 533 450 144 (set (reg:SI 0 eax)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 144 533 146 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 146 144 536 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 144 (nil))
    (nil))

(insn 536 146 148 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 148 536 539 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) 63 {*movdf_integer} (insn_list 146 (nil))
    (nil))

(insn 539 148 149 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 149 539 156 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax)) 0))) 319 {*fop_df_1} (insn_list 148 (nil))
    (nil))

(insn 156 149 157 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 149 (nil))
    (nil))

(insn 157 156 542 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -56 [0xffffffc8])) 0))) 314 {*fop_df_comm} (insn_list 156 (nil))
    (nil))

(insn 542 157 159 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note 159 542 162 NOTE_INSN_LOOP_CONT 0)

(insn 162 159 425 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 425 162 138 NOTE_INSN_LOOP_VTOP 0)

(insn 138 425 139 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (reg/v:SI 1 edx))) 2 {*cmpsi_1_insn} (insn_list 162 (nil))
    (nil))

(jump_insn 139 138 168 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 142)
            (pc))) 288 {*jcc_1} (insn_list 138 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 54 55 117 118

(note 168 139 169 NOTE_INSN_LOOP_END 0)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 54 55
(code_label 169 168 451 723 "" "" [1 uses])

(note 451 169 171 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(note 171 451 545 NOTE_INSN_DELETED 0)

(insn 545 171 172 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 172 545 175 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (float:DF (mem/f:SI (symbol_ref:SI ("numtrials")) 0)))) 321 {*fop_df_3} (nil)
    (nil))

(note 175 172 177 0x4038f2c0 NOTE_INSN_BLOCK_BEG 0)

(note/i 177 175 178 0x4038f2e0 NOTE_INSN_BLOCK_BEG 0)

(insn/i 178 177 182 (parallel[ 
            (set (reg/v:DF 8 st(0))
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 172 (nil))
    (nil))

(note/i 182 178 185 0x4038f2e0 NOTE_INSN_BLOCK_END 0)

(note 185 182 548 0x4038f2c0 NOTE_INSN_BLOCK_END 0)

(insn 548 185 187 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 187 548 613 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)
        (reg/v:DF 8 st(0))) 63 {*movdf_integer} (insn_list 178 (nil))
    (nil))

(insn 613 187 614 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 614 613 192 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 8 st(0))) -1 (nil)
    (nil))

(insn 192 614 194 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 3 ebx)) 27 {pushsi2} (nil)
    (nil))

(insn 194 192 195 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC117"))) 27 {pushsi2} (nil)
    (nil))

(call_insn 195 194 198 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("printf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 198 195 551 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC115")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC115")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 551 198 200 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -48 [0xffffffd0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 200 551 204 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -56 [0xffffffc8])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 198 (nil))
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC115")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 204 200 205 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 205 204 208 NOTE_INSN_LOOP_CONT 0)

(insn 208 205 415 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 415 208 84 NOTE_INSN_LOOP_VTOP 0)

(insn 84 415 85 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 208 (nil))
    (nil))

(jump_insn 85 84 214 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 88)
            (pc))) 288 {*jcc_1} (insn_list 84 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 53 54 55

(note 214 85 215 NOTE_INSN_LOOP_END 0)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 55
(code_label 215 214 452 714 "" "" [1 uses])

(note 452 215 218 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 218 452 426 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 426 218 427 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 218 (nil))
    (nil))

(jump_insn 427 426 500 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 312)
            (pc))) 288 {*jcc_1} (insn_list 426 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 55

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 55
(note 500 427 479 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 479 500 554 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("ndim")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 554 479 482 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 482 554 557 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("numtrials")) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 557 482 485 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 485 557 219 (set (reg/v:DF 11 st(3))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC115")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (nil))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 55 114 115 116

(note 219 485 225 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 55 114 115 116
(code_label 225 219 453 732 "" "" [1 uses])

(note 453 225 228 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 228 453 431 (set (reg/v:SI 2 ecx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 431 228 432 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 228 (nil))
    (nil))

(jump_insn 432 431 501 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 303)
            (pc))) 288 {*jcc_1} (insn_list 431 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 52 55 114 115 116

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 52 55 114 115 116
(note 501 432 560 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 560 501 467 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 467 560 563 (parallel[ 
            (set (reg:SI 1 edx)
                (mult:SI (reg:SI 1 edx)
                    (reg/v:SI 3 ebx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 563 467 566 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 566 563 470 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -88 [0xffffffa8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 470 566 569 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)
        (reg:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))

(insn 569 470 473 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -84 [0xffffffac])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 473 569 476 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 476 473 229 (set (reg/v:DF 10 st(2))
        (reg/v:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 52 55 96 111 112 113 114 115 116

(note 229 476 235 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 52 55 96 111 112 113 114 115 116
(code_label 235 229 454 736 "" "" [1 uses])

(note 454 235 240 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 240 454 436 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 436 240 437 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -100 [0xffffff9c])) 0))) 2 {*cmpsi_1_insn} (insn_list 240 (nil))
    (nil))

(jump_insn 437 436 502 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 274)
            (pc))) 288 {*jcc_1} (insn_list 436 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 52 55 96 111 112 113 114 115 116

;; Start of basic block 13, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 50 51 52 55 96 111 112 113 114 115 116
(note 502 437 572 [bb 13] NOTE_INSN_BASIC_BLOCK 0)

(insn 572 502 463 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -80 [0xffffffb0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 463 572 575 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)
        (reg:SI 1 edx)) 33 {*movsi_1} (nil)
    (nil))

(insn 575 463 466 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -100 [0xffffff9c])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 466 575 241 (set (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -76 [0xffffffb4])) 0)
        (reg:SI 5 edi)) 33 {*movsi_1} (nil)
    (nil))
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 52 55 96 109 110 111 112 113 114 115 116

(note 241 466 247 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 14, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 50 51 52 55 96 109 110 111 112 113 114 115 116
(code_label 247 241 455 740 "" "" [1 uses])

(note 455 247 578 [bb 14] NOTE_INSN_BASIC_BLOCK 0)

(insn 578 455 249 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -72 [0xffffffb8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 249 578 251 (parallel[ 
            (set (reg:SI 1 edx)
                (mult:SI (reg:SI 1 edx)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (nil)
    (nil))

(insn 251 249 581 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 1 edx)
            (reg/v:SI 3 ebx))) -1 (insn_list 249 (nil))
    (nil))

(note 581 251 584 NOTE_INSN_DELETED 0)

(insn 584 581 253 (set (reg:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 253 584 587 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) 63 {*movdf_integer} (insn_list 251 (nil))
    (nil))

(insn 587 253 254 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -28 [0xffffffe4])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 254 587 257 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax)) 0))) 319 {*fop_df_1} (insn_list 253 (nil))
    (nil))

(insn 257 254 259 (parallel[ 
            (set (reg:SI 1 edx)
                (plus:SI (reg:SI 1 edx)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 259 257 260 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg:SI 1 edx)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)) 63 {*movdf_integer} (insn_list 257 (nil))
    (nil))

(insn 260 259 261 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax)) 0))) 319 {*fop_df_1} (insn_list 259 (nil))
    (nil))

(insn 261 260 262 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 254 (insn_list 260 (nil)))
    (nil))

(insn 262 261 590 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0))) 314 {*fop_df_comm} (insn_list 261 (nil))
    (nil))

(insn 590 262 264 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(note 264 590 267 NOTE_INSN_LOOP_CONT 0)

(insn 267 264 440 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 440 267 243 NOTE_INSN_LOOP_VTOP 0)

(insn 243 440 244 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -76 [0xffffffb4])) 0))) 2 {*cmpsi_1_insn} (insn_list 267 (nil))
    (nil))

(jump_insn 244 243 273 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 247)
            (pc))) 288 {*jcc_1} (insn_list 243 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 50 51 52 55 96 109 110 111 112 113 114 115 116

(note 273 244 274 NOTE_INSN_LOOP_END 0)

;; Start of basic block 15, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 52 55 96 111 112 113 114 115 116
(code_label 274 273 456 738 "" "" [1 uses])

(note 456 274 593 [bb 15] NOTE_INSN_BASIC_BLOCK 0)

(insn 593 456 278 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -68 [0xffffffbc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 278 593 279 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg/v:SI 2 ecx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 279 278 596 (set (reg:DF 8 st(0))
        (float:DF (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -100 [0xffffff9c])) 0))) 104 {floatsidf2} (nil)
    (nil))

(insn 596 279 280 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 280 596 281 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 314 {*fop_df_comm} (insn_list 279 (nil))
    (nil))

(insn 281 280 282 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 2 ecx)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx)) 0))) 314 {*fop_df_comm} (insn_list 280 (nil))
    (nil))

(insn 282 281 599 (set (reg:DF 8 st(0))
        (div:DF (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -64 [0xffffffc0])) 0)
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 281 (nil))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (nil)))

(insn 599 282 284 (set (reg:SI 5 edi)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -36 [0xffffffdc])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 284 599 287 (set (mem:DF (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 5 edi)) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 278 (insn_list 282 (nil)))
    (nil))

(insn 287 284 290 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -64 [0xffffffc0])) 0)
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUAL (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC115")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(note 290 287 293 NOTE_INSN_LOOP_CONT 0)

(insn 293 290 435 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 435 293 231 NOTE_INSN_LOOP_VTOP 0)

(insn 231 435 232 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 2 ecx)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 293 (nil))
    (nil))

(jump_insn 232 231 299 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 235)
            (pc))) 288 {*jcc_1} (insn_list 231 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 15, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 52 55 96 111 112 113 114 115 116

(note 299 232 302 NOTE_INSN_LOOP_END 0)

(note 302 299 303 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 16, registers live: 6 [bp] 7 [sp] 42 43 44 47 48 49 51 55 114 115 116
(code_label 303 302 457 731 "" "" [1 uses])

(note 457 303 305 [bb 16] NOTE_INSN_BASIC_BLOCK 0)

(insn 305 457 430 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 430 305 221 NOTE_INSN_LOOP_VTOP 0)

(insn 221 430 222 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem:SI (plus:SI (reg:SI 6 ebp)
                    (const_int -84 [0xffffffac])) 0))) 2 {*cmpsi_1_insn} (insn_list 305 (nil))
    (nil))

(jump_insn 222 221 311 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 225)
            (pc))) 288 {*jcc_1} (insn_list 221 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47 48 49 51 55 114 115 116

(note 311 222 312 NOTE_INSN_LOOP_END 0)

;; Start of basic block 17, registers live: 6 [bp] 7 [sp] 43 44
(code_label 312 311 458 730 "" "" [1 uses])

(note 458 312 315 [bb 17] NOTE_INSN_BASIC_BLOCK 0)

(insn 315 458 441 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 441 315 442 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 315 (nil))
    (nil))

(jump_insn 442 441 316 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 353)
            (pc))) 288 {*jcc_1} (insn_list 441 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 17, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50

(note 316 442 322 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 18, registers live: 6 [bp] 7 [sp] 43 44 50
(code_label 322 316 459 747 "" "" [1 uses])

(note 459 322 327 [bb 18] NOTE_INSN_BASIC_BLOCK 0)

(insn 327 459 602 (set (reg:SI 3 ebx)
        (mem/f:SI (symbol_ref:SI ("obs")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("obs")) 0)
        (nil)))

(insn 602 327 331 (set (reg:SI 2 ecx)
        (reg/v:SI 4 esi)) 33 {*movsi_1} (nil)
    (nil))

(insn 331 602 333 (parallel[ 
            (set (reg:SI 2 ecx)
                (ashift:SI (reg:SI 2 ecx)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 236 {*ashlsi3_1} (nil)
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 16 [0x10]))
        (nil)))

(insn 333 331 335 (parallel[ 
            (set (reg:SI 2 ecx)
                (plus:SI (reg:SI 2 ecx)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 331 (nil))
    (expr_list:REG_EQUAL (mult:SI (reg/v:SI 4 esi)
            (const_int 17 [0x11]))
        (nil)))

(note 335 333 337 NOTE_INSN_DELETED 0)

(insn 337 335 607 (set (reg:SI 0 eax)
        (mem/f:SI (symbol_ref:SI ("origdata")) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (symbol_ref:SI ("origdata")) 0)
        (nil)))

(insn 607 337 608 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                        (const_int 8 [0x8]))
                    (reg:SI 0 eax))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 608 607 609 (set (reg:SI 0 eax)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8]))
                (reg:SI 0 eax)) 0)) -1 (nil)
    (nil))

(insn 609 608 610 (set (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 2 ecx)
                        (const_int 4 [0x4]))
                    (reg:SI 3 ebx))
                (const_int 28 [0x1c])) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 610 609 343 (set (mem/s:SI (plus:SI (plus:SI (mult:SI (reg:SI 2 ecx)
                        (const_int 4 [0x4]))
                    (reg:SI 3 ebx))
                (const_int 32 [0x20])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(note 343 610 346 NOTE_INSN_LOOP_CONT 0)

(insn 346 343 445 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 445 346 318 NOTE_INSN_LOOP_VTOP 0)

(insn 318 445 319 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndata")) 0))) 2 {*cmpsi_1_insn} (insn_list 346 (nil))
    (nil))

(jump_insn 319 318 352 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 322)
            (pc))) 288 {*jcc_1} (insn_list 318 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18, registers live:
 6 [bp] 7 [sp] 20 [frame] 43 44 50

(note 352 319 353 NOTE_INSN_LOOP_END 0)

;; Start of basic block 19, registers live: 6 [bp] 7 [sp] 43 44
(code_label 353 352 460 745 "" "" [1 uses])

(note 460 353 356 [bb 19] NOTE_INSN_BASIC_BLOCK 0)

(insn 356 460 358 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 358 356 360 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC118"))) 27 {pushsi2} (insn_list 356 (nil))
    (nil))

(insn 360 358 361 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 361 360 603 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 603 361 604 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -20 [0xffffffec])) 0)) -1 (nil)
    (nil))

(insn 604 603 366 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)) -1 (nil)
    (nil))

(insn 366 604 368 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC119"))) 27 {pushsi2} (nil)
    (nil))

(insn 368 366 369 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 369 368 372 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 372 369 374 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 374 372 376 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 372 (nil))
    (nil))

(insn 376 374 377 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (insn_list 374 (nil))
    (nil))

(call_insn 377 376 379 (call (mem:QI (symbol_ref:SI ("update_soln")) 0)
        (const_int 16 [0x10])) 303 {*call_0} (nil)
    (nil)
    (nil))

(call_insn 379 377 382 (call (mem:QI (symbol_ref:SI ("OutPut")) 0)
        (const_int 0 [0x0])) 303 {*call_0} (nil)
    (nil)
    (nil))

(insn 382 379 384 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 384 382 386 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC120"))) 27 {pushsi2} (insn_list 382 (nil))
    (nil))

(insn 386 384 387 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 387 386 390 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 390 387 392 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 392 390 394 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (const_int 0 [0x0])) 27 {pushsi2} (insn_list 390 (nil))
    (nil))

(insn 394 392 395 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 20 [0x14])) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 395 394 397 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("chisq")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (nil))

(note 397 395 605 NOTE_INSN_DELETED 1077518496)

(insn 605 397 606 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 606 605 402 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 8 st(0))) -1 (nil)
    (nil))

(insn 402 606 404 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC121"))) 27 {pushsi2} (nil)
    (nil))

(insn 404 402 405 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 405 404 407 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))
;; End of basic block 19, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 407 405 503 0x40394c60 NOTE_INSN_BLOCK_END 0)

(note 503 407 0 NOTE_INSN_DELETED 0)


;; Function OutPutDev

;; 5 regs to allocate: 47 (2) 72 44 42 43
;; 42 conflicts: 42 43 44 47 53 54 55 56 57 58 59 61 62 63 64 65 67 68 69 70 71 72 0 7 8
;; 43 conflicts: 42 43 44 47 53 54 55 56 57 58 59 61 62 63 64 65 67 68 69 70 71 72 0 7 8
;; 44 conflicts: 42 43 44 47 53 54 55 56 57 58 59 61 62 63 64 65 67 68 69 70 71 72 0 7 8
;; 47 conflicts: 42 43 44 47 57 58 59 63 64 65 7 8
;; 53 conflicts: 42 43 44 53 7 8
;; 54 conflicts: 42 43 44 54 7 8
;; 55 conflicts: 42 43 44 55 7 8
;; 56 conflicts: 42 43 44 56 7 8
;; 57 conflicts: 42 43 44 47 57 7 8
;; 58 conflicts: 42 43 44 47 58 7 8
;; 59 conflicts: 42 43 44 47 59 7 8
;; 61 conflicts: 42 43 44 61 7 8
;; 62 conflicts: 42 43 44 62 7 8
;; 63 conflicts: 42 43 44 47 63 7 8
;; 64 conflicts: 42 43 44 47 64 7 8
;; 65 conflicts: 42 43 44 47 65 7 8
;; 67 conflicts: 42 43 44 67 7 8
;; 68 conflicts: 42 43 44 68 7 8
;; 69 conflicts: 42 43 44 69 7 8
;; 70 conflicts: 42 43 44 70 7 8
;; 71 conflicts: 42 43 44 71 7 8
;; 72 conflicts: 42 43 44 72 7

Spilling for insn 4.
Spilling for insn 6.
Spilling for insn 16.
Spilling for insn 18.
Spilling for insn 286.
Spilling for insn 255.
Spilling for insn 262.
Spilling for insn 59.
Spilling for insn 60.
Spilling for insn 63.
Spilling for insn 65.
Spilling for insn 67.
Spilling for insn 77.
Spilling for insn 78.
Spilling for insn 81.
Spilling for insn 83.
Spilling for insn 85.
Spilling for insn 95.
Spilling for insn 96.
Spilling for insn 97.
Spilling for insn 99.
Spilling for insn 100.
Spilling for insn 103.
Spilling for insn 107.
Spilling for insn 109.
Spilling for insn 111.
Spilling for insn 121.
Spilling for insn 122.
Spilling for insn 123.
Spilling for insn 125.
Spilling for insn 126.
Spilling for insn 129.
Spilling for insn 133.
Spilling for insn 135.
Spilling for insn 137.
Spilling for insn 149.
Spilling for insn 153.
Spilling for insn 154.
Spilling for insn 157.
Spilling for insn 159.
Spilling for insn 161.
Spilling for insn 173.
Spilling for insn 177.
Spilling for insn 178.
Spilling for insn 181.
Spilling for insn 183.
Spilling for insn 185.
Spilling for insn 197.
Spilling for insn 201.
Spilling for insn 202.
Spilling for insn 205.
Spilling for insn 207.
Spilling for insn 209.
Spilling for insn 219.
Spilling for insn 220.
Spilling for insn 223.
Spilling for insn 225.
Spilling for insn 227.
Spilling for insn 237.
Spilling for insn 238.
Spilling for insn 241.
Spilling for insn 243.
Spilling for insn 245.
Spilling for insn 30.
;; Register dispositions:
42 in 4  43 in 5  44 in 3  47 in 9  53 in 8  54 in 8  
55 in 8  56 in 8  57 in 8  58 in 8  59 in 8  61 in 8  
62 in 8  63 in 8  64 in 8  65 in 8  67 in 8  68 in 8  
69 in 8  70 in 8  71 in 8  72 in 0  

;; Hard regs used:  0 3 4 5 6 7 8 9 16 17 20

(note 2 0 291 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 291 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 291 6 (set (reg/v:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 6 4 7 (set (reg/v:SI 5 edi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)
        (nil)))

(note 7 6 10 NOTE_INSN_FUNCTION_BEG 0)

(note 10 7 14 0x403af280 NOTE_INSN_BLOCK_BEG 0)

(insn 14 10 16 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 16 14 18 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC123"))) 27 {pushsi2} (insn_list 14 (nil))
    (nil))

(insn 18 16 19 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 19 18 22 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 22 19 27 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (insn_list:REG_WAS_0 22 (nil)))

(insn 27 22 286 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 286 27 287 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 22 (nil))
    (nil))

(jump_insn 287 286 28 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 280)
            (pc))) 288 {*jcc_1} (insn_list 286 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(note 28 287 34 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 34 28 292 753 "" "" [1 uses])

(note 292 34 38 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(note 38 292 40 NOTE_INSN_DELETED 0)

(note 40 38 46 NOTE_INSN_DELETED 0)

(note 46 40 50 NOTE_INSN_DELETED 0)

(note 50 46 308 NOTE_INSN_DELETED 0)

(insn 308 50 255 (set (reg:SI 0 eax)
        (mem/s:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (const:SI (plus:SI (symbol_ref:SI ("lookup"))
                        (const_int 4 [0x4])))) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 255 308 256 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (const_int -1 [0xffffffff])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 256 255 257 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 eax)
            (const_int 8 [0x8]))) 2 {*cmpsi_1_insn} (insn_list 255 (nil))
    (nil))

(jump_insn 257 256 293 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 271)
            (pc))) 288 {*jcc_1} (insn_list 256 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 72

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44 72
(note 293 257 259 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(note 259 293 261 NOTE_INSN_DELETED 0)

(note 261 259 262 NOTE_INSN_DELETED 0)

(jump_insn 262 261 263 (parallel[ 
            (set (pc)
                (mem/u:SI (plus:SI (mult:SI (reg:SI 0 eax)
                            (const_int 4 [0x4]))
                        (label_ref:SI 264)) 0))
            (use (label_ref 264))
        ] ) 298 {tablejump} (nil)
    (insn_list:REG_LABEL 264 (nil)))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 263 262 264)

;; Insn is not within a basic block
(code_label 264 263 265 764 "" "" [2 uses])

;; Insn is not within a basic block
(jump_insn 265 264 266 (addr_vec:SI[ 
            (label_ref:SI 56)
            (label_ref:SI 74)
            (label_ref:SI 92)
            (label_ref:SI 118)
            (label_ref:SI 144)
            (label_ref:SI 168)
            (label_ref:SI 192)
            (label_ref:SI 216)
            (label_ref:SI 234)
        ] ) -1 (nil)
    (nil))

(barrier 266 265 53)

(note 53 266 56 ("simplexfd.c") 1379 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 56 53 294 755 "" "" [1 uses])

(note 294 56 59 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 59 294 311 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)
        (nil)))

(insn 311 59 60 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 60 311 358 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 59 (nil))
    (nil))

(insn 358 60 359 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 359 358 65 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 65 359 67 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC124"))) 27 {pushsi2} (nil)
    (nil))

(insn 67 65 68 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 68 67 71 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 71 68 72 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 72 71 73 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 73 72 74)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 74 73 295 756 "" "" [1 uses])

(note 295 74 77 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 77 295 314 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)
        (nil)))

(insn 314 77 78 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 78 314 356 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 77 (nil))
    (nil))

(insn 356 78 357 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 357 356 83 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 83 357 85 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC125"))) 27 {pushsi2} (nil)
    (nil))

(insn 85 83 86 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 86 85 89 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 89 86 90 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 90 89 91 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 91 90 92)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 92 91 296 757 "" "" [1 uses])

(note 296 92 95 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 95 296 96 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC126")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC126")) 0) 0 [0x0] 0 [0x0] 1074246656 [0x4007b400])
        (nil)))

(insn 96 95 317 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 319 {*fop_df_1} (insn_list 95 (nil))
    (nil))

(insn 317 96 97 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 97 317 99 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 4 esi)) 0))) 314 {*fop_df_comm} (insn_list 96 (nil))
    (nil))

(insn 99 97 100 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(insn 100 99 102 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 99 (nil))
    (nil))

(note 102 100 103 NOTE_INSN_DELETED 0)

(insn 103 102 104 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC127")) 0))) 314 {*fop_df_comm} (insn_list 100 (nil))
    (nil))

(insn 104 103 354 (set (reg/v:DF 9 st(1))
        (div:DF (reg/v:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 97 (insn_list 103 (nil)))
    (nil))

(insn 354 104 355 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 355 354 109 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 109 355 111 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC128"))) 27 {pushsi2} (nil)
    (nil))

(insn 111 109 112 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 112 111 115 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 115 112 116 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 116 115 117 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 117 116 118)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 118 117 297 758 "" "" [1 uses])

(note 297 118 121 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 121 297 122 (set (reg:DF 8 st(0))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC126")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC126")) 0) 0 [0x0] 0 [0x0] 1074246656 [0x4007b400])
        (nil)))

(insn 122 121 320 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem/f:DF (symbol_ref:SI ("pi")) 0))) 319 {*fop_df_1} (insn_list 121 (nil))
    (nil))

(insn 320 122 123 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 123 320 125 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 4 esi)) 0))) 314 {*fop_df_comm} (insn_list 122 (nil))
    (nil))

(insn 125 123 126 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)
        (nil)))

(insn 126 125 128 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 125 (nil))
    (nil))

(note 128 126 129 NOTE_INSN_DELETED 0)

(insn 129 128 130 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC127")) 0))) 314 {*fop_df_comm} (insn_list 126 (nil))
    (nil))

(insn 130 129 352 (set (reg/v:DF 9 st(1))
        (div:DF (reg/v:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 123 (insn_list 129 (nil)))
    (nil))

(insn 352 130 353 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 353 352 135 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 135 353 137 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC129"))) 27 {pushsi2} (nil)
    (nil))

(insn 137 135 138 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 138 137 141 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 141 138 142 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 142 141 143 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 143 142 144)

;; Start of basic block 7, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 144 143 298 759 "" "" [1 uses])

(note 298 144 147 [bb 7] NOTE_INSN_BASIC_BLOCK 0)

(insn 147 298 348 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 348 147 349 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 349 348 150 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) -1 (nil)
    (nil))

(call_insn 150 349 152 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 152 150 323 NOTE_INSN_DELETED 1077621056)

(insn 323 152 153 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 153 323 154 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 152 (nil))
    (nil))

(insn 154 153 350 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 4 esi)) 0))) 314 {*fop_df_comm} (insn_list 153 (nil))
    (nil))

(insn 350 154 351 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 351 350 159 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 159 351 161 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC130"))) 27 {pushsi2} (nil)
    (nil))

(insn 161 159 162 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 162 161 165 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 165 162 166 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 166 165 167 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 7, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 167 166 168)

;; Start of basic block 8, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 168 167 299 760 "" "" [1 uses])

(note 299 168 171 [bb 8] NOTE_INSN_BASIC_BLOCK 0)

(insn 171 299 344 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 344 171 345 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 345 344 174 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) -1 (nil)
    (nil))

(call_insn 174 345 176 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 176 174 326 NOTE_INSN_DELETED 1077620528)

(insn 326 176 177 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 177 326 178 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 176 (nil))
    (nil))

(insn 178 177 346 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 4 esi)) 0))) 314 {*fop_df_comm} (insn_list 177 (nil))
    (nil))

(insn 346 178 347 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 347 346 183 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 183 347 185 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC131"))) 27 {pushsi2} (nil)
    (nil))

(insn 185 183 186 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 186 185 189 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 189 186 190 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 190 189 191 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 8, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 191 190 192)

;; Start of basic block 9, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 192 191 300 761 "" "" [1 uses])

(note 300 192 195 [bb 9] NOTE_INSN_BASIC_BLOCK 0)

(insn 195 300 340 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 340 195 341 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 5 edi))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 341 340 198 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 5 edi)) 0)) -1 (nil)
    (nil))

(call_insn 198 341 200 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("exp")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 200 198 329 NOTE_INSN_DELETED 1077620000)

(insn 329 200 201 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 201 329 202 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_dist")) 0))) 314 {*fop_df_comm} (insn_list 200 (nil))
    (nil))

(insn 202 201 342 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                        (const_int 8 [0x8]))
                    (reg/v:SI 4 esi)) 0))) 314 {*fop_df_comm} (insn_list 201 (nil))
    (nil))

(insn 342 202 343 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 343 342 207 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 207 343 209 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC132"))) 27 {pushsi2} (nil)
    (nil))

(insn 209 207 210 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 210 209 213 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 213 210 214 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 214 213 215 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 9, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 215 214 216)

;; Start of basic block 10, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 216 215 301 762 "" "" [1 uses])

(note 301 216 219 [bb 10] NOTE_INSN_BASIC_BLOCK 0)

(insn 219 301 332 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)
        (nil)))

(insn 332 219 220 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 220 332 338 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_slip")) 0))) 314 {*fop_df_comm} (insn_list 219 (nil))
    (nil))

(insn 338 220 339 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 339 338 225 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 225 339 227 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC133"))) 27 {pushsi2} (nil)
    (nil))

(insn 227 225 228 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 228 227 231 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 231 228 232 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(jump_insn 232 231 233 (set (pc)
        (label_ref 271)) 296 {jump} (nil)
    (nil))
;; End of basic block 10, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(barrier 233 232 234)

;; Start of basic block 11, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 234 233 302 763 "" "" [1 uses])

(note 302 234 237 [bb 11] NOTE_INSN_BASIC_BLOCK 0)

(insn 237 302 335 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 3 ebx)
                    (const_int 8 [0x8]))
                (reg/v:SI 4 esi)) 0)
        (nil)))

(insn 335 237 238 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 238 335 336 (set (reg/v:DF 9 st(1))
        (mult:DF (reg/v:DF 9 st(1))
            (mem/f:DF (symbol_ref:SI ("typical_slip")) 0))) 314 {*fop_df_comm} (insn_list 237 (nil))
    (nil))

(insn 336 238 337 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 337 336 243 (set (mem:DF (reg:SI 7 esp) 0)
        (reg/v:DF 9 st(1))) -1 (nil)
    (nil))

(insn 243 337 245 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC134"))) 27 {pushsi2} (nil)
    (nil))

(insn 245 243 246 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 246 245 249 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 249 246 270 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))
;; End of basic block 11, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(note 270 249 271 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 12, registers live: 6 [bp] 7 [sp] 42 43 44
(code_label 271 270 303 752 "" "" [9 uses])

(note 303 271 273 [bb 12] NOTE_INSN_BASIC_BLOCK 0)

(insn 273 303 290 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 290 273 30 NOTE_INSN_LOOP_VTOP 0)

(insn 30 290 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 273 (nil))
    (nil))

(jump_insn 31 30 279 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 34)
            (pc))) 288 {*jcc_1} (insn_list 30 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 12, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

(note 279 31 280 NOTE_INSN_LOOP_END 0)

;; Start of basic block 13, registers live: 6 [bp] 7 [sp]
(code_label 280 279 304 751 "" "" [1 uses])

(note 304 280 282 [bb 13] NOTE_INSN_BASIC_BLOCK 0)
;; End of basic block 13, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 282 304 305 0x403af280 NOTE_INSN_BLOCK_END 0)

(note 305 282 0 NOTE_INSN_DELETED 0)


;; Function OutPutCor2

;; 4 regs to allocate: 44 43 47 42
;; 42 conflicts: 42 43 44 45 46 47 49 50 51 0 1 7
;; 43 conflicts: 42 43 44 45 46 47 49 50 51 0 1 7
;; 44 conflicts: 42 43 44 45 46 47 49 50 51 0 1 7
;; 45 conflicts: 42 43 44 45 0 7
;; 46 conflicts: 42 43 44 46 49 0 1 7
;; 47 conflicts: 42 43 44 47 51 0 7
;; 49 conflicts: 42 43 44 46 49 0 1 7
;; 50 conflicts: 42 43 44 50 0 7
;; 51 conflicts: 42 43 44 47 51 0 7

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 14.
Spilling for insn 16.
Spilling for insn 105.
Spilling for insn 123.
Spilling for insn 125.
Spilling for insn 57.
Using reg 1 for reload 0
Spilling for insn 59.
Spilling for insn 61.
Spilling for insn 81.
Spilling for insn 83.
Spilling for insn 25.
;; Register dispositions:
43 in 4  44 in 3  45 in 0  46 in 0  47 in 5  49 in 1  
50 in 0  51 in 0  

;; Hard regs used:  0 1 3 4 5 6 7 16 17 20

(note 2 0 115 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 115 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(note 4 115 5 NOTE_INSN_DELETED 0)

(note 5 4 8 NOTE_INSN_FUNCTION_BEG 0)

(note 8 5 12 0x403bb5e0 NOTE_INSN_BLOCK_BEG 0)

(insn 12 8 14 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 14 12 16 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC136"))) 27 {pushsi2} (insn_list 12 (nil))
    (nil))

(insn 16 14 17 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 17 16 20 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 20 17 22 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 22 20 105 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 105 22 106 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 20 (nil))
    (nil))

(jump_insn 106 105 23 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 288 {*jcc_1} (insn_list 105 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 23 106 29 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43
(code_label 29 23 116 773 "" "" [1 uses])

(note 116 29 34 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 34 116 110 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 110 34 111 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (reg/v:SI 4 esi))) 2 {*cmpsi_1_insn} (insn_list 34 (nil))
    (nil))

(jump_insn 111 110 126 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 288 {*jcc_1} (insn_list 110 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44
(note 126 111 120 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 120 126 121 (set (reg:SI 0 eax)
        (plus:SI (reg/v:SI 4 esi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 121 120 122 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 120 (nil))
    (nil))

(note 122 121 130 NOTE_INSN_DELETED 0)

(insn 130 122 123 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 123 130 124 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 121 (nil))
    (nil))

(insn 124 123 133 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 123 (nil))
    (nil))

(insn 133 124 125 (set (reg:SI 5 edi)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 125 133 35 (parallel[ 
            (set (reg:SI 5 edi)
                (ashiftrt:SI (reg:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 124 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

(note 35 125 41 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44 47
(code_label 41 35 117 777 "" "" [1 uses])

(note 117 41 55 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 55 117 136 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 5 edi)
            (reg/v:SI 3 ebx))) -1 (nil)
    (nil))

(insn 136 55 138 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 138 136 139 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 139 138 59 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) -1 (nil)
    (nil))

(insn 59 139 61 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC137"))) 27 {pushsi2} (nil)
    (nil))

(insn 61 59 62 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 62 61 65 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 65 62 66 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 66 65 69 NOTE_INSN_LOOP_CONT 0)

(insn 69 66 114 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 114 69 37 NOTE_INSN_LOOP_VTOP 0)

(insn 37 114 38 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (reg/v:SI 4 esi))) 2 {*cmpsi_1_insn} (insn_list 69 (nil))
    (nil))

(jump_insn 38 37 75 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 288 {*jcc_1} (insn_list 37 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

(note 75 38 76 NOTE_INSN_LOOP_END 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43
(code_label 76 75 118 775 "" "" [1 uses])

(note 118 76 79 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 79 118 81 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 81 79 83 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC138"))) 27 {pushsi2} (insn_list 79 (nil))
    (nil))

(insn 83 81 84 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 84 83 88 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 88 84 89 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 89 88 92 NOTE_INSN_LOOP_CONT 0)

(insn 92 89 109 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 109 92 25 NOTE_INSN_LOOP_VTOP 0)

(insn 25 109 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 92 (nil))
    (nil))

(jump_insn 26 25 98 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 288 {*jcc_1} (insn_list 25 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 98 26 99 NOTE_INSN_LOOP_END 0)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp]
(code_label 99 98 119 771 "" "" [1 uses])

(note 119 99 101 [bb 5] NOTE_INSN_BASIC_BLOCK 0)
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 101 119 127 0x403bb5e0 NOTE_INSN_BLOCK_END 0)

(note 127 101 0 NOTE_INSN_DELETED 0)


;; Function OutPutCov

;; 4 regs to allocate: 44 43 47 42
;; 42 conflicts: 42 43 44 45 46 47 49 50 51 0 1 7
;; 43 conflicts: 42 43 44 45 46 47 49 50 51 0 1 7
;; 44 conflicts: 42 43 44 45 46 47 49 50 51 0 1 7
;; 45 conflicts: 42 43 44 45 0 7
;; 46 conflicts: 42 43 44 46 49 0 1 7
;; 47 conflicts: 42 43 44 47 51 0 7
;; 49 conflicts: 42 43 44 46 49 0 1 7
;; 50 conflicts: 42 43 44 50 0 7
;; 51 conflicts: 42 43 44 47 51 0 7

Spilling for insn 4.
Using reg 0 for reload 0
Spilling for insn 14.
Spilling for insn 16.
Spilling for insn 105.
Spilling for insn 123.
Spilling for insn 125.
Spilling for insn 57.
Using reg 1 for reload 0
Spilling for insn 59.
Spilling for insn 61.
Spilling for insn 81.
Spilling for insn 83.
Spilling for insn 25.
;; Register dispositions:
43 in 4  44 in 3  45 in 0  46 in 0  47 in 5  49 in 1  
50 in 0  51 in 0  

;; Hard regs used:  0 1 3 4 5 6 7 16 17 20

(note 2 0 115 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 115 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(note 4 115 5 NOTE_INSN_DELETED 0)

(note 5 4 8 NOTE_INSN_FUNCTION_BEG 0)

(note 8 5 12 0x403c43a0 NOTE_INSN_BLOCK_BEG 0)

(insn 12 8 14 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 14 12 16 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC139"))) 27 {pushsi2} (insn_list 12 (nil))
    (nil))

(insn 16 14 17 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 17 16 20 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 20 17 22 (set (reg/v:SI 4 esi)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 22 20 105 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 105 22 106 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 20 (nil))
    (nil))

(jump_insn 106 105 23 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 288 {*jcc_1} (insn_list 105 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 23 106 29 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43
(code_label 29 23 116 784 "" "" [1 uses])

(note 116 29 34 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 34 116 110 (set (reg/v:SI 3 ebx)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 110 34 111 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (reg/v:SI 4 esi))) 2 {*cmpsi_1_insn} (insn_list 34 (nil))
    (nil))

(jump_insn 111 110 126 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 76)
            (pc))) 288 {*jcc_1} (insn_list 110 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 44
(note 126 111 120 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 120 126 121 (set (reg:SI 0 eax)
        (plus:SI (reg/v:SI 4 esi)
            (const_int 1 [0x1]))) -1 (nil)
    (nil))

(insn 121 120 122 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg:SI 0 eax)
                    (reg/v:SI 4 esi)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 120 (nil))
    (nil))

(note 122 121 130 NOTE_INSN_DELETED 0)

(insn 130 122 123 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 123 130 124 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 121 (nil))
    (nil))

(insn 124 123 133 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 123 (nil))
    (nil))

(insn 133 124 125 (set (reg:SI 5 edi)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 125 133 35 (parallel[ 
            (set (reg:SI 5 edi)
                (ashiftrt:SI (reg:SI 5 edi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 124 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

(note 35 125 41 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 44 47
(code_label 41 35 117 788 "" "" [1 uses])

(note 117 41 55 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 55 117 136 (set (reg:SI 0 eax)
        (plus:SI (reg:SI 5 edi)
            (reg/v:SI 3 ebx))) -1 (nil)
    (nil))

(insn 136 55 138 (set (reg:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (nil))

(insn 138 136 139 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg:SI 1 edx))
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 139 138 59 (set (mem:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem:SI (plus:SI (mult:SI (reg:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg:SI 1 edx)) 0)) -1 (nil)
    (nil))

(insn 59 139 61 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC137"))) 27 {pushsi2} (nil)
    (nil))

(insn 61 59 62 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 62 61 65 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 65 62 66 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 66 65 69 NOTE_INSN_LOOP_CONT 0)

(insn 69 66 114 (parallel[ 
            (set (reg/v:SI 3 ebx)
                (plus:SI (reg/v:SI 3 ebx)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 114 69 37 NOTE_INSN_LOOP_VTOP 0)

(insn 37 114 38 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 ebx)
            (reg/v:SI 4 esi))) 2 {*cmpsi_1_insn} (insn_list 69 (nil))
    (nil))

(jump_insn 38 37 75 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 288 {*jcc_1} (insn_list 37 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 47

(note 75 38 76 NOTE_INSN_LOOP_END 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 43
(code_label 76 75 118 786 "" "" [1 uses])

(note 118 76 79 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 79 118 81 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 81 79 83 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (symbol_ref:SI ("*.LC138"))) 27 {pushsi2} (insn_list 79 (nil))
    (nil))

(insn 83 81 84 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (mem/f:SI (symbol_ref:SI ("out_fp")) 0)) 27 {pushsi2} (nil)
    (nil))

(call_insn 84 83 88 (set (reg:SI 0 eax)
        (call (mem:QI (symbol_ref:SI ("fprintf")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(insn 88 84 89 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 89 88 92 NOTE_INSN_LOOP_CONT 0)

(insn 92 89 109 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 109 92 25 NOTE_INSN_LOOP_VTOP 0)

(insn 25 109 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 4 esi)
            (mem/f:SI (symbol_ref:SI ("ndim")) 0))) 2 {*cmpsi_1_insn} (insn_list 92 (nil))
    (nil))

(jump_insn 26 25 98 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 288 {*jcc_1} (insn_list 25 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

(note 98 26 99 NOTE_INSN_LOOP_END 0)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp]
(code_label 99 98 119 782 "" "" [1 uses])

(note 119 99 101 [bb 5] NOTE_INSN_BASIC_BLOCK 0)
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 101 119 127 0x403c43a0 NOTE_INSN_BLOCK_END 0)

(note 127 101 0 NOTE_INSN_DELETED 0)


;; Function gasdev

;; 11 regs to allocate: 45 (2) 47 (2) 46 (2) 61 (2) 63 (2) 64 (2) 65 (2) 51 (2) 67 (2) 43 42 (2)
;; 42 conflicts: 42 43 45 46 47 48 49 50 51 52 53 54 56 57 59 60 61 7 8 9
;; 43 conflicts: 42 43 45 46 47 48 49 50 51 52 53 54 56 57 59 7 8 9
;; 45 conflicts: 42 43 45 46 47 51 59 60 61 63 64 7 8
;; 46 conflicts: 42 43 45 46 47 51 52 53 54 56 57 59 60 61 63 64 65 67 7 8 9
;; 47 conflicts: 42 43 45 46 47 51 56 57 59 60 61 63 64 65 67 68 7 8 9
;; 48 conflicts: 42 43 48 51 7 8
;; 49 conflicts: 42 43 49 51 7 8
;; 50 conflicts: 42 43 50 51 7 8
;; 50 preferences: 9
;; 51 conflicts: 42 43 45 46 47 48 49 50 51 52 53 54 56 57 59 7 8 9
;; 52 conflicts: 42 43 46 51 52 7 8
;; 53 conflicts: 42 43 46 51 53 7 8
;; 54 conflicts: 42 43 46 51 54 7 8
;; 56 conflicts: 42 43 46 47 51 56 57 7 8 9
;; 57 conflicts: 42 43 46 47 51 56 57 7 8 9
;; 59 conflicts: 42 43 45 46 47 51 59 7 8
;; 60 conflicts: 42 45 46 47 60 61 63 7 8
;; 61 conflicts: 42 45 46 47 60 61 7 8
;; 63 conflicts: 45 46 47 60 63 7 8
;; 64 conflicts: 45 46 47 64 7
;; 65 conflicts: 46 47 65 7
;; 67 conflicts: 46 47 67 68 7 8
;; 68 conflicts: 47 67 68 7 8
;; 68 preferences: 9
;; 69 conflicts: 69 7 8
;; 71 conflicts: 71 7 8

Spilling for insn 4.
Using reg 8 for reload 0
Spilling for insn 6.
Spilling for insn 13.
Spilling for insn 26.
Spilling for insn 35.
Using reg 9 for reload 0
Spilling for insn 40.
Spilling for insn 49.
Using reg 9 for reload 0
Spilling for insn 51.
Spilling for insn 52.
Spilling for insn 53.
Spilling for insn 61.
Using reg 0 for reload 2
Using reg 8 for reload 0
Using reg 9 for reload 1
Spilling for insn 63.
Spilling for insn 64.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 76.
Spilling for insn 82.
Spilling for insn 83.
Spilling for insn 85.
Spilling for insn 93.
Spilling for insn 102.
Spilling for insn 104.
Spilling for insn 107.
Spilling for insn 109.
Spilling for insn 122.
Spilling for insn 125.
Spilling for insn 4.
Using reg 8 for reload 0
Spilling for insn 6.
Spilling for insn 13.
Spilling for insn 26.
Spilling for insn 35.
Using reg 9 for reload 0
Spilling for insn 40.
Spilling for insn 49.
Using reg 9 for reload 0
Spilling for insn 51.
Spilling for insn 52.
Spilling for insn 53.
Spilling for insn 61.
Using reg 0 for reload 2
Using reg 8 for reload 0
Using reg 9 for reload 1
Spilling for insn 63.
Spilling for insn 64.
Using reg 0 for reload 1
Using reg 9 for reload 0
Spilling for insn 76.
Spilling for insn 82.
Spilling for insn 83.
Spilling for insn 85.
Spilling for insn 93.
Spilling for insn 102.
Spilling for insn 104.
Spilling for insn 107.
Spilling for insn 109.
Spilling for insn 122.
Spilling for insn 125.
;; Register dispositions:
43 in 3  48 in 8  49 in 8  50 in 8  52 in 8  53 in 8  
54 in 8  56 in 9  57 in 8  59 in 8  60 in 8  61 in 9  
63 in 9  64 in 8  65 in 8  67 in 9  68 in 8  69 in 8  
71 in 8  

;; Hard regs used:  0 3 6 7 8 9 16 17 18 19 20

(note 2 0 139 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 139 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 139 151 (set (reg:DF 8 st(0))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 151 4 6 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -16 [0xfffffff0])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(insn 6 151 7 (set (reg/v:SI 3 ebx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)
        (nil)))

(note 7 6 10 NOTE_INSN_FUNCTION_BEG 0)

(note 10 7 13 0x403ca5c0 NOTE_INSN_BLOCK_BEG 0)

(insn 13 10 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:SI (symbol_ref:SI ("iset.0")) 0)
            (const_int 0 [0x0]))) 0 {*cmpsi_ccno_1} (nil)
    (nil))

(jump_insn 14 13 147 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0x0]))
            (label_ref 117)
            (pc))) 288 {*jcc_1} (insn_list 13 (nil))
    (expr_list:REG_BR_PROB (const_int 6001 [0x1771])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43
(note 147 14 146 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(note 146 147 18 NOTE_INSN_DELETED 0)
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 51

(note 18 146 67 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp] 42 43 51
(code_label 67 18 140 796 "" "" [2 uses])

(note 140 67 24 [bb 2] NOTE_INSN_BASIC_BLOCK 0)

(insn 24 140 26 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -12 [0xfffffff4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 26 24 27 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 3 ebx)) 27 {pushsi2} (insn_list 24 (nil))
    (nil))

(call_insn 27 26 29 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 29 27 31 NOTE_INSN_DELETED 1077724752)

(insn 31 29 32 (set (reg:DF 8 st(0))
        (float_extend:DF (reg:SF 8 st(0)))) 86 {*extendsfdf2_1} (insn_list 29 (nil))
    (nil))

(insn 32 31 154 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 31 (nil))
    (nil))

(insn 154 32 35 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC140")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])) 63 {*movdf_integer} (nil)
    (nil))

(insn 35 154 157 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 32 (nil))
    (nil))

(insn 157 35 38 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 38 157 40 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 40 38 41 (set (mem/f:SI (pre_dec:SI (reg:SI 7 esp)) 0)
        (reg/v:SI 3 ebx)) 27 {pushsi2} (insn_list 38 (nil))
    (nil))

(call_insn 41 40 43 (set (reg:SF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("ran1")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 43 41 45 NOTE_INSN_DELETED 1077724400)

(insn 45 43 46 (set (reg:DF 8 st(0))
        (float_extend:DF (reg:SF 8 st(0)))) 86 {*extendsfdf2_1} (insn_list 43 (nil))
    (nil))

(insn 46 45 160 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 45 (nil))
    (nil))

(insn 160 46 49 (set (reg:DF 9 st(1))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC140")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])) 63 {*movdf_integer} (nil)
    (nil))

(insn 49 160 163 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 46 (nil))
    (nil))

(insn 163 49 166 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 166 163 51 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 51 166 169 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 35 (nil))
    (nil))

(insn 169 51 52 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 52 169 53 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 49 (nil))
    (nil))

(insn 53 52 172 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 51 (insn_list 52 (nil)))
    (nil))

(insn 172 53 56 (set (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -24 [0xffffffe8])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 56 172 57 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 57 56 175 NOTE_INSN_LOOP_CONT 0)

(insn 175 57 195 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC140")) 0) 0 [0x0] 0 [0x0] 1073709056 [0x3fff8000])) 63 {*movdf_integer} (nil)
    (nil))

(insn 195 175 196 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 196 195 197 (set (reg:CCNO 17 flags)
        (compare:CCNO (and:SI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (const_int 5 [0x5]))
            (const_int 0 [0x0]))) -1 (nil)
    (nil))

(jump_insn 197 196 141 (set (pc)
        (if_then_else (eq (reg:CCNO 17 flags)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 45 46 47 51

;; Start of basic block 3, registers live: 6 [bp] 7 [sp] 42 43 45 46 47 51
(note 141 197 63 [bb 3] NOTE_INSN_BASIC_BLOCK 0)

(insn 63 141 191 (set (reg:DF 8 st(0))
        (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC141")) 0) 0 [0x0] 0 [0x0] 0 [0x0])) -1 (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC141")) 0) 0 [0x0] 0 [0x0] 0 [0x0])
        (nil)))

(insn 191 63 192 (set (reg:HI 0 ax)
        (unspec:HI[ 
                (compare:CCFPU (reg:DF 9 st(1))
                    (reg:DF 8 st(0)))
            ]  9)) -1 (nil)
    (nil))

(insn 192 191 193 (parallel[ 
            (set (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8]))
                (and:SI (zero_extract:SI (reg:HI 0 ax)
                        (const_int 8 [0x8])
                        (const_int 8 [0x8]))
                    (const_int 69 [0x45])))
            (clobber (reg:CC 17 flags))
        ] ) -1 (nil)
    (nil))

(insn 193 192 194 (set (reg:CC 17 flags)
        (compare:CC (subreg:QI (zero_extract:SI (reg:HI 0 ax)
                    (const_int 8 [0x8])
                    (const_int 8 [0x8])) 0)
            (const_int 64 [0x40]))) -1 (nil)
    (nil))

(jump_insn 194 193 70 (set (pc)
        (if_then_else (eq (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 67)
            (pc))) -1 (nil)
    (nil))
;; End of basic block 3, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 45 46 47 51

(note 70 194 142 NOTE_INSN_LOOP_END 0)

;; Start of basic block 4, registers live: 6 [bp] 7 [sp] 42 45 46 47
(note 142 70 74 [bb 4] NOTE_INSN_BASIC_BLOCK 0)

(insn 74 142 188 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int -8 [0xfffffff8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 188 74 189 (set (reg:SI 7 esp)
        (plus:SI (reg:SI 7 esp)
            (const_int -8 [0xfffffff8]))) -1 (nil)
    (nil))

(insn 189 188 77 (set (mem:DF (reg:SI 7 esp) 0)
        (reg:DF 9 st(1))) -1 (nil)
    (nil))

(call_insn 77 189 79 (set (reg:DF 8 st(0))
        (call (mem:QI (symbol_ref:SI ("log")) 0)
            (const_int 16 [0x10]))) 369 {*call_value_0} (nil)
    (nil)
    (nil))

(note 79 77 81 NOTE_INSN_DELETED 1077723824)

(note 81 79 178 NOTE_INSN_DELETED 0)

(insn 178 81 82 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -16 [0xfffffff0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 82 178 83 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem/u/f:DF (symbol_ref/u:SI ("*.LC142")) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 83 82 84 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -16 [0xfffffff0])) 0))) 314 {*fop_df_comm} (insn_list 82 (nil))
    (nil))

(insn 84 83 85 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 79 (insn_list 83 (nil)))
    (nil))

(insn 85 84 88 (set (reg:DF 8 st(0))
        (div:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (reg:SI 6 ebp)
                    (const_int -24 [0xffffffe8])) 0))) 319 {*fop_df_1} (insn_list 84 (nil))
    (nil))

(note 88 85 91 0x403ca020 NOTE_INSN_BLOCK_BEG 0)

(insn 91 88 92 (parallel[ 
            (set (reg:SI 7 esp)
                (plus:SI (reg:SI 7 esp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note/i 92 91 93 0x403ca040 NOTE_INSN_BLOCK_BEG 0)

(insn/i 93 92 181 (parallel[ 
            (set (reg:DF 8 st(0))
                (asm_operands/v ("fsqrt") ("=t") 0[ 
                        (reg:DF 8 st(0))
                    ] 
                    [ 
                        (asm_input:DF ("0"))
                    ]  ("/usr/include/bits/mathinline.h") 441))
            (clobber (reg:QI 19 dirflag))
            (clobber (reg:QI 18 fpsr))
            (clobber (reg:QI 17 flags))
        ] ) -1 (insn_list 85 (nil))
    (nil))

(insn 181 93 97 (set (reg/v:DF 9 st(1))
        (reg:DF 8 st(0))) 63 {*movdf_integer} (nil)
    (nil))

(note/i 97 181 100 0x403ca040 NOTE_INSN_BLOCK_END 0)

(note 100 97 184 0x403ca020 NOTE_INSN_BLOCK_END 0)

(insn 184 100 102 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -32 [0xffffffe0])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 102 184 104 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 9 st(1)))) 314 {*fop_df_comm} (insn_list 93 (nil))
    (expr_list:REG_EQUIV (mem/f:DF (symbol_ref:SI ("gset.1")) 0)
        (nil)))

(insn 104 102 107 (set (mem/f:DF (symbol_ref:SI ("gset.1")) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 102 (nil))
    (nil))

(insn 107 104 187 (set (mem/f:SI (symbol_ref:SI ("iset.0")) 0)
        (const_int 1 [0x1])) 33 {*movsi_1} (nil)
    (nil))

(insn 187 107 109 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (reg:SI 6 ebp)
                (const_int -40 [0xffffffd8])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 109 187 111 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 9 st(1)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 111 109 112 (use (reg/i:DF 8 st(0))) -1 (insn_list 109 (nil))
    (nil))

(jump_insn 112 111 113 (set (pc)
        (label_ref 137)) 296 {jump} (nil)
    (nil))
;; End of basic block 4, registers live:
 6 [bp] 7 [sp] 8 [st] 20 [frame]

(barrier 113 112 117)

;; Start of basic block 5, registers live: 6 [bp] 7 [sp]
(code_label 117 113 143 792 "" "" [1 uses])

(note 143 117 122 [bb 5] NOTE_INSN_BASIC_BLOCK 0)

(insn 122 143 125 (set (mem/f:SI (symbol_ref:SI ("iset.0")) 0)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(insn 125 122 127 (set (reg:DF 8 st(0))
        (mem/f:DF (symbol_ref:SI ("gset.1")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem/f:DF (symbol_ref:SI ("gset.1")) 0)
        (nil)))

(insn 127 125 133 (use (reg/i:DF 8 st(0))) -1 (insn_list 125 (nil))
    (nil))
;; End of basic block 5, registers live:
 6 [bp] 7 [sp] 8 [st] 20 [frame]

(note 133 127 137 0x403ca5c0 NOTE_INSN_BLOCK_END 0)

;; Start of basic block 6, registers live: 6 [bp] 7 [sp] 8 [st]
(code_label 137 133 144 791 "" "" [1 uses])

(note 144 137 138 [bb 6] NOTE_INSN_BASIC_BLOCK 0)

(insn 138 144 148 (use (reg/i:DF 8 st(0))) -1 (nil)
    (nil))
;; End of basic block 6, registers live:
 6 [bp] 7 [sp] 8 [st] 20 [frame]

(note 148 138 0 NOTE_INSN_DELETED 0)


;; Function transform

;; 7 regs to allocate: 45 (2) 44 (2) 46 42 68 (2) 43 50 (2)
;; 42 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 43 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 44 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 45 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 46 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 47 conflicts: 42 43 44 45 46 47 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 68 7 8 9 10 11
;; 48 conflicts: 42 43 44 45 46 48 50 68 7 10
;; 49 conflicts: 42 43 44 45 46 49 50 68 7 10
;; 50 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 51 conflicts: 42 43 44 45 46 47 50 51 68 7 9 10
;; 52 conflicts: 42 43 44 45 46 47 50 52 53 54 68 7 8 9 10
;; 53 conflicts: 42 43 44 45 46 47 50 52 53 68 7 8 9 10
;; 54 conflicts: 42 43 44 45 46 47 50 52 54 68 7 8 9 10
;; 55 conflicts: 42 43 44 45 46 47 50 55 57 58 59 68 7 8 9 10 11
;; 57 conflicts: 42 43 44 45 46 47 50 55 57 58 59 60 61 62 63 64 65 68 69 70 71 72 73 75 76 77 78 79 80 7 8 9 10 11
;; 58 conflicts: 42 43 44 45 46 47 50 55 57 58 68 7 8 9 10 11
;; 59 conflicts: 42 43 44 45 46 47 50 55 57 59 68 7 8 9 10 11
;; 60 conflicts: 42 43 44 45 46 47 50 57 60 68 7 9 10 11
;; 61 conflicts: 42 43 44 45 46 47 50 57 61 68 7 9 10 11
;; 62 conflicts: 42 43 44 45 46 47 50 57 62 68 7 9 10 11
;; 63 conflicts: 42 43 44 45 46 47 50 57 63 68 7 9 10 11
;; 64 conflicts: 42 43 44 45 46 47 50 57 64 68 7 9 10 11
;; 65 conflicts: 42 43 44 45 46 47 50 57 65 68 69 7 9 10 11
;; 66 conflicts: 42 43 44 45 46 50 66 67 7 8 9
;; 67 conflicts: 42 43 44 45 46 50 66 67 7 8 9
;; 68 conflicts: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 57 58 59 60 61 62 63 64 65 68 69 70 71 72 73 75 76 77 78 79 80 86 87 88 89 90 91 92 93 94 95 96 97 98 7 8 9 10 11
;; 69 conflicts: 42 43 44 45 46 50 57 65 68 69 7 9 10 11
;; 70 conflicts: 42 43 44 45 46 50 57 68 70 71 72 73 7 8 9 11
;; 71 conflicts: 42 43 44 45 46 50 57 68 70 71 7 8 9 11
;; 72 conflicts: 42 43 44 45 46 50 57 68 70 72 7 8 9 11
;; 73 conflicts: 42 43 44 45 46 50 57 68 70 73 7 8 9 11
;; 75 conflicts: 42 43 44 45 46 50 57 68 75 7 9 11
;; 76 conflicts: 42 43 44 45 46 50 57 68 76 7 8 11
;; 77 conflicts: 42 43 44 45 46 50 57 68 77 7 8 11
;; 78 conflicts: 42 43 44 45 46 50 57 68 78 7 8 11
;; 79 conflicts: 42 43 44 45 46 50 57 68 79 7 8 11
;; 80 conflicts: 42 43 44 45 46 50 57 68 80 86 7 8 11
;; 86 conflicts: 42 43 44 45 46 50 68 80 86 7 8 11
;; 87 conflicts: 42 43 44 45 46 50 68 87 7 8
;; 88 conflicts: 42 43 44 45 46 50 68 88 7 8
;; 89 conflicts: 42 43 44 45 46 50 68 89 7 9
;; 90 conflicts: 42 43 44 45 46 50 68 90 91 92 7 8 9
;; 91 conflicts: 42 43 44 45 46 50 68 90 91 7 8 9
;; 92 conflicts: 42 43 44 45 46 50 68 90 92 7 8 9
;; 93 conflicts: 42 43 44 45 46 50 68 93 94 95 96 97 7 8 9
;; 94 conflicts: 42 43 44 45 46 50 68 93 94 7 8 9
;; 95 conflicts: 42 43 44 45 46 50 68 93 95 7 8 9
;; 96 conflicts: 42 43 44 45 46 50 68 93 96 7 8 9
;; 97 conflicts: 42 43 44 45 46 50 68 93 97 7 8 9
;; 98 conflicts: 42 43 44 45 46 50 68 98 7 9

Spilling for insn 4.
Spilling for insn 6.
Spilling for insn 8.
Spilling for insn 10.
Spilling for insn 130.
Spilling for insn 131.
Spilling for insn 132.
Spilling for insn 133.
Spilling for insn 30.
Spilling for insn 31.
Spilling for insn 36.
Spilling for insn 38.
Spilling for insn 43.
Spilling for insn 44.
Spilling for insn 48.
Spilling for insn 51.
Spilling for insn 52.
Spilling for insn 63.
Spilling for insn 64.
Spilling for insn 70.
Spilling for insn 73.
Spilling for insn 74.
Spilling for insn 86.
Spilling for insn 88.
Spilling for insn 90.
Spilling for insn 92.
Spilling for insn 96.
Spilling for insn 97.
Spilling for insn 102.
;; Register dispositions:
42 in 1  43 in 2  44 in 13  45 in 12  46 in 0  47 in 10  
48 in 10  49 in 10  50 in 15  51 in 9  52 in 9  53 in 8  
54 in 8  55 in 9  57 in 11  58 in 8  59 in 8  60 in 9  
61 in 9  62 in 9  63 in 9  64 in 9  65 in 9  66 in 9  
67 in 8  68 in 14  69 in 10  70 in 9  71 in 8  72 in 8  
73 in 8  75 in 9  76 in 8  77 in 8  78 in 8  79 in 8  
80 in 8  86 in 11  87 in 8  88 in 8  89 in 9  90 in 9  
91 in 8  92 in 8  93 in 9  94 in 8  95 in 8  96 in 8  
97 in 8  98 in 9  

;; Hard regs used:  0 1 2 6 8 9 10 11 12 13 14 15 16 17 20

(note 2 0 126 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 126 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 126 6 (set (reg/v:SI 1 edx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 6 4 8 (set (reg/v:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)
        (nil)))

(insn 8 6 10 (set (reg/v:DF 13 st(5))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(insn 10 8 11 (set (reg/v:DF 12 st(4))
        (mem/f:DF (plus:SI (reg:SI 6 ebp)
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (nil)
    (nil))

(note 11 10 14 NOTE_INSN_FUNCTION_BEG 0)

(note 14 11 18 0x403d5ea0 NOTE_INSN_BLOCK_BEG 0)

(insn 18 14 122 (set (reg/v:SI 0 eax)
        (const_int 0 [0x0])) 33 {*movsi_1} (nil)
    (nil))

(note 122 18 130 NOTE_INSN_DELETED 0)

(insn 130 122 140 (set (reg:DF 15 st(7))
        (mem/u/f:DF (symbol_ref/u:SI ("*.LC144")) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (const_double:DF (mem/u/f:DF (symbol_ref/u:SI ("*.LC144")) 0) 0 [0x0] 0 [0x0] 1073643520 [0x3ffe8000])
        (nil)))

(insn 140 130 131 (set (reg:DF 9 st(1))
        (reg/v:DF 13 st(5))) 63 {*movdf_integer} (nil)
    (nil))

(insn 131 140 143 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 8 (nil))
    (nil))

(insn 143 131 132 (set (reg:DF 8 st(0))
        (reg/v:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 132 143 146 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 10 (nil))
    (nil))

(insn 146 132 133 (set (reg:DF 14 st(6))
        (reg:DF 9 st(1))) 63 {*movdf_integer} (nil)
    (nil))

(insn 133 146 19 (set (reg:DF 14 st(6))
        (minus:DF (reg:DF 14 st(6))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 131 (insn_list 132 (nil)))
    (nil))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 50 68

(note 19 133 25 NOTE_INSN_LOOP_BEG 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 44 45 46 50 68
(code_label 25 19 127 806 "" "" [1 uses])

(note 127 25 30 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 30 127 31 (set (reg:DF 10 st(2))
        (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 31 30 34 (set (reg:DF 10 st(2))
        (plus:DF (reg:DF 10 st(2))
            (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                            (const_int 8 [0x8]))
                        (reg/v:SI 1 edx))
                    (const_int 16 [0x10])) 0))) 314 {*fop_df_comm} (insn_list 30 (nil))
    (nil))

(insn 34 31 149 (set (reg/v:DF 10 st(2))
        (mult:DF (reg:DF 10 st(2))
            (reg:DF 15 st(7)))) 314 {*fop_df_comm} (insn_list 31 (nil))
    (nil))

(insn 149 34 36 (set (reg:DF 9 st(1))
        (reg/v:DF 13 st(5))) 63 {*movdf_integer} (nil)
    (nil))

(insn 36 149 37 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx)) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 37 36 152 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 36 (nil))
    (nil))

(insn 152 37 38 (set (reg:DF 8 st(0))
        (reg/v:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 38 152 39 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                            (const_int 8 [0x8]))
                        (reg/v:SI 1 edx))
                    (const_int 24 [0x18])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 39 38 40 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 38 (nil))
    (nil))

(insn 40 39 155 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 37 (insn_list 39 (nil)))
    (nil))

(insn 155 40 43 (set (reg:DF 11 st(3))
        (reg/v:DF 10 st(2))) 63 {*movdf_integer} (nil)
    (nil))

(insn 43 155 158 (set (reg:DF 11 st(3))
        (plus:DF (reg:DF 11 st(3))
            (reg/v:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 34 (nil))
    (nil))

(insn 158 43 44 (set (reg:DF 8 st(0))
        (reg:DF 11 st(3))) 63 {*movdf_integer} (nil)
    (nil))

(insn 44 158 45 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 43 (nil))
    (nil))

(insn 45 44 46 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 44 (nil))
    (nil))

(insn 46 45 48 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 40 (insn_list 45 (nil)))
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg/v:SI 2 ecx)) 0)
        (nil)))

(insn 48 46 51 (set (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg/v:SI 2 ecx)) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 46 (nil))
    (nil))

(insn 51 48 52 (set (reg:DF 9 st(1))
        (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg/v:SI 1 edx)) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                    (const_int 8 [0x8]))
                (reg/v:SI 1 edx)) 0)
        (nil)))

(insn 52 51 54 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                            (const_int 8 [0x8]))
                        (reg/v:SI 1 edx))
                    (const_int 24 [0x18])) 0))) 319 {*fop_df_1} (insn_list 51 (nil))
    (nil))

(insn 54 52 55 (set (reg:DF 9 st(1))
        (neg:DF (reg:DF 9 st(1)))) -1 (insn_list 52 (nil))
    (nil))

(insn 55 54 56 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 54 (nil))
    (nil))

(insn 56 55 60 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 55 (nil))
    (nil))

(insn 60 56 61 (set (reg:DF 10 st(2))
        (mult:DF (reg/v:DF 10 st(2))
            (reg:DF 14 st(6)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 61 60 63 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 10 st(2)))) 314 {*fop_df_comm} (insn_list 56 (insn_list 60 (nil)))
    (nil))

(insn 63 61 64 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 16 [0x10])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 16 [0x10])) 0)
        (nil)))

(insn 64 63 67 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                            (const_int 8 [0x8]))
                        (reg/v:SI 1 edx))
                    (const_int 8 [0x8])) 0))) 319 {*fop_df_1} (insn_list 63 (nil))
    (nil))

(insn 67 64 68 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg:DF 15 st(7)))) 314 {*fop_df_comm} (insn_list 64 (nil))
    (nil))

(insn 68 67 70 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 61 (insn_list 67 (nil)))
    (nil))

(insn 70 68 73 (set (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 2 ecx))
                (const_int 8 [0x8])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 68 (nil))
    (nil))

(insn 73 70 74 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 24 [0x18])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 24 [0x18])) 0)
        (nil)))

(insn 74 73 75 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx)) 0))) 319 {*fop_df_1} (insn_list 73 (nil))
    (nil))

(insn 75 74 76 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 74 (nil))
    (nil))

(insn 76 75 77 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 75 (nil))
    (nil))

(insn 77 76 84 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 76 (nil))
    (nil))

(insn 84 77 85 (set (reg:DF 11 st(3))
        (mult:DF (reg:DF 11 st(3))
            (reg:DF 14 st(6)))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 85 84 86 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (reg:DF 11 st(3)))) 314 {*fop_df_comm} (insn_list 77 (insn_list 84 (nil)))
    (nil))

(insn 86 85 88 (set (reg:DF 8 st(0))
        (minus:DF (reg:DF 8 st(0))
            (reg:DF 9 st(1)))) 319 {*fop_df_1} (insn_list 85 (nil))
    (nil))

(insn 88 86 161 (set (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 2 ecx))
                (const_int 16 [0x10])) 0)
        (reg:DF 8 st(0))) 63 {*movdf_integer} (insn_list 86 (nil))
    (nil))

(insn 161 88 90 (set (reg:DF 9 st(1))
        (reg/v:DF 12 st(4))) 63 {*movdf_integer} (nil)
    (nil))

(insn 90 161 91 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (mem:DF (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx)) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 91 90 164 (set (reg:DF 9 st(1))
        (mult:DF (reg:DF 9 st(1))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 90 (nil))
    (nil))

(insn 164 91 92 (set (reg:DF 8 st(0))
        (reg/v:DF 13 st(5))) 63 {*movdf_integer} (nil)
    (nil))

(insn 92 164 93 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                            (const_int 8 [0x8]))
                        (reg/v:SI 1 edx))
                    (const_int 24 [0x18])) 0))) 314 {*fop_df_comm} (nil)
    (nil))

(insn 93 92 94 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 92 (nil))
    (nil))

(insn 94 93 96 (set (reg:DF 9 st(1))
        (plus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 314 {*fop_df_comm} (insn_list 91 (insn_list 93 (nil)))
    (nil))

(insn 96 94 97 (set (reg:DF 8 st(0))
        (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 8 [0x8])) 0)) 63 {*movdf_integer} (nil)
    (expr_list:REG_EQUIV (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 1 edx))
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 97 96 98 (set (reg:DF 8 st(0))
        (plus:DF (reg:DF 8 st(0))
            (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                            (const_int 8 [0x8]))
                        (reg/v:SI 1 edx))
                    (const_int 16 [0x10])) 0))) 314 {*fop_df_comm} (insn_list 96 (nil))
    (nil))

(insn 98 97 99 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 12 st(4)))) 314 {*fop_df_comm} (insn_list 97 (nil))
    (nil))

(insn 99 98 100 (set (reg:DF 8 st(0))
        (mult:DF (reg:DF 8 st(0))
            (reg/v:DF 13 st(5)))) 314 {*fop_df_comm} (insn_list 98 (nil))
    (nil))

(insn 100 99 102 (set (reg:DF 9 st(1))
        (minus:DF (reg:DF 9 st(1))
            (reg:DF 8 st(0)))) 319 {*fop_df_1} (insn_list 94 (insn_list 99 (nil)))
    (nil))

(insn 102 100 105 (set (mem:DF (plus:SI (plus:SI (mult:SI (reg/v:SI 0 eax)
                        (const_int 8 [0x8]))
                    (reg/v:SI 2 ecx))
                (const_int 24 [0x18])) 0)
        (reg:DF 9 st(1))) 63 {*movdf_integer} (insn_list 100 (nil))
    (nil))

(note 105 102 108 NOTE_INSN_LOOP_CONT 0)

(insn 108 105 125 (parallel[ 
            (set (reg/v:SI 0 eax)
                (plus:SI (reg/v:SI 0 eax)
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 125 108 21 NOTE_INSN_LOOP_VTOP 0)

(insn 21 125 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 0 eax)
            (const_int 11 [0xb]))) 2 {*cmpsi_1_insn} (insn_list 108 (nil))
    (nil))

(jump_insn 22 21 114 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 25)
            (pc))) 288 {*jcc_1} (insn_list 21 (nil))
    (nil))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 44 45 46 50 68

(note 114 22 117 NOTE_INSN_LOOP_END 0)

(note 117 114 137 0x403d5ea0 NOTE_INSN_BLOCK_END 0)

(note 137 117 0 NOTE_INSN_DELETED 0)


;; Function triangle_matrix_copy

;; 3 regs to allocate: 42 45 43
;; 42 conflicts: 42 43 44 45 46 47 48 50 51 54 0 1 7
;; 43 conflicts: 42 43 44 45 46 47 48 50 51 54 0 1 7
;; 44 conflicts: 42 43 44 46 0 1 7
;; 45 conflicts: 42 43 45 54 0 1 7
;; 46 conflicts: 42 43 44 46 0 1 7
;; 47 conflicts: 42 43 47 50 0 1 7
;; 48 conflicts: 42 43 48 0 7
;; 50 conflicts: 42 43 47 50 0 1 7
;; 51 conflicts: 42 43 51 0 7
;; 54 conflicts: 42 43 45 54 0 1 7

Spilling for insn 4.
Spilling for insn 6.
Spilling for insn 20.
Spilling for insn 41.
Spilling for insn 42.
;; Register dispositions:
42 in 2  43 in 4  44 in 0  45 in 3  46 in 1  47 in 0  
48 in 0  50 in 1  51 in 0  54 in 0  

;; Hard regs used:  0 1 2 3 4 6 16 17 20

(note 2 0 62 NOTE_INSN_DELETED 0)

;; Start of basic block 0, registers live: 6 [bp] 7 [sp]
(note 62 2 4 [bb 0] NOTE_INSN_BASIC_BLOCK 0)

(insn 4 62 6 (set (reg/v:SI 2 ecx)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 8 [0x8])) 0)
        (nil)))

(insn 6 4 8 (set (reg/v:SI 4 esi)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 12 [0xc])) 0)
        (nil)))

(insn 8 6 9 (set (reg/v:SI 0 eax)
        (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)) 33 {*movsi_1} (nil)
    (expr_list:REG_EQUIV (mem/f:SI (plus:SI (reg:SI 6 ebp)
                (const_int 16 [0x10])) 0)
        (nil)))

(note 9 8 12 NOTE_INSN_FUNCTION_BEG 0)

(note 12 9 15 0x403e1680 NOTE_INSN_BLOCK_BEG 0)

(insn 15 12 16 (set (reg:SI 1 edx)
        (plus:SI (reg/v:SI 0 eax)
            (const_int 1 [0x1]))) -1 (insn_list 8 (nil))
    (nil))

(insn 16 15 18 (parallel[ 
            (set (reg:SI 0 eax)
                (mult:SI (reg/v:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 147 {*mulsi3_1} (insn_list 15 (nil))
    (nil))

(note 18 16 68 NOTE_INSN_DELETED 0)

(insn 68 18 20 (set (reg:SI 1 edx)
        (reg:SI 0 eax)) 33 {*movsi_1} (nil)
    (nil))

(insn 20 68 22 (parallel[ 
            (set (reg:SI 1 edx)
                (lshiftrt:SI (reg:SI 1 edx)
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ] ) 263 {*lshrsi3_1} (insn_list 16 (nil))
    (nil))

(insn 22 20 24 (parallel[ 
            (set (reg:SI 0 eax)
                (plus:SI (reg:SI 0 eax)
                    (reg:SI 1 edx)))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (insn_list 20 (nil))
    (nil))

(insn 24 22 25 (parallel[ 
            (set (reg:SI 0 eax)
                (ashiftrt:SI (reg:SI 0 eax)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ] ) 249 {*ashrsi3_1} (insn_list 22 (nil))
    (expr_list:REG_EQUAL (div:SI (reg:SI 0 eax)
            (const_int 2 [0x2]))
        (nil)))

(note 25 24 27 NOTE_INSN_DELETED 0)

(insn 27 25 57 (set (reg/v:SI 3 ebx)
        (plus:SI (mult:SI (reg:SI 0 eax)
                (const_int 8 [0x8]))
            (reg/v:SI 2 ecx))) 113 {*lea_0} (insn_list 24 (insn_list 4 (nil)))
    (nil))

(insn 57 27 58 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 2 ecx)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 27 (nil))
    (nil))

(jump_insn 58 57 29 (set (pc)
        (if_then_else (geu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 288 {*jcc_1} (insn_list 57 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 0, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 45

(note 29 58 36 NOTE_INSN_LOOP_BEG 0)

(note 36 29 37 NOTE_INSN_LOOP_CONT 0)

;; Start of basic block 1, registers live: 6 [bp] 7 [sp] 42 43 45
(code_label 37 36 63 811 "" "" [1 uses])

(note 63 37 69 [bb 1] NOTE_INSN_BASIC_BLOCK 0)

(insn 69 63 70 (set (reg:SI 0 eax)
        (mem:SI (reg/v:SI 2 ecx) 0)) -1 (nil)
    (nil))

(insn 70 69 71 (set (reg:SI 1 edx)
        (mem:SI (plus:SI (reg/v:SI 2 ecx)
                (const_int 4 [0x4])) 0)) -1 (nil)
    (nil))

(insn 71 70 72 (set (mem:SI (reg/v:SI 4 esi) 0)
        (reg:SI 0 eax)) -1 (nil)
    (nil))

(insn 72 71 43 (set (mem:SI (plus:SI (reg/v:SI 4 esi)
                (const_int 4 [0x4])) 0)
        (reg:SI 1 edx)) -1 (nil)
    (nil))

(insn 43 72 44 (parallel[ 
            (set (reg/v:SI 2 ecx)
                (plus:SI (reg/v:SI 2 ecx)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(insn 44 43 61 (parallel[ 
            (set (reg/v:SI 4 esi)
                (plus:SI (reg/v:SI 4 esi)
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ] ) 117 {*addsi_1} (nil)
    (nil))

(note 61 44 31 NOTE_INSN_LOOP_VTOP 0)

(insn 31 61 32 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 2 ecx)
            (reg/v:SI 3 ebx))) 2 {*cmpsi_1_insn} (insn_list 43 (nil))
    (nil))

(jump_insn 32 31 50 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 288 {*jcc_1} (insn_list 31 (nil))
    (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 1, registers live:
 6 [bp] 7 [sp] 20 [frame] 42 43 45

(note 50 32 51 NOTE_INSN_LOOP_END 0)

;; Start of basic block 2, registers live: 6 [bp] 7 [sp]
(code_label 51 50 64 810 "" "" [1 uses])

(note 64 51 53 [bb 2] NOTE_INSN_BASIC_BLOCK 0)
;; End of basic block 2, registers live:
 6 [bp] 7 [sp] 20 [frame]

(note 53 64 65 0x403e1680 NOTE_INSN_BLOCK_END 0)

(note 65 53 0 NOTE_INSN_DELETED 0)

