<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" creationComplete="init();" verticalAlign="middle"
		xmlns:comp="components.*">
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.FaultEvent;
			import mx.events.ListEvent;
			import mx.charts.events.ChartEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.StateChangeEvent;
			import mx.events.FlexEvent;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.ChartItem;
			import mx.controls.DateField;
			import mx.events.ValidationResultEvent;
			import mx.validators.DateValidator;
			import mx.formatters.DateFormatter;
			import mx.formatters.NumberFormatter;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import mx.charts.renderers.*;
			import mx.collections.ArrayCollection;
			import flash.utils.Timer;
			
			[Bindable]
			private var rawData:Array;
						
			[Bindable]
			private var statesData:Array;
			
			[Bindable]
			public var plotData:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var numberformatter:NumberFormatter = new NumberFormatter();
			
			[Bindable]
			private var dateformatter:DateFormatter = new DateFormatter();
			
			[Bindable]
			private var datevalidator:DateValidator = new DateValidator();
			
			[Bindable]
        	public var t:String = new String();
        	
        	[Bindable]
        	private var xData:ArrayCollection = new ArrayCollection();
        	
        	[Bindable]
        	private var yData:ArrayCollection = new ArrayCollection();
        	
        	[Bindable]
        	private var zData:ArrayCollection = new ArrayCollection();
        	
        	[Bindable]
        	private var minXValue:Number = new Number();
        	
        	[Bindable]
        	public var minYValue:Number = new Number();
        	
        	[Bindable]
        	private var minZValue:Number = new Number();
        	
        	[Bindable]
        	private var rawDataURL:String = new String();
        	
        	[Bindable]
        	private var statesDataURL:String = new String();
        	
        	[Bindable]
        	private var baseURL:String = new String();
        	
        	[Bindable] private var stations:ArrayCollection = new ArrayCollection();
        	
        	private var vResult:ValidationResultEvent;
        	
        	
       		private function showInitTime():void {
            	// Record the number of ms since the player was initialized.
            	//t = "App startup: " + getTimer() + " ms";
        	}
			
			private function init():void {
				
				//getStationData.send();
				//combobox.addEventListener(ListEvent.CHANGE, combobox_Change_Handler);
				//Alert.show(String(combobox.selectedLabel));
				//baseURL = "http://gridfarm013.ucs.indiana.edu//rdahmmexec/daily/SOPAC_FILL/daily_project_";
				if (Application.application.parameters.rawDataURL == 'blyt')
				{
					//rawDataURL = Application.application.parameters.rawDataURL;
					rawDataURL = "http://gridfarm013.ucs.indiana.edu//rdahmmexec/daily/SOPAC_FILL/daily_project_p597_2010-01-20/daily_project_p597_2010-01-20.all.raw";
				}
				 else
				{
					// for test purposes
					rawDataURL = "http://gridfarm013.ucs.indiana.edu//rdahmmexec/daily/SOPAC_FILL/daily_project_p597_2010-01-20/daily_project_p597_2010-01-20.all.raw";
				}
				
				//stationname = combobox.selectedLabel;
				
				if (Application.application.parameters.statesDataURL == '2010-01-19')
				{
					//statesDataURL = Application.application.parameters.statesDataURL;
					statesDataURL = "http://gridfarm013.ucs.indiana.edu//rdahmmexec/daily/SOPAC_FILL/daily_project_p597_2010-01-20/daily_project_p597_2010-01-20.all.Q";
				}
				else
				{
					//for test purposes
					statesDataURL = "http://gridfarm013.ucs.indiana.edu//rdahmmexec/daily/SOPAC_FILL/daily_project_p597_2010-01-20/daily_project_p597_2010-01-20.all.Q";
				} 
				
				//SOPAC_FILL/daily_project_arm1_2009-11-12/daily_project_arm1_2009-11-12.all.raw
				//rawDataHTTPService.url = baseURL+stationname+"_"+date+"/daily_project_"+stationname+"_"+date+".all.raw";
				//statesDataHTTPService.url = baseURL+stationname+"_"+date+"/daily_project_"+stationname+"_"+date+".all.Q";
				//statesDataHTTPService.url = "http://gf14.ucs.indiana.edu:4321/floodgrid/daily_project_blyt_2009-10-23.all.Q";
				//rawDataHTTPService.url = "http://gw19.quarry.iu.teragrid.org/Gadgets/Google/getRawData.php";
				//statesDataHTTPService.url = "http://gw19.quarry.iu.teragrid.org/Gadgets/Google/getStatesData.php";
				
				rawDataHTTPService.request.URL = rawDataURL;
				statesDataHTTPService.request.URL = statesDataURL;
				
				rawDataHTTPService.send();
				
				
				//callLater(paneltitle);
				
				//callLater(showInitTime);

			}
			
			private function rawDataResultHandler(event:ResultEvent):void {
				//Alert.show("in handler");
				rawData = new Array();
				statesData = new Array();
				//plotData = new ArrayCollection();
				//xData = new ArrayCollection();
				//yData = new ArrayCollection();
				//zData = new ArrayCollection();
				
				rawData = event.result[0].toString().split('\n');
				rawData.pop();
				
				for each(var currLine:String in rawData){
					
					var temp:Array = new Array();
					temp = currLine.split(' ');
					temp.splice(5, 3);
					temp.unshift();
					
					
					
					
					var tempObj:Object = new Object();
					//tempObj.stationName = temp[0];
					tempObj.date = String(temp[1]);
					tempObj.xData = Number(temp[2]);
					tempObj.yData = Number(temp[3]);
					tempObj.zData = Number(temp[4]);
					tempObj.state = null;
					
					plotData.addItem(tempObj);
				}
				statesDataHTTPService.send();
			}
			
			private function statesDataResultHandler(event:ResultEvent):void {
				
				statesData = event.result[0].toString().split('\n');
				statesData.pop();
				for (var x:int=0; x<statesData.length; x++){
					plotData[x].state = statesData[x];
					plotData.refresh();
					
				}
				
				minXValue = plotData[0].xData;
				minYValue = plotData[0].yData;
				minZValue = plotData[0].zData; 
				
				for (var i:int = 1; i<plotData.length; i++) {
					
					 if(plotData[i].xData < minXValue) {
						minXValue = plotData[i].xData;
					}
					 if(plotData[i].yData < minYValue) {
						minYValue = plotData[i].yData;
					} 
					if(plotData[i].zData < minZValue) {
						minZValue = plotData[i].zData;
					} 
					
				}
				
				numberformatter.precision = 4;
				numberformatter.useNegativeSign = true;
				numberformatter.useThousandsSeparator = false;
				
				for (var j:int = 0; j<plotData.length; j++) {
					plotData[j].xData = numberformatter.format(plotData[j].xData - minXValue);
					plotData[j].yData = numberformatter.format(plotData[j].yData - minYValue); 
					plotData[j].zData = numberformatter.format(plotData[j].zData - minZValue); 
					
				}
				
				//Make three diff. datasets for each coordinate
				for (var k:int=0;k<plotData.length; k=k+1) {
					var xObject:Object = new Object(); //temp object for x Co-ordinate
					var yObject:Object = new Object(); //temp object for y Co-ordinate
					var zObject:Object = new Object(); //temp object for z Co-ordinate
					
					
                	
                	dateformatter.formatString = "MMM-DD-YYYY";
                	var dateTimeArray:Array = String(plotData[k].date).split('T');
					var dateArray:Array = String(dateTimeArray[0]).split('-');
					var timeArray:Array = String(dateTimeArray[1]).split(':');
					var currDate:Date = new Date(Number(dateArray[0]), Number(dateArray[1])-1, Number(dateArray[2]),Number(timeArray[0]),Number(timeArray[1]),Number(timeArray[2]));

                	xObject.date = currDate;
                	yObject.date = currDate;
                	zObject.date = currDate; 
					
					//add respective coordinate values corresponding to their state in their respective coordinate objects
					switch(plotData[k].state) {
						
						case '1':	xObject.value1 = Number(plotData[k].xData);
									yObject.value1 = Number(plotData[k].yData);
									zObject.value1 = Number(plotData[k].zData);
									break;
						case '2': 	xObject.value2 = Number(plotData[k].xData);
									yObject.value2 = Number(plotData[k].yData);
									zObject.value2 = Number(plotData[k].zData); 
									break;
						case '3': 	xObject.value3 = Number(plotData[k].xData);
									yObject.value3 = Number(plotData[k].yData);
									zObject.value3 = Number(plotData[k].zData); 
									break;
						case '4': 	xObject.value4 = Number(plotData[k].xData);
									yObject.value4 = Number(plotData[k].yData);
									zObject.value4 = Number(plotData[k].zData); 
									break;
						case '5': 	xObject.value5 = Number(plotData[k].xData);
									yObject.value5 = Number(plotData[k].yData);
									zObject.value5 = Number(plotData[k].zData);
									break;
					}
					xObject.value = Number(plotData[k].xData);
					yObject.value = Number(plotData[k].yData);
					zObject.value = Number(plotData[k].zData);
					xData.addItem(xObject);
					yData.addItem(yObject);
					zData.addItem(zObject);
				}
			}
			
			private function test(event:FaultEvent):void
			{
				Alert.show('fault occurred : '+event.message);
			}
			
			/* private function getStationsHandler(event:ResultEvent):void {
				stations = event.result.xml.station;
			} */
			
			/* private function combobox_Change_Handler(event:ListEvent):void {
				//Alert.show(String(combobox.selectedLabel));
				stationname = combobox.selectedLabel;
				//Alert.show("Sname:"+stationname);
				rawDataHTTPService.send();
				
			} */
			
			
			]]> 
	</mx:Script>
	
	<!--<mx:ApplicationControlBar dock="true" 
		width="100%" height="30" 
		id="applicationcontrolbar" paddingBottom="0" paddingLeft="25" paddingRight="0" paddingTop="0" textAlign="center">
		<mx:ComboBox dataProvider="{stations}" labelField="id" id="combobox" 
			editable="false" enabled="true"/>
	</mx:ApplicationControlBar>-->
        <mx:TabNavigator id="tn"  width="100%" height="100%" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
            <!-- Define each panel using a VBox container. -->
			
            <mx:VBox label="North">
				<comp:lineGraphPanel
						graphData="{xData}"
						height="100%"
						width="100%"
						verticalAlign="middle"
						layout="vertical" 
						id="xGraph"
						title="Base Value:{minXValue} "
				/>
            </mx:VBox>

            <mx:VBox label="East">
                <comp:lineGraphPanel
						graphData="{yData}"
						height="100%"
						width="100%"
						verticalAlign="middle"
						layout="vertical" 
						id="yGraph"
						title="Base Value:{minYValue} "
				/>
            </mx:VBox>

            <mx:VBox label="Up">
                <comp:lineGraphPanel
						graphData="{zData}"
						height="100%"
						width="100%"
						verticalAlign="middle"
						layout="vertical" 
						id="zGraph"
						title="Base Value:{minZValue} "
						/>
            </mx:VBox>
            
        </mx:TabNavigator>
	<mx:HTTPService id="rawDataHTTPService" resultFormat="array" result="rawDataResultHandler(event)" fault="test(event)" url="http://gf14.ucs.indiana.edu:4321/streamEcho.php">
		<!--<mx:request xmlns="">
			<stationname>{stationname}</stationname>
			<date>{date}</date>
		</mx:request>-->
	</mx:HTTPService>
	<mx:HTTPService id="statesDataHTTPService" resultFormat="array" result="statesDataResultHandler(event)" url="http://gf14.ucs.indiana.edu:4321/streamEcho.php">
		<!--<mx:request xmlns="">
			<stationname>{stationname}</stationname>
			<date>{date}</date>
		</mx:request>-->
	</mx:HTTPService>
	<!--<mx:HTTPService id="getStationData" url="stations.xml" result="getStationsHandler(event)"/>-->
	
</mx:Application>
