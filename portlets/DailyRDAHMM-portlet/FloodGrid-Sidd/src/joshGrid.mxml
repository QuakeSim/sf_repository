<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
			import mx.charts.HitData;
			import flash.utils.getTimer;
			import mx.charts.chartClasses.DataDescription;
			import mx.formatters.DateFormatter;
			import mx.events.ScrollEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import mx.charts.renderers.*;
						
			[Bindable]
			private var statesArray:Array = new Array();
			[Bindable]
			private var infoArray:Array = new Array();
			[Bindable]
			private var dataArray:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var toBeUsedArray:ArrayCollection = new ArrayCollection();
			private var dateRange:int = 0;
			[Bindable] private var beginDate:Date = new Date();
			[Bindable] private var firstDate:Date = new Date();
			[Bindable] private var lastDate:Date = new Date();
			private var direction:String = 'x';
			
			public static const millisecondsPerDay:int = 1000 * 60 * 60 * 24;
			
			private function init():void {
				getStateDataHTTP.send();
				
			}			
			private function stateDataHandler(event:ResultEvent):void
			{
				this.statesArray = String(event.result).split('\n');
				getRawDataHTTP.send();
			}
			
			private function rawDataHandler(event:ResultEvent):void
			{
				var infoArray:Array = String(event.result).split('\n');
				for each (var currLine:String in infoArray)
				{
					var tempArray:Array = currLine.split(' ');
					var dateTimeArray:Array = String(tempArray[1]).split('T');
					var dateArray:Array = String(dateTimeArray[0]).split('-');
					var timeArray:Array = String(dateTimeArray[1]).split(':');
					tempArray[1] = new Date(Number(dateArray[0]), Number(dateArray[1])-1, Number(dateArray[2]),Number(timeArray[0]),Number(timeArray[1]),Number(timeArray[2]));
					for(var x:int = 0 ; x<tempArray.length ; x = x + 1)
					{
						if (x <= 1) { continue; }
						tempArray[x] = Number(tempArray[x]);
					}
					var plotData:Array = new Array();
					
					this.dataArray.addItem(tempArray);
					
				}

				var xlowValue:Number = Number(this.dataArray[0][2]);
				var xhighValue:Number = xlowValue;
				var ylowValue:Number = Number(this.dataArray[0][3]);
				var yhighValue:Number = ylowValue;
				var zlowValue:Number = Number(this.dataArray[0][4]);
				var zhighValue:Number = zlowValue;
				
				for (x=1 ; x<this.dataArray.length ; x++)
				{
					if (Number(this.dataArray[x][2]) < xlowValue)
					{
						xlowValue = Number(this.dataArray[x][2]);
					}
					if (Number(this.dataArray[x][2]) > xhighValue)
					{
						xhighValue = Number(this.dataArray[x][2]);
					}
					if (Number(this.dataArray[x][3]) < ylowValue)
					{
						ylowValue = Number(this.dataArray[x][3]);
					}
					if (Number(this.dataArray[x][3]) > yhighValue)
					{
						yhighValue = Number(this.dataArray[x][3]);
					}
					if (Number(this.dataArray[x][4]) < zlowValue)
					{
						zlowValue = Number(this.dataArray[x][4]);
					}
					if (Number(this.dataArray[x][4]) > zhighValue)
					{
						zhighValue = Number(this.dataArray[x][4]);
					}
				}
				var toBeUsedArray:ArrayCollection = new ArrayCollection();
				for (x=0 ; x<this.dataArray.length ; x++)
				{
					var tempObj:Object;
					switch (int(this.statesArray[x]))
					{
						case 0 : 
							tempObj = new Object();
							
							tempObj.value = this.dataArray[x][2];
							tempObj.velocity = this.dataArray[x][5];
							tempObj.date = this.dataArray[x][1];
							tempObj.value0 = Number(this.dataArray[x][2])-xlowValue;
							tempObj.direction = 'x';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][3];
							tempObj.velocity = this.dataArray[x][6];
							tempObj.date = this.dataArray[x][1];
							tempObj.value0 = Number(this.dataArray[x][3])-ylowValue;
							tempObj.direction = 'y';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][4];
							tempObj.velocity = this.dataArray[x][7];
							tempObj.date = this.dataArray[x][1];
							tempObj.value0 = Number(this.dataArray[x][4])-zlowValue;
							tempObj.direction = 'z';
							toBeUsedArray.addItem(tempObj);
							break;
						case 1 : 
							tempObj = new Object();
							tempObj.value = this.dataArray[x][2];
							tempObj.velocity = this.dataArray[x][5];
							tempObj.date = this.dataArray[x][1];
							tempObj.value1 = Number(this.dataArray[x][2])-xlowValue;
							tempObj.direction = 'x';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][3];
							tempObj.velocity = this.dataArray[x][6];
							tempObj.date = this.dataArray[x][1];
							tempObj.value1 = Number(this.dataArray[x][3])-ylowValue;
							tempObj.direction = 'y';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][4];
							tempObj.velocity = this.dataArray[x][7];
							tempObj.date = this.dataArray[x][1];
							tempObj.value1 = Number(this.dataArray[x][4])-zlowValue;
							tempObj.direction = 'z';
							toBeUsedArray.addItem(tempObj);
							break;
						case 2 : 
							tempObj = new Object();
							tempObj.value = this.dataArray[x][2];
							tempObj.velocity = this.dataArray[x][5];
							tempObj.date = this.dataArray[x][1];
							tempObj.value2 = Number(this.dataArray[x][2])-xlowValue;
							tempObj.direction = 'x';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][3];
							tempObj.velocity = this.dataArray[x][6];
							tempObj.date = this.dataArray[x][1];
							tempObj.value2 = Number(this.dataArray[x][3])-ylowValue;
							tempObj.direction = 'y';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][4];
							tempObj.velocity = this.dataArray[x][7];
							tempObj.date = this.dataArray[x][1];
							tempObj.value2 = Number(this.dataArray[x][4])-zlowValue;
							tempObj.direction = 'z';
							toBeUsedArray.addItem(tempObj);
							break;
						case 3 : 
							tempObj = new Object();
							tempObj.value = this.dataArray[x][2];
							tempObj.velocity = this.dataArray[x][5];
							tempObj.date = this.dataArray[x][1];
							tempObj.value3 = Number(this.dataArray[x][2])-xlowValue;
							tempObj.direction = 'x';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][3];
							tempObj.velocity = this.dataArray[x][6];
							tempObj.date = this.dataArray[x][1];
							tempObj.value3 = Number(this.dataArray[x][3])-ylowValue;
							tempObj.direction = 'y';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][4];
							tempObj.velocity = this.dataArray[x][7];
							tempObj.date = this.dataArray[x][1];
							tempObj.value3 = Number(this.dataArray[x][4])-zlowValue;
							tempObj.direction = 'z';
							toBeUsedArray.addItem(tempObj);
							break;
						case 4 : 
							tempObj = new Object();
							tempObj.value = this.dataArray[x][2];
							tempObj.velocity = this.dataArray[x][5];
							tempObj.date = this.dataArray[x][1];
							tempObj.value4 = Number(this.dataArray[x][2])-xlowValue;
							tempObj.direction = 'x';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][3];
							tempObj.velocity = this.dataArray[x][6];
							tempObj.date = this.dataArray[x][1];
							tempObj.value4 = Number(this.dataArray[x][3])-ylowValue;
							tempObj.direction = 'y';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][4];
							tempObj.velocity = this.dataArray[x][7];
							tempObj.date = this.dataArray[x][1];
							tempObj.value4 = Number(this.dataArray[x][4])-zlowValue;
							tempObj.direction = 'z';
							toBeUsedArray.addItem(tempObj);
							break;
						case 5 : 
							tempObj = new Object();
							tempObj.value = this.dataArray[x][2];
							tempObj.velocity = this.dataArray[x][5];
							tempObj.date = this.dataArray[x][1];
							tempObj.value5 = Number(this.dataArray[x][2])-xlowValue;
							tempObj.direction = 'x';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][3];
							tempObj.velocity = this.dataArray[x][6];
							tempObj.date = this.dataArray[x][1];
							tempObj.value5 = Number(this.dataArray[x][3])-ylowValue;
							tempObj.direction = 'y';
							toBeUsedArray.addItem(tempObj);
							tempObj = new Object();
							tempObj.value = this.dataArray[x][4];
							tempObj.velocity = this.dataArray[x][7];
							tempObj.date = this.dataArray[x][1];
							tempObj.value5 = Number(this.dataArray[x][4])-zlowValue;
							tempObj.direction = 'z';
							toBeUsedArray.addItem(tempObj);
							break;
					}
				}
				this.firstDate.setTime((toBeUsedArray[0].date as Date).getTime());
				this.beginDate.setTime((toBeUsedArray[0].date as Date).getTime());
				this.lastDate.setTime((toBeUsedArray[toBeUsedArray.length-1].date as Date).getTime())
				this.dataArray = toBeUsedArray;
				this.dataArray.filterFunction = dataFilter;
				dataArray.refresh();
			}
			
			private function dataFilter(item:Object):Boolean
			{
				if (item.direction != direction)
				{
					return false;
				}
				if (dateRange == 0)
				{
					return true;
				}
				var endDate:Date = new Date();
				endDate.setTime(beginDate.getTime() + (millisecondsPerDay*dateRange));
				
				if (((item.date as Date) > beginDate) && ((item.date as Date) < endDate)) 
				{
					return true;
				}  
				return false;
			}
			
			private function testor():void
			{
				
			}
			
			private function navigate(method:String):void
			{
				
				switch (method)
				{
					case 'prev' :
						beginDate.setTime(beginDate.getTime()-(millisecondsPerDay*dateRange*.2));
						if (beginDate.getTime() <= firstDate.getTime())
						{
							beginDate.setTime(firstDate.getTime());
						}
						break;
					case 'next' :
						beginDate.setTime(beginDate.getTime()+(millisecondsPerDay*dateRange*.2));
						if ((beginDate.getTime()) >= lastDate.getTime()- millisecondsPerDay*dateRange)
						{
							beginDate.setTime(lastDate.getTime()- millisecondsPerDay*dateRange);
						}
						break;
				}
				
			}
			
			private function dataTipView(hitData:HitData):String
			{
				return (hitData.item.date as Date).toDateString()+"\n"+hitData.item.value+"\nVelocity : "+hitData.item.velocity;

			}


		]]>
	</mx:Script>
	
	<!--Define Custom Color-->
	<mx:Stroke id="s0" color="gray" weight="1"/>
	<mx:Stroke id="s1" color="red" weight="1"/>
	<mx:Stroke id="s2" color="green" weight="1"/>
	<mx:Stroke id="s3" color="blue" weight="1"/>
	<mx:Stroke id="s4" color="purple" weight="1"/>
	<mx:Stroke id="s5" color="cyan" weight="1"/>
	
	<!--Define Solid Color-->
	<mx:SolidColor id="f0" color="gray"/>
	<mx:SolidColor id="f1" color="red"/>
	<mx:SolidColor id="f2" color="green"/>
	<mx:SolidColor id="f3" color="blue"/>
	<mx:SolidColor id="f4" color="purple"/>
	<mx:SolidColor id="f5" color="cyan"/>
	
	<mx:Panel width="95%" height="100%" layout="vertical" horizontalAlign="center" title="Daily RDAHMM GPS Data Analysis">
	
	<mx:HBox>
		<mx:Text text="X Axis" click="direction = 'x'; dataArray.refresh();"/>
		<mx:Text text="Y Axis" click="direction = 'y'; dataArray.refresh();"/>
		<mx:Text text="Z Axis" click="direction = 'z'; dataArray.refresh();"/>
		
	</mx:HBox>
	
	<mx:HBox>
		<mx:Text text="1 Year" click="dateRange = 365; dataArray.refresh();"/>
		<mx:Text text="2 Year" click="dateRange = 365*2; dataArray.refresh();"/>
		<mx:Text text="5 Year" click="dateRange = 365*5; dataArray.refresh();"/>
		<mx:Text text="All" click="dateRange = 0; dataArray.refresh();"/>
	</mx:HBox>
	<mx:PlotChart 
		click="testor()"
		id="plotchart1"
		width="100%" 
		height="100%" 
		showDataTips="true" 
		dataTipFunction="dataTipView"
		dataProvider="{dataArray}"
		paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:horizontalAxis>
			<mx:DateTimeAxis dataUnits="years"/>
		</mx:horizontalAxis>
		
		<mx:series>
			<mx:PlotSeries 
				displayName="State 0"
				yField="value0"
				xField="date"
				stroke="{s0}"
				fill="{f0}"
				legendMarkerRenderer="mx.charts.renderers.DiamondItemRenderer"/>
			<mx:PlotSeries 
				displayName="State 1" 
				yField="value1" 
				xField="date" 
				stroke="{s1}" 
				fill="{f1}"
				legendMarkerRenderer="mx.charts.renderers.BoxItemRenderer" />
			<mx:PlotSeries 
				displayName="State 2" 
				yField="value2" 
				xField="date" 
				stroke="{s2}"
				fill="{f2}" />
			<mx:PlotSeries 
				displayName="State 3" 
				yField="value3" 
				xField="date" 
				stroke="{s3}" 
				fill="{f3}" />
			<mx:PlotSeries displayName="State 4" 
				yField="value4" 
				xField="date"
				stroke="{s4}" 
				fill="{f4}" />
			<mx:PlotSeries 
				displayName="State 5" 
				yField="value5" 
				xField="date" 
				stroke="{s5}" 
				fill="{f5}" />
		</mx:series>
		
	</mx:PlotChart>
	
	<!--<mx:HScrollBar
		
		width="50%"
		minScrollPosition="0" 
        maxScrollPosition="100"
        lineScrollSize="50" 
        pageScrollSize="100"  
        repeatDelay="1000" 
        repeatInterval="500" />
	-->
	
	<mx:HBox>
		<mx:Text text="prev" click="navigate('prev'); dataArray.refresh()"/>
		<mx:Text text="next" click="navigate('next'); dataArray.refresh()"/>
	</mx:HBox>
	
	
	<!--<mx:Text id="showposition" width="50%" height="100">
		
	</mx:Text>-->
	<mx:Panel layout="vertical" horizontalAlign="center" verticalAlign="middle">
		
	<mx:Legend click="testor()" dataProvider="{plotchart1}" width="100%" direction="horizontal" markerHeight="30" markerWidth="30" fontSize="20"/>
	</mx:Panel>
	
	</mx:Panel>
	
	
	<mx:HTTPService 
		id="getRawDataHTTP" url="http://gf14.ucs.indiana.edu:4321/floodgrid/daily_project_blyt_2009-09-17.all.raw" 
		resultFormat="array" result="rawDataHandler(event)"/>
	<mx:HTTPService 
		id="getStateDataHTTP" url="http://gf14.ucs.indiana.edu:4321/floodgrid/daily_project_blyt_2009-09-17.all.Q" 
		resultFormat="array" result="stateDataHandler(event)"/>		
	
	
</mx:Application>
